Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (l:lambda), check_ta1 (l) = check (l)(rank : 0)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:3)
=================================================
Progress: 2


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) ((Nil)) = if list_eq (getStn (lambda1)) ((Nil)) then true else false

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:5)
=================================================
Progress: 3


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) ((Nil)) = if list_eq (getStn (lambda1)) ((Nil)) then true else false

0 goal(s) more...

0 conjecture(s) more...
>>> induction lambda1(rank : 5)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
sub_check_ta1 (V (string1)) ((Nil)) = if list_eq (getStn (V (string1))) ((Nil)) then true else false

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:4)
=================================================
Progress: 4


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
sub_check_ta1 (V (string1)) ((Nil)) = if list_eq (getStn (V (string1))) ((Nil)) then true else false

2 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 4)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = if list_eq (getStn (lambda2)) ((Nil)) then true else false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (P (string1) (lambda2)) ((Nil)) = if list_eq (getStn (P (string1) (lambda2))) ((Nil)) then true else false

1 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:4)
=================================================
Progress: 5


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = if list_eq (getStn (lambda2)) ((Nil)) then true else false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (P (string1) (lambda2)) ((Nil)) = if list_eq (getStn (P (string1) (lambda2))) ((Nil)) then true else false

1 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 4)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = if list_eq (getStn (lambda2)) ((Nil)) then true else false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) then true else false

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))(rank:5)
=================================================
Progress: 6


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = if list_eq (getStn (lambda2)) ((Nil)) then true else false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) then true else false

1 goal(s) more...

0 conjecture(s) more...
>>> case list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))(rank : 5)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = if list_eq (getStn (lambda2)) ((Nil)) then true else false
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = true

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:5)
=================================================
Progress: 7


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = if list_eq (getStn (lambda2)) ((Nil)) then true else false
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = true

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 5)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = if list_eq (getStn (lambda2)) ((Nil)) then true else false
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (lambda2:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Model : lambda2: P ("uxh") (V ("tcb")), string1: "dsl"
Model : lambda2: V ("yuj"), string1: "yvp"
Model : lambda2: V ("cjp"), string1: "lni"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
sub_check_ta1 (P ("uxh") (V ("tcb"))) (("dsl"::(Nil))) = list_eq (filter (aux ("dsl")) (getStn (P ("uxh") (V ("tcb"))))) ((Nil))
sub_check_ta1 (V ("yuj")) (("yvp"::(Nil))) = list_eq (filter (aux ("yvp")) (getStn (V ("yuj")))) ((Nil))
sub_check_ta1 (V ("cjp")) (("lni"::(Nil))) = list_eq (filter (aux ("lni")) (getStn (V ("cjp")))) ((Nil))
Simplifying took 0.007587 seconds
Result : true
New Env

;;
Lemma List
forall (lambda2:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = if list_eq (getStn (lambda2)) ((Nil)) then true else false
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))

2 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 8


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = if list_eq (getStn (lambda2)) ((Nil)) then true else false
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))

2 goal(s) more...

0 conjecture(s) more...
>>> assert forall (lambda2:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
intro lambda1(rank:5)
intro string1(rank:5)
induction lambda1(rank:15)
=================================================
Progress: 9


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> intro lambda1(rank : 5)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string1(rank:5)
=================================================
Progress: 10


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 5)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:7)
=================================================
Progress: 11


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 5)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:5)
=================================================
Progress: 12


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 5)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:5)
=================================================
Progress: 13


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 5)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
advanced_generalize done
Lemma : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
Model : lambda1: V ("znf"), string1: "jyx"
Model : lambda1: V ("nbf"), string1: "spk"
Model : lambda1: V ("fha"), string1: "mqa"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
sub_check_ta1 (V ("znf")) (("jyx"::(Nil))) = true
sub_check_ta1 (V ("nbf")) (("spk"::(Nil))) = true
sub_check_ta1 (V ("fha")) (("mqa"::(Nil))) = true
Simplifying took 0.003267 seconds
Result : true
New Env

;;
Lemma List
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 14


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

1 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
intro lambda1(rank:7)
intro string1(rank:7)
induction lambda1(rank:17)
=================================================
Progress: 15


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> induction lambda1(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7)
=================================================
Progress: 16


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro lambda1(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7)
=================================================
Progress: 17


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:9)
=================================================
Progress: 18


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7)
=================================================
Progress: 19


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7)
=================================================
Progress: 20


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
case if any_eq (string2) (string1) then false else true(rank:8)
rewrite Cond1 in goal at 0(rank:15)
case string_eq (string1) (string2)(rank:8)
=================================================
Progress: 21


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- Cond1 in goal at 0(rank:7)
=================================================
Progress: 22


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
advanced_generalize done
Lemma : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
Model : lambda1: C (C (C (V ("tab")) (V ("vzk"))) (V ("jgj"))) (V ("ayk")), string1: "rne"
Model : lambda1: P ("wxn") (V ("jqo")), string1: "xww"
Model : lambda1: V ("iwe"), string1: "phi"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
sub_check_ta1 (C (C (C (V ("tab")) (V ("vzk"))) (V ("jgj"))) (V ("ayk"))) (("rne"::(Nil))) = list_eq (filter (aux ("rne")) (getStn (C (C (C (V ("tab")) (V ("vzk"))) (V ("jgj"))) (V ("ayk"))))) ((Nil))
sub_check_ta1 (P ("wxn") (V ("jqo"))) (("xww"::(Nil))) = list_eq (filter (aux ("xww")) (getStn (P ("wxn") (V ("jqo"))))) ((Nil))
sub_check_ta1 (V ("iwe")) (("phi"::(Nil))) = list_eq (filter (aux ("phi")) (getStn (V ("iwe")))) ((Nil))
Simplifying took 0.010522 seconds
Result : true
New Env

;;
Lemma List
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 23


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
intro lambda1(rank:9)
intro string1(rank:9)
induction lambda1(rank:19)
=================================================
Progress: 24


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> case if any_eq (string2) (string1) then false else true(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : if any_eq (string2) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:7)
=================================================
Progress: 25


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : if any_eq (string2) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = false

3 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if any_eq (string2) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string2)(rank:8)
=================================================
Progress: 26


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:8)
=================================================
Progress: 27


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if any_eq (string2) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 28


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:7)
=================================================
Progress: 29


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case if any_eq (string2) (string1) then false else true
discriminate
case string_eq (string1) (string2)
reflexivity
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
Model : string1: "qla", string2: "azd"
Model : string1: "uds", string2: "xgf"
Model : string1: "sur", string2: "xty"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("qla") ("azd") = true
string_eq ("uds") ("xgf") = true
string_eq ("sur") ("xty") = true
Simplifying took 0.002744 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 30


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true(rank : 0)


1st goal of : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7)
=================================================
Progress: 31


1st goal of : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7)


1st goal of : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:7)
=================================================
Progress: 32


1st goal of : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 7)


1st goal of : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7)
=================================================
Progress: 33


1st goal of : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7)


1st goal of : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
---------------------------------------
if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:7)
=================================================
Progress: 34


1st goal of : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
---------------------------------------
if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 7)


1st goal of : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:7)
=================================================
Progress: 35


1st goal of : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond3(rank : 7)


1st goal of : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : if string_eq (string2) (string1) then false else true = false
Cond3 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond3 in goal at 0(rank:7)
=================================================
Progress: 36


1st goal of : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : if string_eq (string2) (string1) then false else true = false
Cond3 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond3 in goal at 0(rank : 7)


1st goal of : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : if string_eq (string2) (string1) then false else true = false
Cond3 : string_eq (string1) (string2) = false
---------------------------------------
false = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 37


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
rewrite <- Case1 in goal at 0(rank:8)
rewrite <- Case1 in goal at 1(rank:8)
rewrite Case1 in goal at 0(rank:24)
rewrite Case1 in goal at 1(rank:24)
rewrite Case1 in goal at 2(rank:24)
rewrite Case1 in goal at 3(rank:24)
rewrite <- Case1 in goal at 2(rank:8)
case if string_eq (string2) (string1) then false else true(rank:9)
rewrite Cond1 in goal at 0(rank:16)
=================================================
Progress: 38


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:8)
=================================================
Progress: 39


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:8)
=================================================
Progress: 40


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 2
advanced_generalize done
Lemma : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
Model : string1: "irh", string2: "dib"
Model : string1: "ftb", string2: "gfx"
Model : string1: "kvl", string2: "yyb"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = list_eq (if if string_eq ("dib") ("irh") then false else true then ("irh"::filter (aux ("irh")) ((Nil))) else filter (aux ("irh")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("gfx") ("ftb") then false else true then ("ftb"::filter (aux ("ftb")) ((Nil))) else filter (aux ("ftb")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("yyb") ("kvl") then false else true then ("kvl"::filter (aux ("kvl")) ((Nil))) else filter (aux ("kvl")) ((Nil))) ((Nil))
Simplifying took 0.001501 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 41


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))(rank : 0)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7)
=================================================
Progress: 42


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
---------------------------------------
forall (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:7)
=================================================
Progress: 43


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
---------------------------------------
forall (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 7)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
---------------------------------------
list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7)
=================================================
Progress: 44


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
---------------------------------------
list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:7)
=================================================
Progress: 45


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 7)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
case if string_eq (string2) (string1) then false else true(rank:8)
rewrite Cond2 in goal at 0(rank:23)
rewrite Cond2 in goal at 1(rank:23)
rewrite Cond2 in goal at 2(rank:23)
rewrite Cond2 in goal at 3(rank:23)
rewrite <- Cond2 in goal at 0(rank:23)
=================================================
Progress: 46


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 47


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 13
Tactic List : 5
case if string_eq (string2) (string1) then false else true(rank:8)
rewrite Cond1 in goal at 0(rank:15)
rewrite <- Case1 in goal at 0(rank:23)
rewrite <- Case1 in goal at 1(rank:15)
rewrite <- Case1 in goal at 2(rank:23)
=================================================
Progress: 48


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> case if string_eq (string2) (string1) then false else true(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
false = false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 49


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
false = false

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:7)
=================================================
Progress: 50


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string2) (string1) then false else true
reflexivity
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
Model : string1: "blp", string2: "klj"
Model : string1: "tds", string2: "hru"
Model : string1: "ukl", string2: "xqp"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("blp") ("klj") = true
string_eq ("tds") ("hru") = true
string_eq ("ukl") ("xqp") = true
Simplifying took 0.002849 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 51


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true(rank : 0)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7)
=================================================
Progress: 52


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:7)
=================================================
Progress: 53


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 7)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7)
=================================================
Progress: 54


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
---------------------------------------
string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:7)
=================================================
Progress: 55


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
---------------------------------------
string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 7)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:7)
=================================================
Progress: 56


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond3(rank : 7)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
Cond3 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond2 in goal at 0(rank:7)
=================================================
Progress: 57


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
Cond3 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 7)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
Cond3 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 58


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 59


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro lambda1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:9)
=================================================
Progress: 60


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:11)
=================================================
Progress: 61


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = true

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9)
=================================================
Progress: 62


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9)
=================================================
Progress: 63


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:10)
=================================================
Progress: 64


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:9)
=================================================
Progress: 65


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
Lemma : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
Model : lambda1: V ("cyw"), string1: "mqe"
Model : lambda1: V ("pix"), string1: "tft"
Model : lambda1: V ("zul"), string1: "ksn"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
sub_check_ta1 (V ("cyw")) (("mqe"::(Nil))) = true
sub_check_ta1 (V ("pix")) (("tft"::(Nil))) = true
sub_check_ta1 (V ("zul")) (("ksn"::(Nil))) = true
Simplifying took 0.002993 seconds
Result : true
=================================================
Progress: 66


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 67


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:9)
=================================================
Progress: 68


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string1) (string2)
reflexivity
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
Model : string1: "zlu", string2: "gyz"
Model : string1: "mtb", string2: "mci"
Model : string1: "zxp", string2: "ojs"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("zlu") ("gyz") = true
string_eq ("mtb") ("mci") = true
string_eq ("zxp") ("ojs") = true
Simplifying took 0.003082 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 69


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true(rank : 0)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:9)
=================================================
Progress: 70


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 9)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string2(rank:9)
=================================================
Progress: 71


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 9)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9)
=================================================
Progress: 72


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9)
=================================================
Progress: 73


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 9)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Cond2 in goal at 0(rank:9)
=================================================
Progress: 74


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 9)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
false = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 75


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> induction lambda1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11)
=================================================
Progress: 76


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 77


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string2) (string1) then false else true(rank:12)
rewrite Cond1 in goal at 0(rank:19)
case string_eq (string1) (string2)(rank:12)
=================================================
Progress: 78


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string2) (string1) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : if any_eq (string2) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:11)
=================================================
Progress: 79


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : if any_eq (string2) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if any_eq (string2) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string2)(rank:12)
=================================================
Progress: 80


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12)
=================================================
Progress: 81


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if any_eq (string2) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 82


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:11)
=================================================
Progress: 83


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case if any_eq (string2) (string1) then false else true
discriminate
case string_eq (string1) (string2)
reflexivity
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
Model : string1: "uth", string2: "mxb"
Model : string1: "lll", string2: "psu"
Model : string1: "rvp", string2: "tfo"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("uth") ("mxb") = true
string_eq ("lll") ("psu") = true
string_eq ("rvp") ("tfo") = true
Simplifying took 0.003001 seconds
Result : true
=================================================
Progress: 84


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case1 in goal at 0(rank:12)
rewrite <- Case1 in goal at 1(rank:12)
rewrite Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 1(rank:28)
rewrite Case1 in goal at 2(rank:28)
rewrite Case1 in goal at 3(rank:28)
rewrite <- Case1 in goal at 2(rank:12)
case if string_eq (string2) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
=================================================
Progress: 85


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12)
=================================================
Progress: 86


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12)
=================================================
Progress: 87


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 2
advanced_generalize done
Lemma : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
Model : string1: "zpr", string2: "zkc"
Model : string1: "mei", string2: "joa"
Model : string1: "wxv", string2: "bvo"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = list_eq (if if string_eq ("zkc") ("zpr") then false else true then ("zpr"::filter (aux ("zpr")) ((Nil))) else filter (aux ("zpr")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("joa") ("mei") then false else true then ("mei"::filter (aux ("mei")) ((Nil))) else filter (aux ("mei")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("bvo") ("wxv") then false else true then ("wxv"::filter (aux ("wxv")) ((Nil))) else filter (aux ("wxv")) ((Nil))) ((Nil))
Simplifying took 0.003343 seconds
Result : true
=================================================
Progress: 88


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 89


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 7
Tactic List : 5
case if string_eq (string2) (string1) then false else true(rank:12)
rewrite Cond1 in goal at 0(rank:19)
rewrite <- Case1 in goal at 0(rank:27)
rewrite <- Case1 in goal at 1(rank:19)
rewrite <- Case1 in goal at 2(rank:27)
=================================================
Progress: 90


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string2) (string1) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
false = false

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 91


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
false = false

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:11)
=================================================
Progress: 92


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string2) (string1) then false else true
reflexivity
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
Model : string1: "mvw", string2: "ysq"
Model : string1: "yac", string2: "wys"
Model : string1: "tah", string2: "fkc"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("mvw") ("ysq") = true
string_eq ("yac") ("wys") = true
string_eq ("tah") ("fkc") = true
Simplifying took 0.003403 seconds
Result : true
=================================================
Progress: 93


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> induction lambda1(rank : 15)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7)
=================================================
Progress: 94


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string1(rank:7)
=================================================
Progress: 95


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7)
=================================================
Progress: 96


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
case if any_eq (string2) (string1) then false else true(rank:8)
rewrite Cond1 in goal at 0(rank:15)
case string_eq (string1) (string2)(rank:8)
=================================================
Progress: 97


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> case if any_eq (string2) (string1) then false else true(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : if any_eq (string2) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:7)
=================================================
Progress: 98


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : if any_eq (string2) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = false

3 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : if any_eq (string2) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string2)(rank:8)
=================================================
Progress: 99


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:8)
=================================================
Progress: 100


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : if any_eq (string2) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 101


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:7)
=================================================
Progress: 102


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case if any_eq (string2) (string1) then false else true
discriminate
case string_eq (string1) (string2)
reflexivity
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
Model : string1: "biq", string2: "cyp"
Model : string1: "fyc", string2: "ihr"
Model : string1: "olc", string2: "nys"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("biq") ("cyp") = true
string_eq ("fyc") ("ihr") = true
string_eq ("olc") ("nys") = true
Simplifying took 0.001399 seconds
Result : true
=================================================
Progress: 103


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
rewrite <- Case1 in goal at 0(rank:8)
rewrite <- Case1 in goal at 1(rank:8)
rewrite Case1 in goal at 0(rank:24)
rewrite Case1 in goal at 1(rank:24)
rewrite Case1 in goal at 2(rank:24)
rewrite Case1 in goal at 3(rank:24)
rewrite <- Case1 in goal at 2(rank:8)
case if string_eq (string2) (string1) then false else true(rank:9)
rewrite Cond1 in goal at 0(rank:16)
=================================================
Progress: 104


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:8)
=================================================
Progress: 105


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:8)
=================================================
Progress: 106


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 2
advanced_generalize done
Lemma : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
Model : string1: "sxe", string2: "zov"
Model : string1: "pya", string2: "vmb"
Model : string1: "iev", string2: "azm"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = list_eq (if if string_eq ("zov") ("sxe") then false else true then ("sxe"::filter (aux ("sxe")) ((Nil))) else filter (aux ("sxe")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("vmb") ("pya") then false else true then ("pya"::filter (aux ("pya")) ((Nil))) else filter (aux ("pya")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("azm") ("iev") then false else true then ("iev"::filter (aux ("iev")) ((Nil))) else filter (aux ("iev")) ((Nil))) ((Nil))
Simplifying took 0.002415 seconds
Result : true
=================================================
Progress: 107


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 108


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 7
Tactic List : 5
case if string_eq (string2) (string1) then false else true(rank:8)
rewrite Cond1 in goal at 0(rank:15)
rewrite <- Case1 in goal at 0(rank:23)
rewrite <- Case1 in goal at 1(rank:15)
rewrite <- Case1 in goal at 2(rank:23)
=================================================
Progress: 109


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> case if string_eq (string2) (string1) then false else true(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
false = false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 110


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
false = false

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:7)
=================================================
Progress: 111


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string2) (string1) then false else true
reflexivity
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
Model : string1: "atj", string2: "lhr"
Model : string1: "hti", string2: "noz"
Model : string1: "moz", string2: "qfq"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("atj") ("lhr") = true
string_eq ("hti") ("noz") = true
string_eq ("moz") ("qfq") = true
Simplifying took 0.001568 seconds
Result : true
=================================================
Progress: 112


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 15)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:8)
=================================================
Progress: 113


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:8)
=================================================
Progress: 114


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 115


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 15)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:7)
=================================================
Progress: 116


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite Cond1 in goal at 0
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
Model : string1: "rhs", string2: "rue"
Model : string1: "dcd", string2: "sav"
Model : string1: "kuh", string2: "rsq"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("rhs") ("rue") = true
string_eq ("dcd") ("sav") = true
string_eq ("kuh") ("rsq") = true
Simplifying took 0.002970 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 117


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true(rank : 0)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7)
=================================================
Progress: 118


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:7)
=================================================
Progress: 119


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 7)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7)
=================================================
Progress: 120


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:7)
=================================================
Progress: 121


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 7)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond2 in goal at 0(rank:7)
=================================================
Progress: 122


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 7)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
false = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 123


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 15)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case if string_eq (string2) (string1) then false else true(rank:8)
=================================================
Progress: 124


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> case if string_eq (string2) (string1) then false else true(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:16)
rewrite Cond1 in goal at 0(rank:16)
rewrite <- Case1 in goal at 0(rank:16)
=================================================
Progress: 125


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 15)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:8)
=================================================
Progress: 126


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:8)
=================================================
Progress: 127


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 128


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 15)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:7)
=================================================
Progress: 129


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite Cond1 in goal at 0
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
Model : string1: "uwy", string2: "trc"
Model : string1: "lia", string2: "vjx"
Model : string1: "zao", string2: "nvj"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("uwy") ("trc") = true
string_eq ("lia") ("vjx") = true
string_eq ("zao") ("nvj") = true
Simplifying took 0.003543 seconds
Result : true
=================================================
Progress: 130


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 15)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case if string_eq (string2) (string1) then false else true(rank:8)
=================================================
Progress: 131


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> case if string_eq (string2) (string1) then false else true(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:16)
rewrite Cond1 in goal at 0(rank:16)
rewrite <- Case1 in goal at 0(rank:16)
=================================================
Progress: 132


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 16)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
false = false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:24)
rewrite Cond1 in goal at 1(rank:24)
rewrite Cond1 in goal at 2(rank:24)
=================================================
Progress: 133


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 16)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string2) (string1) then false else true
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true
Model : string1: "ide", string2: "kns"
Model : string1: "lwl", string2: "bms"
Model : string1: "kzx", string2: "uoo"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("ide") ("kns") = true
string_eq ("lwl") ("bms") = true
string_eq ("kzx") ("uoo") = true
Simplifying took 0.002023 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 134


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true(rank : 0)


1st goal of : forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
discriminate(rank:8)
=================================================
Progress: 135


1st goal of : forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> discriminate(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
discriminate(rank:7)
=================================================
Progress: 136


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 4
Tactic List : 2
rewrite Case1 in goal at 0(rank:15)
rewrite lemma3 in goal at 0(rank:18)
=================================================
Progress: 137


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 15)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string2) (string1) then false else true
rewrite Cond1 in goal at 0
assert forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true
discriminate
discriminate
rewrite Case1 in goal at 0
advanced_generalize done
=================================================
Progress: 138


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 16)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
false = false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:24)
rewrite Cond1 in goal at 1(rank:24)
rewrite Cond1 in goal at 2(rank:24)
=================================================
Progress: 139


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 16)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string2) (string1) then false else true
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true
Model : string1: "bzs", string2: "dhr"
Model : string1: "bdu", string2: "pui"
Model : string1: "cva", string2: "ivq"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("bzs") ("dhr") = true
string_eq ("bdu") ("pui") = true
string_eq ("cva") ("ivq") = true
Simplifying took 0.001002 seconds
Result : true
=================================================
Progress: 140


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 16)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = string_eq (string1) (string2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 141


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 17)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 142


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = true

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:9)
=================================================
Progress: 143


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9)
=================================================
Progress: 144


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:10)
=================================================
Progress: 145


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 146


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:9)
=================================================
Progress: 147


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string1) (string2)
reflexivity
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
Model : string1: "hxm", string2: "hnj"
Model : string1: "rtk", string2: "jcf"
Model : string1: "jqf", string2: "ote"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("hxm") ("hnj") = true
string_eq ("rtk") ("jcf") = true
string_eq ("jqf") ("ote") = true
Simplifying took 0.003213 seconds
Result : true
=================================================
Progress: 148


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 18)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
true = true

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 149


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
true = true

5 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

4 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:9)
=================================================
Progress: 150


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:12)
=================================================
Progress: 151


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
true = true

7 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 152


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
true = true

7 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

6 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:11)
=================================================
Progress: 153


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

6 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

6 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:14)
=================================================
Progress: 154


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

6 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
true = true

9 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13)
=================================================
Progress: 155


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
true = true

9 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

8 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:13)
=================================================
Progress: 156


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

8 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

8 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:16)
=================================================
Progress: 157


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

8 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 16)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
true = true

11 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:15)
=================================================
Progress: 158


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
true = true

11 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 15)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

10 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:15)
=================================================
Progress: 159


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

10 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 15)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

10 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:18)
=================================================
Progress: 160


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

10 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 18)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
true = true

13 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:17)
=================================================
Progress: 161


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
true = true

13 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 17)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

12 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:17)
=================================================
Progress: 162


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

12 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 17)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

12 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:20)
=================================================
Progress: 163


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> induction lambda1(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11)
=================================================
Progress: 164


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 165


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 166


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string2) (string1) then false else true(rank:12)
rewrite Cond1 in goal at 0(rank:19)
case string_eq (string1) (string2)(rank:12)
=================================================
Progress: 167


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string2) (string1) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : if any_eq (string2) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:11)
=================================================
Progress: 168


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : if any_eq (string2) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : if any_eq (string2) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string2)(rank:12)
=================================================
Progress: 169


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12)
=================================================
Progress: 170


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : if any_eq (string2) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 171


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:11)
=================================================
Progress: 172


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case if any_eq (string2) (string1) then false else true
discriminate
case string_eq (string1) (string2)
reflexivity
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
Model : string1: "vap", string2: "vxh"
Model : string1: "tnp", string2: "cdn"
Model : string1: "epu", string2: "ejz"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("vap") ("vxh") = true
string_eq ("tnp") ("cdn") = true
string_eq ("epu") ("ejz") = true
Simplifying took 0.003237 seconds
Result : true
=================================================
Progress: 173


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case1 in goal at 0(rank:12)
rewrite <- Case1 in goal at 1(rank:12)
rewrite Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 1(rank:28)
rewrite Case1 in goal at 2(rank:28)
rewrite Case1 in goal at 3(rank:28)
rewrite <- Case1 in goal at 2(rank:12)
case if string_eq (string2) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
=================================================
Progress: 174


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12)
=================================================
Progress: 175


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12)
=================================================
Progress: 176


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 2
advanced_generalize done
Lemma : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
Model : string1: "fxl", string2: "dal"
Model : string1: "mux", string2: "gfj"
Model : string1: "yli", string2: "xpd"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = list_eq (if if string_eq ("dal") ("fxl") then false else true then ("fxl"::filter (aux ("fxl")) ((Nil))) else filter (aux ("fxl")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("gfj") ("mux") then false else true then ("mux"::filter (aux ("mux")) ((Nil))) else filter (aux ("mux")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("xpd") ("yli") then false else true then ("yli"::filter (aux ("yli")) ((Nil))) else filter (aux ("yli")) ((Nil))) ((Nil))
Simplifying took 0.002635 seconds
Result : true
=================================================
Progress: 177


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 178


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 7
Tactic List : 5
case if string_eq (string2) (string1) then false else true(rank:12)
rewrite Cond1 in goal at 0(rank:19)
rewrite <- Case1 in goal at 0(rank:27)
rewrite <- Case1 in goal at 1(rank:19)
rewrite <- Case1 in goal at 2(rank:27)
=================================================
Progress: 179


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string2) (string1) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
false = false

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 180


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
false = false

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:11)
=================================================
Progress: 181


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string2) (string1) then false else true
reflexivity
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
Model : string1: "ior", string2: "czb"
Model : string1: "rea", string2: "asp"
Model : string1: "yqo", string2: "ceo"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("ior") ("czb") = true
string_eq ("rea") ("asp") = true
string_eq ("yqo") ("ceo") = true
Simplifying took 0.000990 seconds
Result : true
=================================================
Progress: 182


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:12)
=================================================
Progress: 183


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12)
=================================================
Progress: 184


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 185


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:11)
=================================================
Progress: 186


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite Cond1 in goal at 0
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
Model : string1: "dwc", string2: "tye"
Model : string1: "igs", string2: "qxu"
Model : string1: "rib", string2: "don"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("dwc") ("tye") = true
string_eq ("igs") ("qxu") = true
string_eq ("rib") ("don") = true
Simplifying took 0.001654 seconds
Result : true
=================================================
Progress: 187


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string2) (string1) then false else true(rank:12)
=================================================
Progress: 188


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string2) (string1) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:20)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:20)
=================================================
Progress: 189


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:12)
=================================================
Progress: 190


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12)
=================================================
Progress: 191


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 192


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:11)
=================================================
Progress: 193


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite Cond1 in goal at 0
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
Model : string1: "qaf", string2: "aih"
Model : string1: "sui", string2: "fcy"
Model : string1: "cxt", string2: "hwn"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("qaf") ("aih") = true
string_eq ("sui") ("fcy") = true
string_eq ("cxt") ("hwn") = true
Simplifying took 0.001244 seconds
Result : true
=================================================
Progress: 194


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string2) (string1) then false else true(rank:12)
=================================================
Progress: 195


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string2) (string1) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:20)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:20)
=================================================
Progress: 196


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

12 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
true = true

15 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:19)
=================================================
Progress: 197


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
true = true

15 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

14 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:19)
=================================================
Progress: 198


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

14 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

14 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:22)
=================================================
Progress: 199


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
false = false

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:28)
rewrite Cond1 in goal at 1(rank:28)
rewrite Cond1 in goal at 2(rank:28)
=================================================
Progress: 200


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string2) (string1) then false else true
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true
Model : string1: "uea", string2: "sxe"
Model : string1: "vwb", string2: "orb"
Model : string1: "toi", string2: "tnx"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("uea") ("sxe") = true
string_eq ("vwb") ("orb") = true
string_eq ("toi") ("tnx") = true
Simplifying took 0.004287 seconds
Result : true
=================================================
Progress: 201


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = string_eq (string1) (string2)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 202


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
false = false

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:28)
rewrite Cond1 in goal at 1(rank:28)
rewrite Cond1 in goal at 2(rank:28)
=================================================
Progress: 203


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string2) (string1) then false else true
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true
Model : string1: "xjt", string2: "mfr"
Model : string1: "gil", string2: "zju"
Model : string1: "edk", string2: "beb"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("xjt") ("mfr") = true
string_eq ("gil") ("zju") = true
string_eq ("edk") ("beb") = true
Simplifying took 0.001790 seconds
Result : true
=================================================
Progress: 204


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = string_eq (string1) (string2)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 205


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

14 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 22)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
true = true

17 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:21)
=================================================
Progress: 206


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
true = true

17 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

16 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:21)
=================================================
Progress: 207


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

16 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

16 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:24)
=================================================
Progress: 208


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 23)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then string_eq (string1) (string2) else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case if string_eq (string2) (string1) then string_eq (string1) (string2) else true(rank:8)
=================================================
Progress: 209


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then string_eq (string1) (string2) else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> case if string_eq (string2) (string1) then string_eq (string1) (string2) else true(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Case1 in goal at 0(rank:16)
rewrite <- Case1 in goal at 0(rank:16)
=================================================
Progress: 210


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 16)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
false = false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 211


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
false = false

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 1
Tactic List : 1
rewrite Case1 in goal at 0(rank:7)
=================================================
Progress: 212


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:7)
=================================================
Progress: 213


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string1)(rank:8)
=================================================
Progress: 214


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string_eq (string2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:8)
=================================================
Progress: 215


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string_eq (string2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite <- Case3 in goal at 0(rank:8)
rewrite Case1 in goal at 0(rank:16)
rewrite Case3 in goal at 0(rank:24)
=================================================
Progress: 216


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:8)
=================================================
Progress: 217


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 218


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : true = false
Case3 : string_eq (string2) (string1) = false
---------------------------------------
true = true

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 2
Tactic List : 1
reflexivity(rank:6)
=================================================
Progress: 219


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : true = false
Case3 : string_eq (string2) (string1) = false
---------------------------------------
true = true

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 6)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil)) = true -> sub_check_ta1 (P (string2) (lambda2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 2
Tactic List : 1
simpl in goal(rank:6)
=================================================
Progress: 220


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil)) = true -> sub_check_ta1 (P (string2) (lambda2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:6)
=================================================
Progress: 221


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 6)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:6)
=================================================
Progress: 222


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 6)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = true

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (lambda2:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = true
Model : lambda2: P ("psj") (V ("eci")), string1: "skn", string2: "eoz"
Model : lambda2: V ("vxt"), string1: "cwn", string2: "dnw"
Model : lambda2: C (V ("wbw")) (V ("ieu")), string1: "lvo", string2: "rbj"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
sub_check_ta1 (P ("psj") (V ("eci"))) (("eoz"::("skn"::(Nil)))) = true
sub_check_ta1 (V ("vxt")) (("dnw"::("cwn"::(Nil)))) = true
sub_check_ta1 (C (V ("wbw")) (V ("ieu"))) (("rbj"::("lvo"::(Nil)))) = true
Simplifying took 0.007703 seconds
Result : true
New Env

;;
Lemma List
forall (lambda2:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = true
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = true

1 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 223


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = true

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (lambda2:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = true(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
intro lambda1(rank:7)
intro string1(rank:7)
intro string2(rank:7)
induction lambda1(rank:17)
=================================================
Progress: 224


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro lambda1(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7)
=================================================
Progress: 225


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro string2(rank:7)
induction lambda1(rank:17)
=================================================
Progress: 226


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:9)
=================================================
Progress: 227


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:7)
=================================================
Progress: 228


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:9)
=================================================
Progress: 229


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7)
=================================================
Progress: 230


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- Cond1 in goal at 0(rank:7)
=================================================
Progress: 231


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
advanced_generalize done
Lemma : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
Model : lambda1: C (V ("iml")) (V ("dys")), string1: "csp", string2: "agr"
Model : lambda1: P ("icb") (V ("sfc")), string1: "oqe", string2: "nlx"
Model : lambda1: V ("ueu"), string1: "vwe", string2: "swc"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
sub_check_ta1 (C (V ("iml")) (V ("dys"))) (("agr"::("csp"::(Nil)))) = list_eq (filter (aux ("csp")) (filter (aux ("agr")) (getStn (C (V ("iml")) (V ("dys")))))) ((Nil))
sub_check_ta1 (P ("icb") (V ("sfc"))) (("nlx"::("oqe"::(Nil)))) = list_eq (filter (aux ("oqe")) (filter (aux ("nlx")) (getStn (P ("icb") (V ("sfc")))))) ((Nil))
sub_check_ta1 (V ("ueu")) (("swc"::("vwe"::(Nil)))) = list_eq (filter (aux ("vwe")) (filter (aux ("swc")) (getStn (V ("ueu"))))) ((Nil))
Simplifying took 0.009525 seconds
Result : true
New Env

;;
Lemma List
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 232


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
intro lambda1(rank:9)
intro string1(rank:9)
intro string2(rank:9)
induction lambda1(rank:19)
=================================================
Progress: 233


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 234


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 235


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro lambda1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:9)
=================================================
Progress: 236


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro string2(rank:9)
induction lambda1(rank:19)
=================================================
Progress: 237


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:11)
=================================================
Progress: 238


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:9)
=================================================
Progress: 239


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9)
=================================================
Progress: 240


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string2(rank:9)
=================================================
Progress: 241


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:11)
=================================================
Progress: 242


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9)
=================================================
Progress: 243


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:10)
=================================================
Progress: 244


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9)
=================================================
Progress: 245


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:10)
=================================================
Progress: 246


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:9)
=================================================
Progress: 247


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
Lemma : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
Model : lambda1: C (P ("eov") (V ("nfu"))) (V ("anr")), string1: "mzv", string2: "nde"
Model : lambda1: V ("yml"), string1: "aql", string2: "ajy"
Model : lambda1: V ("rzy"), string1: "vgk", string2: "lcw"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
sub_check_ta1 (C (P ("eov") (V ("nfu"))) (V ("anr"))) (("nde"::("mzv"::(Nil)))) = true
sub_check_ta1 (V ("yml")) (("ajy"::("aql"::(Nil)))) = true
sub_check_ta1 (V ("rzy")) (("lcw"::("vgk"::(Nil)))) = true
Simplifying took 0.006570 seconds
Result : true
New Env

;;
Lemma List
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 248


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 4
intro lambda1(rank:11)
intro string1(rank:11)
intro string2(rank:11)
induction lambda1(rank:21)
=================================================
Progress: 249


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 250


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:10)
=================================================
Progress: 251


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 252


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:10)
=================================================
Progress: 253


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 254


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:25)
rewrite <- Case2 in goal at 0(rank:25)
=================================================
Progress: 255


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 256


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:25)
rewrite <- Case2 in goal at 0(rank:25)
=================================================
Progress: 257


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> induction lambda1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11)
=================================================
Progress: 258


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> induction lambda1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11)
=================================================
Progress: 259


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro lambda1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 260


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
intro string2(rank:11)
induction lambda1(rank:21)
=================================================
Progress: 261


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:13)
=================================================
Progress: 262


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 263


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 264


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 265


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:13)
=================================================
Progress: 266


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 267


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string3) (string2) then false else true(rank:12)
rewrite Cond1 in goal at 0(rank:19)
case string_eq (string2) (string3)(rank:12)
=================================================
Progress: 268


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 269


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string3) (string2) then false else true(rank:12)
rewrite Cond1 in goal at 0(rank:19)
case string_eq (string2) (string3)(rank:12)
=================================================
Progress: 270


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite <- Cond1 in goal at 0(rank:11)
=================================================
Progress: 271


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
advanced_generalize done
Lemma : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
Model : lambda1: V ("mwh"), string1: "zem", string2: "jeo"
Model : lambda1: V ("vod"), string1: "cyr", string2: "uxy"
Model : lambda1: V ("hrj"), string1: "myt", string2: "fmt"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
sub_check_ta1 (V ("mwh")) (("jeo"::("zem"::(Nil)))) = list_eq (filter (aux ("zem")) (filter (aux ("jeo")) (getStn (V ("mwh"))))) ((Nil))
sub_check_ta1 (V ("vod")) (("uxy"::("cyr"::(Nil)))) = list_eq (filter (aux ("cyr")) (filter (aux ("uxy")) (getStn (V ("vod"))))) ((Nil))
sub_check_ta1 (V ("hrj")) (("fmt"::("myt"::(Nil)))) = list_eq (filter (aux ("myt")) (filter (aux ("fmt")) (getStn (V ("hrj"))))) ((Nil))
Simplifying took 0.008164 seconds
Result : true
=================================================
Progress: 272


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
case string_eq (string2) (string3)(rank:13)
=================================================
Progress: 273


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12)
=================================================
Progress: 274


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
case string_eq (string2) (string3)(rank:13)
=================================================
Progress: 275


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12)
=================================================
Progress: 276


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case1 in goal at 0(rank:12)
rewrite <- Case1 in goal at 1(rank:12)
rewrite Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 1(rank:28)
rewrite Case1 in goal at 2(rank:28)
rewrite Case1 in goal at 3(rank:28)
rewrite <- Case1 in goal at 2(rank:12)
case if string_eq (string3) (string2) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
=================================================
Progress: 277


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case1 in goal at 0(rank:12)
rewrite <- Case1 in goal at 1(rank:12)
rewrite Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 1(rank:28)
rewrite Case1 in goal at 2(rank:28)
rewrite Case1 in goal at 3(rank:28)
rewrite <- Case1 in goal at 2(rank:12)
case if string_eq (string3) (string2) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
=================================================
Progress: 278


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12)
=================================================
Progress: 279


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12)
=================================================
Progress: 280


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then false else true(rank:13)
=================================================
Progress: 281


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12)
=================================================
Progress: 282


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12)
=================================================
Progress: 283


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then false else true(rank:13)
=================================================
Progress: 284


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 285


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 8
Tactic List : 4
case if string_eq (string3) (string2) then false else true(rank:12)
case string_eq (string1) (string3)(rank:12)
rewrite Cond1 in goal at 0(rank:19)
rewrite <- Case1 in goal at 0(rank:27)
=================================================
Progress: 286


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 287


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 8
Tactic List : 4
case if string_eq (string3) (string2) then false else true(rank:12)
case string_eq (string1) (string3)(rank:12)
rewrite Cond1 in goal at 0(rank:19)
rewrite <- Case1 in goal at 0(rank:27)
=================================================
Progress: 288


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
case if any_eq (string3) (string1) then false else true(rank:13)
case string_eq (string1) (string3)(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 289


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12)
=================================================
Progress: 290


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
case if any_eq (string3) (string1) then false else true(rank:13)
case string_eq (string1) (string3)(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 291


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12)
=================================================
Progress: 292


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
rewrite <- Case2 in goal at 0(rank:12)
rewrite <- Case2 in goal at 1(rank:12)
rewrite <- Case2 in goal at 2(rank:12)
case if string_eq (string3) (string2) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite Case2 in goal at 0(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 293


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
rewrite <- Case2 in goal at 0(rank:12)
rewrite <- Case2 in goal at 1(rank:12)
rewrite <- Case2 in goal at 2(rank:12)
case if string_eq (string3) (string2) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite Case2 in goal at 0(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 294


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 295


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 296


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 297


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 298


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 299


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 300


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
>>> induction lambda1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13)
=================================================
Progress: 301


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
>>> induction lambda1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13)
=================================================
Progress: 302


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 303


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string2) (string3)(rank:13)
=================================================
Progress: 304


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:13)
=================================================
Progress: 305


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 306


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string2) (string3)(rank:13)
=================================================
Progress: 307


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:13)
=================================================
Progress: 308


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 309


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 310


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 311


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 312


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 313


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 314


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite <- Case2 in goal at 0(rank:13)
rewrite Cond1 in goal at 0(rank:21)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:13)
rewrite <- Case2 in goal at 2(rank:13)
case if any_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 315


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite <- Case2 in goal at 0(rank:13)
rewrite Cond1 in goal at 0(rank:21)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:13)
rewrite <- Case2 in goal at 2(rank:13)
case if any_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 316


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 317


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite <- Case2 in goal at 0(rank:13)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
case if any_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 318


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 2(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 319


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 320


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite <- Case2 in goal at 0(rank:13)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
case if any_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 321


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 2(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 322


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:13)
=================================================
Progress: 323


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:13)
=================================================
Progress: 324


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 325


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 326


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
rewrite <- Case2 in goal at 0(rank:13)
rewrite <- Case2 in goal at 1(rank:13)
rewrite <- Case2 in goal at 2(rank:13)
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite Cond1 in goal at 0(rank:21)
=================================================
Progress: 327


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 328


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 329


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
rewrite <- Case2 in goal at 0(rank:13)
rewrite <- Case2 in goal at 1(rank:13)
rewrite <- Case2 in goal at 2(rank:13)
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite Cond1 in goal at 0(rank:21)
=================================================
Progress: 330


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 331


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case4 in goal at 0(rank:28)
=================================================
Progress: 332


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite <- Case3 in goal at 0(rank:13)
rewrite Cond1 in goal at 0(rank:21)
rewrite Case3 in goal at 0(rank:29)
rewrite Case3 in goal at 1(rank:29)
rewrite Case3 in goal at 2(rank:29)
rewrite Case3 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:13)
rewrite <- Case3 in goal at 2(rank:13)
case if string_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 333


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 334


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case4 in goal at 0(rank:28)
=================================================
Progress: 335


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite <- Case3 in goal at 0(rank:13)
rewrite Cond1 in goal at 0(rank:21)
rewrite Case3 in goal at 0(rank:29)
rewrite Case3 in goal at 1(rank:29)
rewrite Case3 in goal at 2(rank:29)
rewrite Case3 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:13)
rewrite <- Case3 in goal at 2(rank:13)
case if string_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 336


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 337


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 338


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 339


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 340


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 341


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 342


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 343


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 344


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:13)
=================================================
Progress: 345


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:14)
=================================================
Progress: 346


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 347


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
Case4 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case3 in goal at 0(rank:28)
rewrite <- Case4 in goal at 0(rank:28)
=================================================
Progress: 348


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string2) (string1) then false else true(rank:14)
=================================================
Progress: 349


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 1
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
Model : string1: "gys", string2: "tcb", string3: "kig"
Model : string1: "oxx", string2: "ihe", string3: "jsz"
Model : string1: "otc", string2: "ktc", string3: "una"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = list_eq (if if string_eq ("tcb") ("gys") then false else true then ("kig"::filter (aux ("gys")) ((Nil))) else filter (aux ("gys")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("ihe") ("oxx") then false else true then ("jsz"::filter (aux ("oxx")) ((Nil))) else filter (aux ("oxx")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("ktc") ("otc") then false else true then ("una"::filter (aux ("otc")) ((Nil))) else filter (aux ("otc")) ((Nil))) ((Nil))
Simplifying took 0.003124 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 350


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 351


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 352


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string3(rank:11)
=================================================
Progress: 353


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
>>> intro string3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 354


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11)
=================================================
Progress: 355


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:11)
=================================================
Progress: 356


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : if string_eq (string3) (string2) then false else true = true
Cond3 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
case if string_eq (string2) (string1) then false else true(rank:12)
rewrite Cond3 in goal at 0(rank:27)
rewrite <- Cond3 in goal at 0(rank:27)
=================================================
Progress: 357


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : if string_eq (string3) (string2) then false else true = true
Cond3 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
>>> case if string_eq (string2) (string1) then false else true(rank : 12)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : if string_eq (string3) (string2) then false else true = true
Cond3 : string2 = string3
Case1 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
true = false

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 358


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 2
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
Model : string1: "knw", string2: "mzu", string3: "kjs"
Model : string1: "qll", string2: "daa", string3: "axh"
Model : string1: "tlh", string2: "ozx", string3: "skg"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = list_eq (if if string_eq ("kjs") ("knw") then false else true then ("mzu"::filter (aux ("knw")) ((Nil))) else filter (aux ("knw")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("axh") ("qll") then false else true then ("daa"::filter (aux ("qll")) ((Nil))) else filter (aux ("qll")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("skg") ("tlh") then false else true then ("ozx"::filter (aux ("tlh")) ((Nil))) else filter (aux ("tlh")) ((Nil))) ((Nil))
Simplifying took 0.003318 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 359


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 360


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 361


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string3(rank:11)
=================================================
Progress: 362


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
>>> intro string3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 363


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11)
=================================================
Progress: 364


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:11)
=================================================
Progress: 365


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : if string_eq (string3) (string2) then false else true = true
Cond3 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
case if string_eq (string3) (string1) then false else true(rank:12)
rewrite Cond3 in goal at 0(rank:27)
rewrite <- Cond3 in goal at 0(rank:27)
=================================================
Progress: 366


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : if string_eq (string3) (string2) then false else true = true
Cond3 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 12)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : false = true
Cond2 : if string_eq (string3) (string2) then false else true = true
Cond3 : string2 = string3
Case1 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
true = false

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
discriminate(rank:11)
=================================================
Progress: 367


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : false = true
Cond2 : if string_eq (string3) (string2) then false else true = true
Cond3 : string2 = string3
Case1 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
true = false

1 goal(s) more...

4 conjecture(s) more...
>>> discriminate(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : true = true
Cond2 : if string_eq (string3) (string2) then false else true = true
Cond3 : string2 = string3
Case1 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

0 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
reflexivity(rank:13)
=================================================
Progress: 368


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 369


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
Case4 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case3 in goal at 0(rank:28)
rewrite <- Case4 in goal at 0(rank:28)
=================================================
Progress: 370


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string2) (string1) then false else true(rank:14)
=================================================
Progress: 371


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 1
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
Model : string1: "qta", string2: "cax", string3: "ikr"
Model : string1: "bqd", string2: "fhq", string3: "yzj"
Model : string1: "xqz", string2: "mol", string3: "kun"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = list_eq (if if string_eq ("cax") ("qta") then false else true then ("ikr"::filter (aux ("qta")) ((Nil))) else filter (aux ("qta")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("fhq") ("bqd") then false else true then ("yzj"::filter (aux ("bqd")) ((Nil))) else filter (aux ("bqd")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("mol") ("xqz") then false else true then ("kun"::filter (aux ("xqz")) ((Nil))) else filter (aux ("xqz")) ((Nil))) ((Nil))
Simplifying took 0.002374 seconds
Result : true
=================================================
Progress: 372


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 2
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
Model : string1: "ewg", string2: "iqp", string3: "qnn"
Model : string1: "fuy", string2: "tir", string3: "ttq"
Model : string1: "hnp", string2: "ekq", string3: "xgt"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = list_eq (if if string_eq ("qnn") ("ewg") then false else true then ("iqp"::filter (aux ("ewg")) ((Nil))) else filter (aux ("ewg")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("ttq") ("fuy") then false else true then ("tir"::filter (aux ("fuy")) ((Nil))) else filter (aux ("fuy")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("xgt") ("hnp") then false else true then ("ekq"::filter (aux ("hnp")) ((Nil))) else filter (aux ("hnp")) ((Nil))) ((Nil))
Simplifying took 0.002813 seconds
Result : true
=================================================
Progress: 373


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 374


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 375


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:13)
=================================================
Progress: 376


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 377


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 378


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:13)
=================================================
Progress: 379


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 380


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 13
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 381


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 18
Tactic List : 8
case if string_eq (string3) (string2) then false else true(rank:12)
rewrite Cond1 in goal at 0(rank:19)
rewrite <- Case1 in goal at 1(rank:19)
rewrite <- Case1 in goal at 2(rank:27)
rewrite <- Case2 in goal at 1(rank:19)
rewrite <- Case2 in goal at 0(rank:27)
rewrite <- Case1 in goal at 0(rank:27)
rewrite <- Case2 in goal at 2(rank:27)
=================================================
Progress: 382


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 8
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 1(rank:20)
rewrite <- Case1 in goal at 2(rank:28)
rewrite <- Case2 in goal at 1(rank:20)
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 2(rank:28)
=================================================
Progress: 383


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 384


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 13
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 385


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 18
Tactic List : 8
case if string_eq (string3) (string2) then false else true(rank:12)
rewrite Cond1 in goal at 0(rank:19)
rewrite <- Case1 in goal at 1(rank:19)
rewrite <- Case1 in goal at 2(rank:27)
rewrite <- Case2 in goal at 1(rank:19)
rewrite <- Case2 in goal at 0(rank:27)
rewrite <- Case1 in goal at 0(rank:27)
rewrite <- Case2 in goal at 2(rank:27)
=================================================
Progress: 386


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 8
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 1(rank:20)
rewrite <- Case1 in goal at 2(rank:28)
rewrite <- Case2 in goal at 1(rank:20)
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 2(rank:28)
=================================================
Progress: 387


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:14)
=================================================
Progress: 388


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : true = true
Cond2 : if string_eq (string3) (string2) then false else true = true
Cond3 : string2 = string3
Case1 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

0 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 1
case if string_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 389


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 390


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 9
Tactic List : 8
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 1(rank:20)
rewrite <- Case1 in goal at 2(rank:28)
rewrite <- Case3 in goal at 1(rank:20)
rewrite <- Case3 in goal at 0(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case3 in goal at 2(rank:28)
=================================================
Progress: 391


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 392


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 9
Tactic List : 8
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 1(rank:20)
rewrite <- Case1 in goal at 2(rank:28)
rewrite <- Case3 in goal at 1(rank:20)
rewrite <- Case3 in goal at 0(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case3 in goal at 2(rank:28)
=================================================
Progress: 393


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 394


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 395


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 396


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 397


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 398


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 399


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 400


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 401


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:13)
=================================================
Progress: 402


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 403


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 5
Tactic List : 4
case if string_eq (string3) (string1) then false else true(rank:13)
case string_eq (string1) (string3)(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 404


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 405


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 406


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 407


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 408


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case4 in goal at 0(rank:28)
=================================================
Progress: 409


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite <- Case3 in goal at 0(rank:13)
rewrite Cond1 in goal at 0(rank:21)
rewrite Case3 in goal at 0(rank:29)
rewrite Case3 in goal at 1(rank:29)
rewrite Case3 in goal at 2(rank:29)
rewrite Case3 in goal at 3(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:13)
rewrite <- Case3 in goal at 2(rank:13)
case if string_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 410


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 411


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 412


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:13)
=================================================
Progress: 413


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 414


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 9
Tactic List : 8
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case2 in goal at 1(rank:20)
rewrite <- Case2 in goal at 2(rank:28)
rewrite <- Case3 in goal at 1(rank:20)
rewrite <- Case3 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case3 in goal at 2(rank:28)
=================================================
Progress: 415


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 416


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 417


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:13)
=================================================
Progress: 418


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 419


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 4
case if string_eq (string3) (string1) then false else true(rank:13)
case string_eq (string1) (string3)(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 420


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 421


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 422


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 423


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 424


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case4 in goal at 0(rank:28)
=================================================
Progress: 425


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite <- Case3 in goal at 0(rank:13)
rewrite Cond1 in goal at 0(rank:21)
rewrite Case3 in goal at 0(rank:29)
rewrite Case3 in goal at 1(rank:29)
rewrite Case3 in goal at 2(rank:29)
rewrite Case3 in goal at 3(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:13)
rewrite <- Case3 in goal at 2(rank:13)
case if string_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 426


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 427


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 428


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:13)
=================================================
Progress: 429


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 430


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 9
Tactic List : 8
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case2 in goal at 1(rank:20)
rewrite <- Case2 in goal at 2(rank:28)
rewrite <- Case3 in goal at 1(rank:20)
rewrite <- Case3 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case3 in goal at 2(rank:28)
=================================================
Progress: 431


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 432


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 433


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13)
=================================================
Progress: 434


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:14)
=================================================
Progress: 435


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13)
=================================================
Progress: 436


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:14)
=================================================
Progress: 437


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13)
=================================================
Progress: 438


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
=================================================
Progress: 439


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13)
=================================================
Progress: 440


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
=================================================
Progress: 441


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 17)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 442


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:9)
=================================================
Progress: 443


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:9)
=================================================
Progress: 444


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9)
=================================================
Progress: 445


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:10)
=================================================
Progress: 446


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 447


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:10)
=================================================
Progress: 448


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 449


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:25)
rewrite <- Case2 in goal at 0(rank:25)
=================================================
Progress: 450


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 17)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 451


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:9)
=================================================
Progress: 452


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9)
=================================================
Progress: 453


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:10)
=================================================
Progress: 454


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 455


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:10)
=================================================
Progress: 456


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 457


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:25)
rewrite <- Case2 in goal at 0(rank:25)
=================================================
Progress: 458


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> induction lambda1(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11)
=================================================
Progress: 459


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 460


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 461


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 462


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string3) (string2) then false else true(rank:12)
rewrite Cond1 in goal at 0(rank:19)
case string_eq (string2) (string3)(rank:12)
=================================================
Progress: 463


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
case string_eq (string2) (string3)(rank:13)
=================================================
Progress: 464


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12)
=================================================
Progress: 465


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case1 in goal at 0(rank:12)
rewrite <- Case1 in goal at 1(rank:12)
rewrite Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 1(rank:28)
rewrite Case1 in goal at 2(rank:28)
rewrite Case1 in goal at 3(rank:28)
rewrite <- Case1 in goal at 2(rank:12)
case if string_eq (string3) (string2) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
=================================================
Progress: 466


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12)
=================================================
Progress: 467


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12)
=================================================
Progress: 468


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then false else true(rank:13)
=================================================
Progress: 469


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 470


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 8
Tactic List : 4
case if string_eq (string3) (string2) then false else true(rank:12)
case string_eq (string1) (string3)(rank:12)
rewrite Cond1 in goal at 0(rank:19)
rewrite <- Case1 in goal at 0(rank:27)
=================================================
Progress: 471


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
case if any_eq (string3) (string1) then false else true(rank:13)
case string_eq (string1) (string3)(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 472


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12)
=================================================
Progress: 473


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
rewrite <- Case2 in goal at 0(rank:12)
rewrite <- Case2 in goal at 1(rank:12)
rewrite <- Case2 in goal at 2(rank:12)
case if string_eq (string3) (string2) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite Case2 in goal at 0(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 474


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 475


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 476


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 477


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 478


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string2) (string3)(rank:13)
=================================================
Progress: 479


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:13)
=================================================
Progress: 480


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 481


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 482


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 483


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite <- Case2 in goal at 0(rank:13)
rewrite Cond1 in goal at 0(rank:21)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:13)
rewrite <- Case2 in goal at 2(rank:13)
case if any_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 484


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 485


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite <- Case2 in goal at 0(rank:13)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
case if any_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 486


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 2(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 487


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 488


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 489


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
rewrite <- Case2 in goal at 0(rank:13)
rewrite <- Case2 in goal at 1(rank:13)
rewrite <- Case2 in goal at 2(rank:13)
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite Cond1 in goal at 0(rank:21)
=================================================
Progress: 490


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 491


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case4 in goal at 0(rank:28)
=================================================
Progress: 492


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite <- Case3 in goal at 0(rank:13)
rewrite Cond1 in goal at 0(rank:21)
rewrite Case3 in goal at 0(rank:29)
rewrite Case3 in goal at 1(rank:29)
rewrite Case3 in goal at 2(rank:29)
rewrite Case3 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:13)
rewrite <- Case3 in goal at 2(rank:13)
case if string_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 493


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 494


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 495


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 496


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 497


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 498


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
Case4 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case3 in goal at 0(rank:28)
rewrite <- Case4 in goal at 0(rank:28)
=================================================
Progress: 499


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string2) (string1) then false else true(rank:14)
=================================================
Progress: 500


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 1
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
Model : string1: "lex", string2: "xln", string3: "utr"
Model : string1: "jhb", string2: "csm", string3: "juc"
Model : string1: "rcg", string2: "wsb", string3: "tgq"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = list_eq (if if string_eq ("xln") ("lex") then false else true then ("utr"::filter (aux ("lex")) ((Nil))) else filter (aux ("lex")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("csm") ("jhb") then false else true then ("juc"::filter (aux ("jhb")) ((Nil))) else filter (aux ("jhb")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("wsb") ("rcg") then false else true then ("tgq"::filter (aux ("rcg")) ((Nil))) else filter (aux ("rcg")) ((Nil))) ((Nil))
Simplifying took 0.003798 seconds
Result : true
=================================================
Progress: 501


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 2
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
Model : string1: "jfw", string2: "zza", string3: "gof"
Model : string1: "twn", string2: "eez", string3: "yyf"
Model : string1: "hcq", string2: "qad", string3: "pvn"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = list_eq (if if string_eq ("gof") ("jfw") then false else true then ("zza"::filter (aux ("jfw")) ((Nil))) else filter (aux ("jfw")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("yyf") ("twn") then false else true then ("eez"::filter (aux ("twn")) ((Nil))) else filter (aux ("twn")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("pvn") ("hcq") then false else true then ("qad"::filter (aux ("hcq")) ((Nil))) else filter (aux ("hcq")) ((Nil))) ((Nil))
Simplifying took 0.003866 seconds
Result : true
=================================================
Progress: 502


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 503


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 504


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:13)
=================================================
Progress: 505


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 506


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 13
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 507


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 18
Tactic List : 8
case if string_eq (string3) (string2) then false else true(rank:12)
rewrite Cond1 in goal at 0(rank:19)
rewrite <- Case1 in goal at 1(rank:19)
rewrite <- Case1 in goal at 2(rank:27)
rewrite <- Case2 in goal at 1(rank:19)
rewrite <- Case2 in goal at 0(rank:27)
rewrite <- Case1 in goal at 0(rank:27)
rewrite <- Case2 in goal at 2(rank:27)
=================================================
Progress: 508


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 8
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 1(rank:20)
rewrite <- Case1 in goal at 2(rank:28)
rewrite <- Case2 in goal at 1(rank:20)
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 2(rank:28)
=================================================
Progress: 509


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 510


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 9
Tactic List : 8
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 1(rank:20)
rewrite <- Case1 in goal at 2(rank:28)
rewrite <- Case3 in goal at 1(rank:20)
rewrite <- Case3 in goal at 0(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case3 in goal at 2(rank:28)
=================================================
Progress: 511


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 512


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 513


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 514


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 515


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:13)
=================================================
Progress: 516


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 517


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 4
case if string_eq (string3) (string1) then false else true(rank:13)
case string_eq (string1) (string3)(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 518


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 519


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 520


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 521


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 522


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case4 in goal at 0(rank:28)
=================================================
Progress: 523


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite <- Case3 in goal at 0(rank:13)
rewrite Cond1 in goal at 0(rank:21)
rewrite Case3 in goal at 0(rank:29)
rewrite Case3 in goal at 1(rank:29)
rewrite Case3 in goal at 2(rank:29)
rewrite Case3 in goal at 3(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:13)
rewrite <- Case3 in goal at 2(rank:13)
case if string_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 524


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 525


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 526


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:13)
=================================================
Progress: 527


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 528


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 9
Tactic List : 8
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case2 in goal at 1(rank:20)
rewrite <- Case2 in goal at 2(rank:28)
rewrite <- Case3 in goal at 1(rank:20)
rewrite <- Case3 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case3 in goal at 2(rank:28)
=================================================
Progress: 529


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 530


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 531


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> induction lambda1(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11)
=================================================
Progress: 532


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 533


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 534


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string3) (string2) then false else true(rank:12)
rewrite Cond1 in goal at 0(rank:19)
case string_eq (string2) (string3)(rank:12)
=================================================
Progress: 535


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
case string_eq (string2) (string3)(rank:13)
=================================================
Progress: 536


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12)
=================================================
Progress: 537


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case1 in goal at 0(rank:12)
rewrite <- Case1 in goal at 1(rank:12)
rewrite Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 1(rank:28)
rewrite Case1 in goal at 2(rank:28)
rewrite Case1 in goal at 3(rank:28)
rewrite <- Case1 in goal at 2(rank:12)
case if string_eq (string3) (string2) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
=================================================
Progress: 538


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12)
=================================================
Progress: 539


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12)
=================================================
Progress: 540


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then false else true(rank:13)
=================================================
Progress: 541


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 542


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 8
Tactic List : 4
case if string_eq (string3) (string2) then false else true(rank:12)
case string_eq (string1) (string3)(rank:12)
rewrite Cond1 in goal at 0(rank:19)
rewrite <- Case1 in goal at 0(rank:27)
=================================================
Progress: 543


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
case if any_eq (string3) (string1) then false else true(rank:13)
case string_eq (string1) (string3)(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 544


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12)
=================================================
Progress: 545


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
rewrite <- Case2 in goal at 0(rank:12)
rewrite <- Case2 in goal at 1(rank:12)
rewrite <- Case2 in goal at 2(rank:12)
case if string_eq (string3) (string2) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite Case2 in goal at 0(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 546


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 547


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 548


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 549


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 550


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string2) (string3)(rank:13)
=================================================
Progress: 551


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:13)
=================================================
Progress: 552


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 553


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 554


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 555


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite <- Case2 in goal at 0(rank:13)
rewrite Cond1 in goal at 0(rank:21)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:13)
rewrite <- Case2 in goal at 2(rank:13)
case if any_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 556


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 557


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite <- Case2 in goal at 0(rank:13)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
case if any_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 558


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 2(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 559


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 560


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 561


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
rewrite <- Case2 in goal at 0(rank:13)
rewrite <- Case2 in goal at 1(rank:13)
rewrite <- Case2 in goal at 2(rank:13)
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite Cond1 in goal at 0(rank:21)
=================================================
Progress: 562


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 563


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case4 in goal at 0(rank:28)
=================================================
Progress: 564


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite <- Case3 in goal at 0(rank:13)
rewrite Cond1 in goal at 0(rank:21)
rewrite Case3 in goal at 0(rank:29)
rewrite Case3 in goal at 1(rank:29)
rewrite Case3 in goal at 2(rank:29)
rewrite Case3 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:13)
rewrite <- Case3 in goal at 2(rank:13)
case if string_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 565


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 566


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 567


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 568


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 569


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 570


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
Case4 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case3 in goal at 0(rank:28)
rewrite <- Case4 in goal at 0(rank:28)
=================================================
Progress: 571


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string2) (string1) then false else true(rank:14)
=================================================
Progress: 572


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 1
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
Model : string1: "iql", string2: "pyt", string3: "bjb"
Model : string1: "set", string2: "hoe", string3: "zqs"
Model : string1: "lpo", string2: "nxb", string3: "iyj"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = list_eq (if if string_eq ("pyt") ("iql") then false else true then ("bjb"::filter (aux ("iql")) ((Nil))) else filter (aux ("iql")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("hoe") ("set") then false else true then ("zqs"::filter (aux ("set")) ((Nil))) else filter (aux ("set")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("nxb") ("lpo") then false else true then ("iyj"::filter (aux ("lpo")) ((Nil))) else filter (aux ("lpo")) ((Nil))) ((Nil))
Simplifying took 0.002573 seconds
Result : true
=================================================
Progress: 573


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 2
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
Model : string1: "ctw", string2: "sbg", string3: "qlf"
Model : string1: "jdj", string2: "fkx", string3: "yyw"
Model : string1: "tmg", string2: "tcm", string3: "itn"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = list_eq (if if string_eq ("qlf") ("ctw") then false else true then ("sbg"::filter (aux ("ctw")) ((Nil))) else filter (aux ("ctw")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("yyw") ("jdj") then false else true then ("fkx"::filter (aux ("jdj")) ((Nil))) else filter (aux ("jdj")) ((Nil))) ((Nil))
true = list_eq (if if string_eq ("itn") ("tmg") then false else true then ("tcm"::filter (aux ("tmg")) ((Nil))) else filter (aux ("tmg")) ((Nil))) ((Nil))
Simplifying took 0.003004 seconds
Result : true
=================================================
Progress: 574


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 575


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 576


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:13)
=================================================
Progress: 577


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 578


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 13
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 579


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 18
Tactic List : 8
case if string_eq (string3) (string2) then false else true(rank:12)
rewrite Cond1 in goal at 0(rank:19)
rewrite <- Case1 in goal at 1(rank:19)
rewrite <- Case1 in goal at 2(rank:27)
rewrite <- Case2 in goal at 1(rank:19)
rewrite <- Case2 in goal at 0(rank:27)
rewrite <- Case1 in goal at 0(rank:27)
rewrite <- Case2 in goal at 2(rank:27)
=================================================
Progress: 580


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 8
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 1(rank:20)
rewrite <- Case1 in goal at 2(rank:28)
rewrite <- Case2 in goal at 1(rank:20)
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 2(rank:28)
=================================================
Progress: 581


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 582


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 9
Tactic List : 8
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 1(rank:20)
rewrite <- Case1 in goal at 2(rank:28)
rewrite <- Case3 in goal at 1(rank:20)
rewrite <- Case3 in goal at 0(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case3 in goal at 2(rank:28)
=================================================
Progress: 583


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 584


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 585


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 586


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 587


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:13)
=================================================
Progress: 588


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 589


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 4
case if string_eq (string3) (string1) then false else true(rank:13)
case string_eq (string1) (string3)(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 590


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 591


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 592


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 593


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 594


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case4 in goal at 0(rank:28)
=================================================
Progress: 595


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite <- Case3 in goal at 0(rank:13)
rewrite Cond1 in goal at 0(rank:21)
rewrite Case3 in goal at 0(rank:29)
rewrite Case3 in goal at 1(rank:29)
rewrite Case3 in goal at 2(rank:29)
rewrite Case3 in goal at 3(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:13)
rewrite <- Case3 in goal at 2(rank:13)
case if string_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 596


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 597


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 598


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:13)
=================================================
Progress: 599


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 600


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 9
Tactic List : 8
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case2 in goal at 1(rank:20)
rewrite <- Case2 in goal at 2(rank:28)
rewrite <- Case3 in goal at 1(rank:20)
rewrite <- Case3 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case3 in goal at 2(rank:28)
=================================================
Progress: 601


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 602


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 603


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:12)
=================================================
Progress: 604


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12)
=================================================
Progress: 605


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 606


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:12)
=================================================
Progress: 607


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12)
=================================================
Progress: 608


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 609


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:12)
=================================================
Progress: 610


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12)
=================================================
Progress: 611


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 612


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:12)
=================================================
Progress: 613


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12)
=================================================
Progress: 614


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 615


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:27)
rewrite <- Case2 in goal at 0(rank:27)
=================================================
Progress: 616


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then false else true(rank:12)
rewrite <- Case2 in goal at 0(rank:27)
=================================================
Progress: 617


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 1(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 618


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 619


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite Case1 in goal at 0(rank:12)
=================================================
Progress: 620


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:12)
=================================================
Progress: 621


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string2) then false else true
case if any_eq (string3) (string1) then false else true
discriminate
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string3:string), true = true->string_eq (string1) (string3) = false->if any_eq (string3) (string1) then false else true = false -> string_eq (string1) (string3) = true
Model : string1: "ijg", string3: "ryu"
Model : string1: "vfp", string3: "bpa"
Model : string1: "awz", string3: "vgm"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("ijg") ("ryu") = true
string_eq ("vfp") ("bpa") = true
string_eq ("awz") ("vgm") = true
Simplifying took 0.001286 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string3:string), true = true->string_eq (string1) (string3) = false->if any_eq (string3) (string1) then false else true = false -> string_eq (string1) (string3) = true
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 622


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string3:string), true = true->string_eq (string1) (string3) = false->if any_eq (string3) (string1) then false else true = false -> string_eq (string1) (string3) = true(rank : 0)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 623


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 624


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 625


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
---------------------------------------
string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11)
=================================================
Progress: 626


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
---------------------------------------
string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:11)
=================================================
Progress: 627


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond3(rank : 11)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
Cond3 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite Cond2 in goal at 0(rank:11)
=================================================
Progress: 628


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
Cond3 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 11)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
Cond3 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 629


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then false else true(rank:12)
rewrite <- Case1 in goal at 0(rank:27)
=================================================
Progress: 630


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
rewrite Case2 in goal at 0(rank:28)
rewrite Case2 in goal at 1(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 631


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 632


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite Case2 in goal at 0(rank:12)
=================================================
Progress: 633


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:12)
=================================================
Progress: 634


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string2) then false else true
case if any_eq (string3) (string1) then false else true
discriminate
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "cay", string3: "udx"
Model : string2: "urx", string3: "ill"
Model : string2: "xkg", string3: "bhc"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("cay") ("udx") = true
string_eq ("urx") ("ill") = true
string_eq ("xkg") ("bhc") = true
Simplifying took 0.001567 seconds
Result : false
=================================================
Progress: 635


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:27)
rewrite <- Case2 in goal at 0(rank:27)
=================================================
Progress: 636


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then false else true(rank:12)
rewrite <- Case2 in goal at 0(rank:27)
=================================================
Progress: 637


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 1(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 638


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 639


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite Case1 in goal at 0(rank:12)
=================================================
Progress: 640


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:12)
=================================================
Progress: 641


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string2) then false else true
case if any_eq (string3) (string1) then false else true
discriminate
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string3:string), true = true->string_eq (string1) (string3) = false->if any_eq (string3) (string1) then false else true = false -> string_eq (string1) (string3) = true
Model : string1: "trv", string3: "cdi"
Model : string1: "taf", string3: "rnb"
Model : string1: "tod", string3: "yoq"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("trv") ("cdi") = true
string_eq ("taf") ("rnb") = true
string_eq ("tod") ("yoq") = true
Simplifying took 0.003150 seconds
Result : true
=================================================
Progress: 642


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then false else true(rank:12)
rewrite <- Case1 in goal at 0(rank:27)
=================================================
Progress: 643


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
rewrite Case2 in goal at 0(rank:28)
rewrite Case2 in goal at 1(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 644


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 645


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite Case2 in goal at 0(rank:12)
=================================================
Progress: 646


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:12)
=================================================
Progress: 647


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string2) then false else true
case if any_eq (string3) (string1) then false else true
discriminate
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "yio", string3: "pld"
Model : string2: "mjb", string3: "sbo"
Model : string2: "brx", string3: "afn"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("yio") ("pld") = true
string_eq ("mjb") ("sbo") = true
string_eq ("brx") ("afn") = true
Simplifying took 0.002402 seconds
Result : false
=================================================
Progress: 648


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:12)
=================================================
Progress: 649


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12)
=================================================
Progress: 650


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 651


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:12)
=================================================
Progress: 652


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12)
=================================================
Progress: 653


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 654


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:27)
rewrite <- Case2 in goal at 0(rank:27)
=================================================
Progress: 655


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then false else true(rank:12)
rewrite <- Case2 in goal at 0(rank:27)
=================================================
Progress: 656


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 1(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 657


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 658


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite Case1 in goal at 0(rank:12)
=================================================
Progress: 659


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:12)
=================================================
Progress: 660


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string2) then false else true
case if any_eq (string3) (string1) then false else true
discriminate
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string3:string), true = true->string_eq (string1) (string3) = false->if any_eq (string3) (string1) then false else true = false -> string_eq (string1) (string3) = true
Model : string1: "nwx", string3: "pdl"
Model : string1: "kgp", string3: "yim"
Model : string1: "jfl", string3: "iyy"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("nwx") ("pdl") = true
string_eq ("kgp") ("yim") = true
string_eq ("jfl") ("iyy") = true
Simplifying took 0.002490 seconds
Result : true
=================================================
Progress: 661


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then false else true(rank:12)
rewrite <- Case1 in goal at 0(rank:27)
=================================================
Progress: 662


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
rewrite Case2 in goal at 0(rank:28)
rewrite Case2 in goal at 1(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 663


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 664


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite Case2 in goal at 0(rank:12)
=================================================
Progress: 665


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:12)
=================================================
Progress: 666


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string2) then false else true
case if any_eq (string3) (string1) then false else true
discriminate
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "cpx", string3: "edc"
Model : string2: "mlk", string3: "mck"
Model : string2: "lwh", string3: "wtc"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("cpx") ("edc") = true
string_eq ("mlk") ("mck") = true
string_eq ("lwh") ("wtc") = true
Simplifying took 0.002307 seconds
Result : false
=================================================
Progress: 667


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:12)
=================================================
Progress: 668


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12)
=================================================
Progress: 669


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 670


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:12)
=================================================
Progress: 671


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12)
=================================================
Progress: 672


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 673


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:27)
rewrite <- Case2 in goal at 0(rank:27)
=================================================
Progress: 674


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then false else true(rank:12)
rewrite <- Case2 in goal at 0(rank:27)
=================================================
Progress: 675


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 1(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 676


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 677


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite Case1 in goal at 0(rank:12)
=================================================
Progress: 678


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:12)
=================================================
Progress: 679


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string2) then false else true
case if any_eq (string3) (string1) then false else true
discriminate
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string3:string), true = true->string_eq (string1) (string3) = false->if any_eq (string3) (string1) then false else true = false -> string_eq (string1) (string3) = true
Model : string1: "vph", string3: "ney"
Model : string1: "sbd", string3: "tpo"
Model : string1: "jui", string3: "rve"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("vph") ("ney") = true
string_eq ("sbd") ("tpo") = true
string_eq ("jui") ("rve") = true
Simplifying took 0.003016 seconds
Result : true
=================================================
Progress: 680


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then false else true(rank:12)
rewrite <- Case1 in goal at 0(rank:27)
=================================================
Progress: 681


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
rewrite Case2 in goal at 0(rank:28)
rewrite Case2 in goal at 1(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 682


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 683


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite Case2 in goal at 0(rank:12)
=================================================
Progress: 684


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:12)
=================================================
Progress: 685


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string2) then false else true
case if any_eq (string3) (string1) then false else true
discriminate
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "vly", string3: "rng"
Model : string2: "izq", string3: "igf"
Model : string2: "afo", string3: "xyj"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("vly") ("rng") = true
string_eq ("izq") ("igf") = true
string_eq ("afo") ("xyj") = true
Simplifying took 0.002741 seconds
Result : false
=================================================
Progress: 686


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:13)
=================================================
Progress: 687


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:13)
=================================================
Progress: 688


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 689


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:13)
=================================================
Progress: 690


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:13)
=================================================
Progress: 691


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 692


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 693


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 694


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 695


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 696


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 697


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 698


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 699


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 700


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 701


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 702


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 703


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 704


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 705


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 706


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 707


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 708


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 709


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 710


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 711


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 712


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case3 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 713


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 714


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 715


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 716


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 717


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case3 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 718


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 719


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 720


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 721


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 722


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 723


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 724


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 725


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case3 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 726


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 727


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 728


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 729


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 730


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 731


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 732


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 733


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case3 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 734


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:13)
=================================================
Progress: 735


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:13)
=================================================
Progress: 736


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 737


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 738


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 739


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 740


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 741


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 742


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 743


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 744


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 745


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 746


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 747


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 748


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 749


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case3 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 750


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 751


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 752


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 753


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 754


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 755


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 756


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 757


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case3 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 758


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:13)
=================================================
Progress: 759


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:13)
=================================================
Progress: 760


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 761


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 762


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 763


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 764


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 765


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 766


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 767


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 768


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 769


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 770


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 771


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 772


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 773


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case3 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 774


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 775


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 776


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 777


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 778


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 779


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 780


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 781


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case3 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 782


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:12)
=================================================
Progress: 783


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:12)
=================================================
Progress: 784


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string2) then false else true
rewrite Cond1 in goal at 0
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string3:string), list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string3) = false -> string_eq (string1) (string3) = true
Model : string1: "hwj", string3: "lfm"
Model : string1: "kyx", string3: "baa"
Model : string1: "jwx", string3: "hzy"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("hwj") ("lfm") = true
string_eq ("kyx") ("baa") = true
string_eq ("jwx") ("hzy") = true
Simplifying took 0.001597 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string3:string), list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string3) = false -> string_eq (string1) (string3) = true
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 785


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string3:string), list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string3) = false -> string_eq (string1) (string3) = true(rank : 0)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 786


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 787


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 788


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11)
=================================================
Progress: 789


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite Cond2 in goal at 0(rank:11)
=================================================
Progress: 790


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 11)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
false = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 791


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:12)
=================================================
Progress: 792


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:12)
=================================================
Progress: 793


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string2) then false else true
rewrite Cond1 in goal at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string2:string) (string3:string), string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "kpq", string3: "saa"
Model : string2: "img", string3: "kua"
Model : string2: "xxo", string3: "xxi"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("kpq") ("saa") = true
string_eq ("img") ("kua") = true
string_eq ("xxo") ("xxi") = true
Simplifying took 0.004939 seconds
Result : false
=================================================
Progress: 794


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:12)
=================================================
Progress: 795


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:12)
=================================================
Progress: 796


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string2) then false else true
rewrite Cond1 in goal at 0
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string3:string), list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string3) = false -> string_eq (string1) (string3) = true
Model : string1: "tup", string3: "kso"
Model : string1: "auf", string3: "bda"
Model : string1: "pwk", string3: "rje"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("tup") ("kso") = true
string_eq ("auf") ("bda") = true
string_eq ("pwk") ("rje") = true
Simplifying took 0.002097 seconds
Result : true
=================================================
Progress: 797


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:12)
=================================================
Progress: 798


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:12)
=================================================
Progress: 799


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string2) then false else true
rewrite Cond1 in goal at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string2:string) (string3:string), string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "gyk", string3: "xsb"
Model : string2: "kvs", string3: "mjd"
Model : string2: "juk", string3: "esw"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("gyk") ("xsb") = true
string_eq ("kvs") ("mjd") = true
string_eq ("juk") ("esw") = true
Simplifying took 0.001675 seconds
Result : false
=================================================
Progress: 800


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:12)
=================================================
Progress: 801


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:12)
=================================================
Progress: 802


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string2) then false else true
rewrite Cond1 in goal at 0
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string3:string), list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string3) = false -> string_eq (string1) (string3) = true
Model : string1: "foh", string3: "jqv"
Model : string1: "vcr", string3: "obz"
Model : string1: "gec", string3: "ypj"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("foh") ("jqv") = true
string_eq ("vcr") ("obz") = true
string_eq ("gec") ("ypj") = true
Simplifying took 0.002263 seconds
Result : true
=================================================
Progress: 803


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:12)
=================================================
Progress: 804


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:12)
=================================================
Progress: 805


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string2) then false else true
rewrite Cond1 in goal at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string2:string) (string3:string), string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "bco", string3: "kam"
Model : string2: "kqx", string3: "kxi"
Model : string2: "jvc", string3: "tdt"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("bco") ("kam") = true
string_eq ("kqx") ("kxi") = true
string_eq ("jvc") ("tdt") = true
Simplifying took 0.002948 seconds
Result : false
=================================================
Progress: 806


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:12)
=================================================
Progress: 807


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:12)
=================================================
Progress: 808


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string2) then false else true
rewrite Cond1 in goal at 0
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string3:string), list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string3) = false -> string_eq (string1) (string3) = true
Model : string1: "qfv", string3: "csu"
Model : string1: "mzg", string3: "dlt"
Model : string1: "yvy", string3: "oye"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("qfv") ("csu") = true
string_eq ("mzg") ("dlt") = true
string_eq ("yvy") ("oye") = true
Simplifying took 0.002320 seconds
Result : true
=================================================
Progress: 809


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:12)
=================================================
Progress: 810


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:12)
=================================================
Progress: 811


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string2) then false else true
rewrite Cond1 in goal at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string2:string) (string3:string), string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "qfv", string3: "dvr"
Model : string2: "ssl", string3: "nel"
Model : string2: "ssx", string3: "lmw"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("qfv") ("dvr") = true
string_eq ("ssl") ("nel") = true
string_eq ("ssx") ("lmw") = true
Simplifying took 0.002263 seconds
Result : false
=================================================
Progress: 812


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
>>> induction lambda1(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13)
=================================================
Progress: 813


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:13)
=================================================
Progress: 814


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:13)
=================================================
Progress: 815


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:13)
=================================================
Progress: 816


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:14)
=================================================
Progress: 817


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13)
=================================================
Progress: 818


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:14)
=================================================
Progress: 819


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13)
=================================================
Progress: 820


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
=================================================
Progress: 821


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
>>> induction lambda1(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13)
=================================================
Progress: 822


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:13)
=================================================
Progress: 823


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:13)
=================================================
Progress: 824


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:14)
=================================================
Progress: 825


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13)
=================================================
Progress: 826


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:14)
=================================================
Progress: 827


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13)
=================================================
Progress: 828


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
=================================================
Progress: 829


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:29)
rewrite <- Case2 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 830


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case1 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "gnv", string3: "wan"
Model : string2: "esq", string3: "ybx"
Model : string2: "ata", string3: "bvd"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("gnv") ("wan") = true
string_eq ("esq") ("ybx") = true
string_eq ("ata") ("bvd") = true
Simplifying took 0.001320 seconds
Result : true
New Env

;;
Lemma List
forall (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 831


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true(rank : 0)


1st goal of : forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
discriminate(rank:13)
=================================================
Progress: 832


1st goal of : forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> discriminate(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 833


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 8
Tactic List : 2
rewrite Case1 in goal at 0(rank:20)
rewrite lemma3 in goal at 0(rank:23)
=================================================
Progress: 834


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:12)
=================================================
Progress: 835


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:15)
=================================================
Progress: 836


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 15)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

6 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:14)
=================================================
Progress: 837


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

6 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

5 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:30)
rewrite <- Case2 in goal at 0(rank:30)
=================================================
Progress: 838


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case1 in goal at 1(rank:29)
rewrite <- Case1 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 839


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string3:string), false = true->string_eq (string1) (string3) = false->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = true
Model : string1: "omr", string3: "xqc"
Model : string1: "zre", string3: "pje"
Model : string1: "qdp", string3: "ltg"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("omr") ("xqc") = true
string_eq ("zre") ("pje") = true
string_eq ("qdp") ("ltg") = true
Simplifying took 0.002895 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string3:string), false = true->string_eq (string1) (string3) = false->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = true
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 840


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string3:string), false = true->string_eq (string1) (string3) = false->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = true(rank : 0)


1st goal of : forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
discriminate(rank:13)
=================================================
Progress: 841


1st goal of : forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> discriminate(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite Case2 in goal at 0(rank:21)
rewrite lemma3 in goal at 0(rank:24)
=================================================
Progress: 842


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "ncb", string2: "koa", string3: "poj"
Model : string1: "jxq", string2: "crj", string3: "oql"
Model : string1: "ale", string2: "zig", string3: "mdg"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("ncb") ("poj") = string_eq ("koa") ("poj")
string_eq ("jxq") ("oql") = string_eq ("crj") ("oql")
string_eq ("ale") ("mdg") = string_eq ("zig") ("mdg")
Simplifying took 0.003528 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 843


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
discriminate(rank:13)
=================================================
Progress: 844


1st goal of : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> discriminate(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 845


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 9
Tactic List : 1
rewrite Case2 in goal at 0(rank:12)
=================================================
Progress: 846


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:12)
=================================================
Progress: 847


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
assert forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
discriminate
discriminate
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "wpl", string3: "dtz"
Model : string2: "obh", string3: "wjm"
Model : string2: "box", string3: "vwi"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("wpl") ("dtz") = true
string_eq ("obh") ("wjm") = true
string_eq ("box") ("vwi") = true
Simplifying took 0.001917 seconds
Result : false
=================================================
Progress: 848


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:29)
rewrite <- Case2 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 849


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case1 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "rej", string3: "knx"
Model : string2: "cdd", string3: "xib"
Model : string2: "ugk", string3: "gom"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("rej") ("knx") = true
string_eq ("cdd") ("xib") = true
string_eq ("ugk") ("gom") = true
Simplifying took 0.001685 seconds
Result : true
=================================================
Progress: 850


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 851


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case1 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "chn", string2: "oxd", string3: "zqe"
Model : string1: "ppx", string2: "zur", string3: "gfo"
Model : string1: "drs", string2: "pgf", string3: "zhl"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("oxd") ("zqe") = string_eq ("chn") ("zqe")
string_eq ("zur") ("gfo") = string_eq ("ppx") ("gfo")
string_eq ("pgf") ("zhl") = string_eq ("drs") ("zhl")
Simplifying took 0.004441 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 852


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
discriminate(rank:13)
=================================================
Progress: 853


1st goal of : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> discriminate(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 854


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 6
Tactic List : 1
rewrite Case1 in goal at 0(rank:12)
=================================================
Progress: 855


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:12)
=================================================
Progress: 856


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case1 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case2 in goal at 0
assert forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
discriminate
discriminate
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string3:string), true = true->string_eq (string1) (string3) = false->if any_eq (string3) (string1) then false else true = false -> string_eq (string1) (string3) = true
Model : string1: "hfh", string3: "kyz"
Model : string1: "qlc", string3: "yny"
Model : string1: "ago", string3: "xkk"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("hfh") ("kyz") = true
string_eq ("qlc") ("yny") = true
string_eq ("ago") ("xkk") = true
Simplifying took 0.002121 seconds
Result : true
=================================================
Progress: 857


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case1 in goal at 1(rank:29)
rewrite <- Case1 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 858


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string3:string), false = true->string_eq (string1) (string3) = false->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = true
Model : string1: "snq", string3: "hwo"
Model : string1: "bqj", string3: "cwi"
Model : string1: "jqe", string3: "wtk"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("snq") ("hwo") = true
string_eq ("bqj") ("cwi") = true
string_eq ("jqe") ("wtk") = true
Simplifying took 0.001803 seconds
Result : true
=================================================
Progress: 859


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "bzh", string2: "eft", string3: "jhn"
Model : string1: "bqd", string2: "qll", string3: "usb"
Model : string1: "tbi", string2: "yif", string3: "lfc"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("bzh") ("jhn") = string_eq ("eft") ("jhn")
string_eq ("bqd") ("usb") = string_eq ("qll") ("usb")
string_eq ("tbi") ("lfc") = string_eq ("yif") ("lfc")
Simplifying took 0.003934 seconds
Result : true
=================================================
Progress: 860


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 861


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case3 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:29)
rewrite <- Case3 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 862


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "cjh", string3: "hva"
Model : string2: "pcz", string3: "bcm"
Model : string2: "qli", string3: "fub"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("cjh") ("hva") = true
string_eq ("pcz") ("bcm") = true
string_eq ("qli") ("fub") = true
Simplifying took 0.000987 seconds
Result : true
=================================================
Progress: 863


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 864


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case3 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "csw", string2: "jyd", string3: "ffu"
Model : string1: "tmv", string2: "viz", string3: "xha"
Model : string1: "uns", string2: "bzk", string3: "ljt"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("jyd") ("ffu") = string_eq ("csw") ("ffu")
string_eq ("viz") ("xha") = string_eq ("tmv") ("xha")
string_eq ("bzk") ("ljt") = string_eq ("uns") ("ljt")
Simplifying took 0.004562 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 865


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
discriminate(rank:13)
=================================================
Progress: 866


1st goal of : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> discriminate(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 867


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 6
Tactic List : 1
rewrite Case1 in goal at 0(rank:12)
=================================================
Progress: 868


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case3 in goal at 0(rank:12)
=================================================
Progress: 869


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case3 in goal at 0
assert forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
discriminate
discriminate
rewrite Case1 in goal at 0
rewrite <- Case3 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string3:string), true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = false -> string_eq (string1) (string3) = true
Model : string1: "tge", string3: "glu"
Model : string1: "lxr", string3: "lqb"
Model : string1: "ced", string3: "ims"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("tge") ("glu") = true
string_eq ("lxr") ("lqb") = true
string_eq ("ced") ("ims") = true
Simplifying took 0.002685 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string3:string), true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = false -> string_eq (string1) (string3) = true
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 870


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string3:string), true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = false -> string_eq (string1) (string3) = true(rank : 0)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 871


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 872


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 873


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
---------------------------------------
string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11)
=================================================
Progress: 874


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
---------------------------------------
string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:11)
=================================================
Progress: 875


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond3(rank : 11)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
Cond3 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite Cond2 in goal at 0(rank:11)
=================================================
Progress: 876


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
Cond3 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 11)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
Cond3 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 877


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case1 in goal at 1(rank:29)
rewrite <- Case1 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 878


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string3:string), false = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = true
Model : string1: "esh", string3: "vgd"
Model : string1: "owg", string3: "mck"
Model : string1: "hvm", string3: "njp"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("esh") ("vgd") = true
string_eq ("owg") ("mck") = true
string_eq ("hvm") ("njp") = true
Simplifying took 0.001709 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string3:string), false = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = true
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 879


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string3:string), false = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = true(rank : 0)


1st goal of : forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
discriminate(rank:13)
=================================================
Progress: 880


1st goal of : forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> discriminate(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 881


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 8
Tactic List : 2
rewrite Case3 in goal at 0(rank:20)
rewrite lemma3 in goal at 0(rank:23)
=================================================
Progress: 882


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:12)
=================================================
Progress: 883


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:15)
=================================================
Progress: 884


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 15)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

6 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:14)
=================================================
Progress: 885


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

6 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

5 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:30)
rewrite <- Case3 in goal at 0(rank:30)
=================================================
Progress: 886


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case3 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:29)
rewrite <- Case3 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 887


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "oey", string3: "uon"
Model : string2: "mqt", string3: "eqn"
Model : string2: "ege", string3: "fhn"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("oey") ("uon") = true
string_eq ("mqt") ("eqn") = true
string_eq ("ege") ("fhn") = true
Simplifying took 0.001638 seconds
Result : true
=================================================
Progress: 888


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 889


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case3 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "isy", string2: "lsv", string3: "pgr"
Model : string1: "ccf", string2: "hgg", string3: "tko"
Model : string1: "bgc", string2: "wxc", string3: "yly"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("lsv") ("pgr") = string_eq ("isy") ("pgr")
string_eq ("hgg") ("tko") = string_eq ("ccf") ("tko")
string_eq ("wxc") ("yly") = string_eq ("bgc") ("yly")
Simplifying took 0.004199 seconds
Result : true
=================================================
Progress: 890


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case1 in goal at 1(rank:29)
rewrite <- Case1 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 891


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string3:string), false = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = true
Model : string1: "wfz", string3: "eyt"
Model : string1: "bph", string3: "skz"
Model : string1: "oxj", string3: "cjh"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("wfz") ("eyt") = true
string_eq ("bph") ("skz") = true
string_eq ("oxj") ("cjh") = true
Simplifying took 0.001397 seconds
Result : true
=================================================
Progress: 892


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "hov", string2: "zvt", string3: "ddw"
Model : string1: "obp", string2: "wlt", string3: "kyi"
Model : string1: "rmh", string2: "ofz", string3: "tcc"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("hov") ("ddw") = string_eq ("zvt") ("ddw")
string_eq ("obp") ("kyi") = string_eq ("wlt") ("kyi")
string_eq ("rmh") ("tcc") = string_eq ("ofz") ("tcc")
Simplifying took 0.004354 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 893


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
discriminate(rank:13)
=================================================
Progress: 894


1st goal of : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> discriminate(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 895


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 7
Tactic List : 1
rewrite Case3 in goal at 0(rank:12)
=================================================
Progress: 896


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:12)
=================================================
Progress: 897


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
assert forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
discriminate
discriminate
rewrite Case3 in goal at 0
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "yzf", string3: "ldi"
Model : string2: "jwy", string3: "twl"
Model : string2: "tcj", string3: "cyy"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("yzf") ("ldi") = true
string_eq ("jwy") ("twl") = true
string_eq ("tcj") ("cyy") = true
Simplifying took 0.002178 seconds
Result : false
=================================================
Progress: 898


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case3 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:29)
rewrite <- Case3 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 899


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true
Model : string2: "evj", string3: "cyl"
Model : string2: "mwx", string3: "xhn"
Model : string2: "zxl", string3: "hfu"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("evj") ("cyl") = true
string_eq ("mwx") ("xhn") = true
string_eq ("zxl") ("hfu") = true
Simplifying took 0.002175 seconds
Result : true
New Env

;;
Lemma List
forall (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 900


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true(rank : 0)


1st goal of : forall (string1:string) (string2:string), false = true->if string_eq (string2) (string1) then false else true = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), false = true->if string_eq (string2) (string1) then false else true = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
discriminate(rank:13)
=================================================
Progress: 901


1st goal of : forall (string1:string) (string2:string), false = true->if string_eq (string2) (string1) then false else true = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), false = true->if string_eq (string2) (string1) then false else true = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> discriminate(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 902


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 8
Tactic List : 2
rewrite Case2 in goal at 0(rank:20)
rewrite lemma3 in goal at 0(rank:23)
=================================================
Progress: 903


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case3 in goal at 0(rank:12)
=================================================
Progress: 904


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:15)
=================================================
Progress: 905


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 15)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

6 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:14)
=================================================
Progress: 906


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

6 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

5 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:30)
rewrite <- Case3 in goal at 0(rank:30)
=================================================
Progress: 907


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:29)
rewrite <- Case2 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 908


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string3:string), false = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = true
Model : string1: "bvu", string3: "nyf"
Model : string1: "sdv", string3: "myp"
Model : string1: "asz", string3: "kef"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("bvu") ("nyf") = true
string_eq ("sdv") ("myp") = true
string_eq ("asz") ("kef") = true
Simplifying took 0.001649 seconds
Result : true
=================================================
Progress: 909


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "nng", string2: "oee", string3: "bwg"
Model : string1: "fio", string2: "cbe", string3: "cwf"
Model : string1: "mnd", string2: "lsb", string3: "xmh"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("nng") ("bwg") = string_eq ("oee") ("bwg")
string_eq ("fio") ("cwf") = string_eq ("cbe") ("cwf")
string_eq ("mnd") ("xmh") = string_eq ("lsb") ("xmh")
Simplifying took 0.003080 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 910


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
discriminate(rank:13)
=================================================
Progress: 911


1st goal of : forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> discriminate(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 912


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 7
Tactic List : 1
rewrite Case3 in goal at 0(rank:12)
=================================================
Progress: 913


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:12)
=================================================
Progress: 914


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case2 in goal at 0
assert forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
discriminate
discriminate
rewrite Case3 in goal at 0
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string2:string) (string3:string), true = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true
Model : string2: "enn", string3: "ami"
Model : string2: "kcy", string3: "lzt"
Model : string2: "qir", string3: "tfc"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("enn") ("ami") = true
string_eq ("kcy") ("lzt") = true
string_eq ("qir") ("tfc") = true
Simplifying took 0.001890 seconds
Result : false
=================================================
Progress: 915


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case3 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:29)
rewrite <- Case3 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 916


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true
Model : string2: "dad", string3: "seb"
Model : string2: "esg", string3: "aeq"
Model : string2: "xdm", string3: "mwy"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("dad") ("seb") = true
string_eq ("esg") ("aeq") = true
string_eq ("xdm") ("mwy") = true
Simplifying took 0.001482 seconds
Result : true
=================================================
Progress: 917


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 918


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case3 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "fsf", string2: "tvq", string3: "pyb"
Model : string1: "bsg", string2: "cuj", string3: "unf"
Model : string1: "fah", string2: "jwr", string3: "yhy"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("tvq") ("pyb") = string_eq ("fsf") ("pyb")
string_eq ("cuj") ("unf") = string_eq ("bsg") ("unf")
string_eq ("jwr") ("yhy") = string_eq ("fah") ("yhy")
Simplifying took 0.003641 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 919


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
discriminate(rank:13)
=================================================
Progress: 920


1st goal of : forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> discriminate(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 921


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 6
Tactic List : 1
rewrite Case2 in goal at 0(rank:12)
=================================================
Progress: 922


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case3 in goal at 0(rank:12)
=================================================
Progress: 923


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case3 in goal at 0
assert forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
discriminate
discriminate
rewrite Case2 in goal at 0
rewrite <- Case3 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string3:string), true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = false -> string_eq (string1) (string3) = true
Model : string1: "fmn", string3: "ejs"
Model : string1: "hga", string3: "mao"
Model : string1: "pgt", string3: "ajh"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("fmn") ("ejs") = true
string_eq ("hga") ("mao") = true
string_eq ("pgt") ("ajh") = true
Simplifying took 0.000965 seconds
Result : true
=================================================
Progress: 924


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:29)
rewrite <- Case2 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 925


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string3:string), false = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = true
Model : string1: "qxe", string3: "ict"
Model : string1: "pvy", string3: "qjy"
Model : string1: "xur", string3: "mls"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("qxe") ("ict") = true
string_eq ("pvy") ("qjy") = true
string_eq ("xur") ("mls") = true
Simplifying took 0.002503 seconds
Result : true
=================================================
Progress: 926


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "aso", string2: "asu", string3: "zor"
Model : string1: "fed", string2: "zpl", string3: "qtz"
Model : string1: "sfs", string2: "ipx", string3: "ttu"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("aso") ("zor") = string_eq ("asu") ("zor")
string_eq ("fed") ("qtz") = string_eq ("zpl") ("qtz")
string_eq ("sfs") ("ttu") = string_eq ("ipx") ("ttu")
Simplifying took 0.004109 seconds
Result : true
=================================================
Progress: 927


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 928


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:29)
rewrite <- Case2 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 929


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case1 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "cvi", string3: "pqb"
Model : string2: "vyw", string3: "nwl"
Model : string2: "gqz", string3: "rao"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("cvi") ("pqb") = true
string_eq ("vyw") ("nwl") = true
string_eq ("gqz") ("rao") = true
Simplifying took 0.001955 seconds
Result : true
=================================================
Progress: 930


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 931


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case1 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "ipl", string2: "qil", string3: "ggp"
Model : string1: "rrh", string2: "vxa", string3: "fva"
Model : string1: "ozo", string2: "dre", string3: "ktt"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("qil") ("ggp") = string_eq ("ipl") ("ggp")
string_eq ("vxa") ("fva") = string_eq ("rrh") ("fva")
string_eq ("dre") ("ktt") = string_eq ("ozo") ("ktt")
Simplifying took 0.002993 seconds
Result : true
=================================================
Progress: 932


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case1 in goal at 1(rank:29)
rewrite <- Case1 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 933


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string3:string), false = true->string_eq (string1) (string3) = false->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = true
Model : string1: "irj", string3: "xsq"
Model : string1: "swv", string3: "elo"
Model : string1: "fmz", string3: "eke"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("irj") ("xsq") = true
string_eq ("swv") ("elo") = true
string_eq ("fmz") ("eke") = true
Simplifying took 0.001747 seconds
Result : true
=================================================
Progress: 934


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "kry", string2: "ydl", string3: "jvz"
Model : string1: "rkb", string2: "ket", string3: "lkp"
Model : string1: "afb", string2: "xdm", string3: "fpb"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("kry") ("jvz") = string_eq ("ydl") ("jvz")
string_eq ("rkb") ("lkp") = string_eq ("ket") ("lkp")
string_eq ("afb") ("fpb") = string_eq ("xdm") ("fpb")
Simplifying took 0.003409 seconds
Result : true
=================================================
Progress: 935


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 936


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case3 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:29)
rewrite <- Case3 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 937


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "fke", string3: "lxo"
Model : string2: "wcw", string3: "lfy"
Model : string2: "txc", string3: "uie"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("fke") ("lxo") = true
string_eq ("wcw") ("lfy") = true
string_eq ("txc") ("uie") = true
Simplifying took 0.002591 seconds
Result : true
=================================================
Progress: 938


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 939


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case3 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "tki", string2: "chx", string3: "yxq"
Model : string1: "dkp", string2: "xjd", string3: "kyk"
Model : string1: "mul", string2: "usp", string3: "zfj"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("chx") ("yxq") = string_eq ("tki") ("yxq")
string_eq ("xjd") ("kyk") = string_eq ("dkp") ("kyk")
string_eq ("usp") ("zfj") = string_eq ("mul") ("zfj")
Simplifying took 0.005567 seconds
Result : true
=================================================
Progress: 940


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case1 in goal at 1(rank:29)
rewrite <- Case1 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 941


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string3:string), false = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = true
Model : string1: "khd", string3: "shh"
Model : string1: "cle", string3: "aru"
Model : string1: "eth", string3: "jus"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("khd") ("shh") = true
string_eq ("cle") ("aru") = true
string_eq ("eth") ("jus") = true
Simplifying took 0.001272 seconds
Result : true
=================================================
Progress: 942


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "sst", string2: "ruv", string3: "eti"
Model : string1: "imb", string2: "dik", string3: "pdj"
Model : string1: "cro", string2: "onn", string3: "vln"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("sst") ("eti") = string_eq ("ruv") ("eti")
string_eq ("imb") ("pdj") = string_eq ("dik") ("pdj")
string_eq ("cro") ("vln") = string_eq ("onn") ("vln")
Simplifying took 0.003196 seconds
Result : true
=================================================
Progress: 943


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 944


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case3 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:29)
rewrite <- Case3 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 945


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true
Model : string2: "gle", string3: "cbz"
Model : string2: "rwt", string3: "ldi"
Model : string2: "wop", string3: "lcx"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("gle") ("cbz") = true
string_eq ("rwt") ("ldi") = true
string_eq ("wop") ("lcx") = true
Simplifying took 0.002026 seconds
Result : true
=================================================
Progress: 946


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 947


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case3 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "nok", string2: "znm", string3: "lsi"
Model : string1: "fea", string2: "pyx", string3: "tha"
Model : string1: "gvs", string2: "rqv", string3: "vcy"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("znm") ("lsi") = string_eq ("nok") ("lsi")
string_eq ("pyx") ("tha") = string_eq ("fea") ("tha")
string_eq ("rqv") ("vcy") = string_eq ("gvs") ("vcy")
Simplifying took 0.004937 seconds
Result : true
=================================================
Progress: 948


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:29)
rewrite <- Case2 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 949


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string3:string), false = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = true
Model : string1: "yex", string3: "ibe"
Model : string1: "wog", string3: "zuh"
Model : string1: "grw", string3: "gwe"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("yex") ("ibe") = true
string_eq ("wog") ("zuh") = true
string_eq ("grw") ("gwe") = true
Simplifying took 0.003788 seconds
Result : true
=================================================
Progress: 950


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "rkz", string2: "vhz", string3: "kpl"
Model : string1: "ubg", string2: "hnr", string3: "vsu"
Model : string1: "oiz", string2: "nxx", string3: "vfw"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("rkz") ("kpl") = string_eq ("vhz") ("kpl")
string_eq ("ubg") ("vsu") = string_eq ("hnr") ("vsu")
string_eq ("oiz") ("vfw") = string_eq ("nxx") ("vfw")
Simplifying took 0.005520 seconds
Result : true
=================================================
Progress: 951


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 952


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:29)
rewrite <- Case2 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 953


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case1 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "dee", string3: "qoi"
Model : string2: "lwo", string3: "bfu"
Model : string2: "mlj", string3: "lla"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("dee") ("qoi") = true
string_eq ("lwo") ("bfu") = true
string_eq ("mlj") ("lla") = true
Simplifying took 0.001474 seconds
Result : true
=================================================
Progress: 954


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 955


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case1 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "rtf", string2: "zcy", string3: "qjt"
Model : string1: "obo", string2: "npe", string3: "wxl"
Model : string1: "hqn", string2: "yyk", string3: "hwl"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("zcy") ("qjt") = string_eq ("rtf") ("qjt")
string_eq ("npe") ("wxl") = string_eq ("obo") ("wxl")
string_eq ("yyk") ("hwl") = string_eq ("hqn") ("hwl")
Simplifying took 0.007174 seconds
Result : true
=================================================
Progress: 956


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case1 in goal at 1(rank:29)
rewrite <- Case1 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 957


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string3:string), false = true->string_eq (string1) (string3) = false->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = true
Model : string1: "jdp", string3: "dbi"
Model : string1: "ztv", string3: "umo"
Model : string1: "wut", string3: "rky"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("jdp") ("dbi") = true
string_eq ("ztv") ("umo") = true
string_eq ("wut") ("rky") = true
Simplifying took 0.003466 seconds
Result : true
=================================================
Progress: 958


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "mzi", string2: "xjx", string3: "rui"
Model : string1: "gjr", string2: "xyw", string3: "syo"
Model : string1: "lys", string2: "kzu", string3: "fke"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("mzi") ("rui") = string_eq ("xjx") ("rui")
string_eq ("gjr") ("syo") = string_eq ("xyw") ("syo")
string_eq ("lys") ("fke") = string_eq ("kzu") ("fke")
Simplifying took 0.005711 seconds
Result : true
=================================================
Progress: 959


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 960


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case3 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:29)
rewrite <- Case3 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 961


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "lkl", string3: "xek"
Model : string2: "pnp", string3: "muf"
Model : string2: "rmc", string3: "xjj"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("lkl") ("xek") = true
string_eq ("pnp") ("muf") = true
string_eq ("rmc") ("xjj") = true
Simplifying took 0.003069 seconds
Result : true
=================================================
Progress: 962


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 963


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case3 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "tti", string2: "cbx", string3: "jgq"
Model : string1: "geb", string2: "htf", string3: "keq"
Model : string1: "rpw", string2: "dux", string3: "vup"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("cbx") ("jgq") = string_eq ("tti") ("jgq")
string_eq ("htf") ("keq") = string_eq ("geb") ("keq")
string_eq ("dux") ("vup") = string_eq ("rpw") ("vup")
Simplifying took 0.003819 seconds
Result : true
=================================================
Progress: 964


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case1 in goal at 1(rank:29)
rewrite <- Case1 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 965


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string3:string), false = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = true
Model : string1: "npr", string3: "gdc"
Model : string1: "bgy", string3: "css"
Model : string1: "pkp", string3: "deb"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("npr") ("gdc") = true
string_eq ("bgy") ("css") = true
string_eq ("pkp") ("deb") = true
Simplifying took 0.001125 seconds
Result : true
=================================================
Progress: 966


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "lyg", string2: "uqc", string3: "tws"
Model : string1: "tkg", string2: "cuj", string3: "ekl"
Model : string1: "cvi", string2: "lmy", string3: "riv"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("lyg") ("tws") = string_eq ("uqc") ("tws")
string_eq ("tkg") ("ekl") = string_eq ("cuj") ("ekl")
string_eq ("cvi") ("riv") = string_eq ("lmy") ("riv")
Simplifying took 0.004399 seconds
Result : true
=================================================
Progress: 967


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 968


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case3 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:29)
rewrite <- Case3 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 969


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true
Model : string2: "cgq", string3: "hqj"
Model : string2: "ags", string3: "rxn"
Model : string2: "jlf", string3: "lzn"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("cgq") ("hqj") = true
string_eq ("ags") ("rxn") = true
string_eq ("jlf") ("lzn") = true
Simplifying took 0.001259 seconds
Result : true
=================================================
Progress: 970


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 971


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case3 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "sjp", string2: "sft", string3: "niw"
Model : string1: "inm", string2: "ugn", string3: "wfc"
Model : string1: "ied", string2: "eca", string3: "vqr"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("sft") ("niw") = string_eq ("sjp") ("niw")
string_eq ("ugn") ("wfc") = string_eq ("inm") ("wfc")
string_eq ("eca") ("vqr") = string_eq ("ied") ("vqr")
Simplifying took 0.005508 seconds
Result : true
=================================================
Progress: 972


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:29)
rewrite <- Case2 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 973


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string3:string), false = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = true
Model : string1: "nnw", string3: "uau"
Model : string1: "rea", string3: "kwl"
Model : string1: "egh", string3: "zee"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("nnw") ("uau") = true
string_eq ("rea") ("kwl") = true
string_eq ("egh") ("zee") = true
Simplifying took 0.002361 seconds
Result : true
=================================================
Progress: 974


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "sxt", string2: "vxx", string3: "jxu"
Model : string1: "sao", string2: "oti", string3: "toi"
Model : string1: "yuk", string2: "jcx", string3: "bla"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("sxt") ("jxu") = string_eq ("vxx") ("jxu")
string_eq ("sao") ("toi") = string_eq ("oti") ("toi")
string_eq ("yuk") ("bla") = string_eq ("jcx") ("bla")
Simplifying took 0.004456 seconds
Result : true
=================================================
Progress: 975


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 976


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 23)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then string_eq (string1) (string2) else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case if string_eq (string2) (string1) then string_eq (string1) (string2) else true(rank:8)
=================================================
Progress: 977


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then string_eq (string1) (string2) else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> case if string_eq (string2) (string1) then string_eq (string1) (string2) else true(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Case1 in goal at 0(rank:16)
rewrite <- Case1 in goal at 0(rank:16)
=================================================
Progress: 978


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 16)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
false = false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 979


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
false = false

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 1
Tactic List : 1
rewrite Case1 in goal at 0(rank:7)
=================================================
Progress: 980


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:7)
=================================================
Progress: 981


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string1)(rank:8)
=================================================
Progress: 982


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string_eq (string2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:8)
=================================================
Progress: 983


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string_eq (string2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite <- Case3 in goal at 0(rank:8)
rewrite Case1 in goal at 0(rank:16)
rewrite Case3 in goal at 0(rank:24)
=================================================
Progress: 984


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:8)
=================================================
Progress: 985


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 986


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : true = false
Case3 : string_eq (string2) (string1) = false
---------------------------------------
true = true

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 2
Tactic List : 1
reflexivity(rank:6)
=================================================
Progress: 987


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : true = false
Case3 : string_eq (string2) (string1) = false
---------------------------------------
true = true

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 6)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil)) = true -> sub_check_ta1 (P (string2) (lambda2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 4
Tactic List : 1
simpl in goal(rank:6)
=================================================
Progress: 988


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil)) = true -> sub_check_ta1 (P (string2) (lambda2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string1(rank:6)
=================================================
Progress: 989


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 6)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:6)
=================================================
Progress: 990


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 6)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:6)
=================================================
Progress: 991


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 6)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = true

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (lambda2:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = true
Model : lambda2: V ("bcf"), string1: "jzr", string2: "nii"
Model : lambda2: V ("idg"), string1: "hqu", string2: "ytr"
Model : lambda2: V ("igz"), string1: "eve", string2: "kte"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
sub_check_ta1 (V ("bcf")) (("nii"::("jzr"::(Nil)))) = true
sub_check_ta1 (V ("idg")) (("ytr"::("hqu"::(Nil)))) = true
sub_check_ta1 (V ("igz")) (("kte"::("eve"::(Nil)))) = true
Simplifying took 0.004254 seconds
Result : true
=================================================
Progress: 992


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 23)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

6 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:14)
=================================================
Progress: 993


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

6 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

5 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:30)
rewrite <- Case2 in goal at 0(rank:30)
=================================================
Progress: 994


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 23)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

6 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:14)
=================================================
Progress: 995


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

6 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

5 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:30)
rewrite <- Case3 in goal at 0(rank:30)
=================================================
Progress: 996


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 23)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

6 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:14)
=================================================
Progress: 997


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

6 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

5 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:30)
rewrite <- Case3 in goal at 0(rank:30)
=================================================
Progress: 998


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 25)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
reflexivity
case string_eq (string1) (string3)
reflexivity
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string2:string) (string3:string), string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true
Model : string2: "syr", string3: "tyf"
Model : string2: "hue", string3: "pmf"
Model : string2: "pgc", string3: "hpc"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("syr") ("tyf") = true
string_eq ("hue") ("pmf") = true
string_eq ("pgc") ("hpc") = true
Simplifying took 0.002092 seconds
Result : false
=================================================
Progress: 999


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 25)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
reflexivity
case string_eq (string1) (string3)
reflexivity
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string3:string), string_eq (string1) (string3) = false -> string_eq (string1) (string3) = true
Model : string1: "yoj", string3: "ipu"
Model : string1: "dna", string3: "lrl"
Model : string1: "dxh", string3: "uda"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("yoj") ("ipu") = true
string_eq ("dna") ("lrl") = true
string_eq ("dxh") ("uda") = true
Simplifying took 0.001302 seconds
Result : false
=================================================
Progress: 1000


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 25)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
reflexivity
case string_eq (string1) (string3)
reflexivity
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string2:string) (string3:string), string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true
Model : string2: "qio", string3: "aoz"
Model : string2: "lhl", string3: "fxw"
Model : string2: "qqx", string3: "ccu"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("qio") ("aoz") = true
string_eq ("lhl") ("fxw") = true
string_eq ("qqx") ("ccu") = true
Simplifying took 0.000936 seconds
Result : false
=================================================
Progress: 1001


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 25)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
reflexivity
case string_eq (string1) (string3)
reflexivity
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string3:string), string_eq (string1) (string3) = false -> string_eq (string1) (string3) = true
Model : string1: "mbg", string3: "klc"
Model : string1: "fea", string3: "dnp"
Model : string1: "kis", string3: "ich"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("mbg") ("klc") = true
string_eq ("fea") ("dnp") = true
string_eq ("kis") ("ich") = true
Simplifying took 0.001004 seconds
Result : false
=================================================
Progress: 1002


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 25)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
reflexivity
case string_eq (string1) (string3)
reflexivity
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string2:string) (string3:string), string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true
Model : string2: "cbv", string3: "ehs"
Model : string2: "yui", string3: "gsb"
Model : string2: "pqx", string3: "zqd"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("cbv") ("ehs") = true
string_eq ("yui") ("gsb") = true
string_eq ("pqx") ("zqd") = true
Simplifying took 0.001586 seconds
Result : false
=================================================
Progress: 1003


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 25)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
reflexivity
case string_eq (string1) (string3)
reflexivity
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string3:string), string_eq (string1) (string3) = false -> string_eq (string1) (string3) = true
Model : string1: "inw", string3: "mhv"
Model : string1: "zqp", string3: "gdc"
Model : string1: "jzu", string3: "gvv"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("inw") ("mhv") = true
string_eq ("zqp") ("gdc") = true
string_eq ("jzu") ("gvv") = true
Simplifying took 0.001547 seconds
Result : false
=================================================
Progress: 1004


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 25)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
reflexivity
case string_eq (string1) (string3)
reflexivity
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string2:string) (string3:string), string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true
Model : string2: "sil", string3: "gdf"
Model : string2: "blg", string3: "mrq"
Model : string2: "bih", string3: "cjp"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("sil") ("gdf") = true
string_eq ("blg") ("mrq") = true
string_eq ("bih") ("cjp") = true
Simplifying took 0.000730 seconds
Result : false
=================================================
Progress: 1005


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 25)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
reflexivity
case string_eq (string1) (string3)
reflexivity
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string3:string), string_eq (string1) (string3) = false -> string_eq (string1) (string3) = true
Model : string1: "ipt", string3: "oto"
Model : string1: "hpj", string3: "ptk"
Model : string1: "biq", string3: "inc"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("ipt") ("oto") = true
string_eq ("hpj") ("ptk") = true
string_eq ("biq") ("inc") = true
Simplifying took 0.001196 seconds
Result : false
=================================================
Progress: 1006


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 27)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then string_eq (string1) (string2) else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string2) (string1) then string_eq (string1) (string2) else true(rank:12)
=================================================
Progress: 1007


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then string_eq (string1) (string2) else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string2) (string1) then string_eq (string1) (string2) else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite Case1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:20)
=================================================
Progress: 1008


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
false = false

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 1009


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
false = false

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 1
Tactic List : 1
rewrite Case1 in goal at 0(rank:11)
=================================================
Progress: 1010


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:11)
=================================================
Progress: 1011


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string1)(rank:12)
=================================================
Progress: 1012


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string_eq (string2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:12)
=================================================
Progress: 1013


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string_eq (string2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case3 in goal at 0(rank:12)
rewrite Case1 in goal at 0(rank:20)
rewrite Case3 in goal at 0(rank:28)
=================================================
Progress: 1014


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string2) (string2) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12)
=================================================
Progress: 1015


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string2) (string2) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 1016


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : true = false
Case3 : string_eq (string2) (string1) = false
---------------------------------------
true = true

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 1
reflexivity(rank:10)
=================================================
Progress: 1017


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : true = false
Case3 : string_eq (string2) (string1) = false
---------------------------------------
true = true

2 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil)) = true -> sub_check_ta1 (P (string2) (lambda2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 4
Tactic List : 1
simpl in goal(rank:10)
=================================================
Progress: 1018


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil)) = true -> sub_check_ta1 (P (string2) (lambda2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10)
=================================================
Progress: 1019


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:10)
=================================================
Progress: 1020


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = true

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (lambda2:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = true
Model : lambda2: V ("oyh"), string1: "cax", string2: "hub"
Model : lambda2: V ("cdq"), string1: "dmf", string2: "lbd"
Model : lambda2: V ("dgh"), string1: "ucu", string2: "xrp"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
sub_check_ta1 (V ("oyh")) (("hub"::("cax"::(Nil)))) = true
sub_check_ta1 (V ("cdq")) (("lbd"::("dmf"::(Nil)))) = true
sub_check_ta1 (V ("dgh")) (("xrp"::("ucu"::(Nil)))) = true
Simplifying took 0.003364 seconds
Result : true
=================================================
Progress: 1021


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 27)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then string_eq (string1) (string2) else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string2) (string1) then string_eq (string1) (string2) else true(rank:12)
=================================================
Progress: 1022


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then string_eq (string1) (string2) else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string2) (string1) then string_eq (string1) (string2) else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite Case1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:20)
=================================================
Progress: 1023


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
false = false

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 1024


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
false = false

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 1
Tactic List : 1
rewrite Case1 in goal at 0(rank:11)
=================================================
Progress: 1025


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:11)
=================================================
Progress: 1026


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string1)(rank:12)
=================================================
Progress: 1027


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string_eq (string2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:12)
=================================================
Progress: 1028


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string_eq (string2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case3 in goal at 0(rank:12)
rewrite Case1 in goal at 0(rank:20)
rewrite Case3 in goal at 0(rank:28)
=================================================
Progress: 1029


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string2) (string2) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12)
=================================================
Progress: 1030


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string2) (string2) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 1031


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : true = false
Case3 : string_eq (string2) (string1) = false
---------------------------------------
true = true

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 1
reflexivity(rank:10)
=================================================
Progress: 1032


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : true = false
Case3 : string_eq (string2) (string1) = false
---------------------------------------
true = true

2 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil)) = true -> sub_check_ta1 (P (string2) (lambda2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 4
Tactic List : 1
simpl in goal(rank:10)
=================================================
Progress: 1033


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil)) = true -> sub_check_ta1 (P (string2) (lambda2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:10)
=================================================
Progress: 1034


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10)
=================================================
Progress: 1035


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:10)
=================================================
Progress: 1036


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = true

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (lambda2:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = true
Model : lambda2: P ("tei") (V ("gmf")), string1: "vry", string2: "kfa"
Model : lambda2: V ("zit"), string1: "vud", string2: "szq"
Model : lambda2: V ("buf"), string1: "ple", string2: "oem"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
sub_check_ta1 (P ("tei") (V ("gmf"))) (("kfa"::("vry"::(Nil)))) = true
sub_check_ta1 (V ("zit")) (("szq"::("vud"::(Nil)))) = true
sub_check_ta1 (V ("buf")) (("oem"::("ple"::(Nil)))) = true
Simplifying took 0.005904 seconds
Result : true
=================================================
Progress: 1037


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 27)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank:12)
case string_eq (string1) (string3)(rank:12)
=================================================
Progress: 1038


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 1039


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12)
=================================================
Progress: 1040


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
rewrite <- Case2 in goal at 0(rank:12)
rewrite <- Case2 in goal at 2(rank:12)
rewrite <- Case2 in goal at 3(rank:12)
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank:13)
rewrite Case1 in goal at 0(rank:20)
rewrite Case2 in goal at 0(rank:28)
rewrite <- Case2 in goal at 1(rank:12)
=================================================
Progress: 1041


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then string_eq (string2) (string1) else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string1) (string2) then string_eq (string2) (string1) else true(rank:13)
=================================================
Progress: 1042


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then string_eq (string2) (string3) else true(rank:13)
rewrite Case1 in goal at 0(rank:20)
=================================================
Progress: 1043


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string1) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then string_eq (string2) (string1) else true(rank:13)
=================================================
Progress: 1044


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 3(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank:13)
rewrite Case1 in goal at 0(rank:20)
=================================================
Progress: 1045


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case string_eq (string1) (string3)(rank:14)
rewrite <- Case1 in goal at 0(rank:21)
=================================================
Progress: 1046


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 1047


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case2 in goal at 0(rank:13)
rewrite <- Case2 in goal at 1(rank:13)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case2 in goal at 2(rank:13)
case if any_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1048


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then string_eq (string2) (string1) else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then string_eq (string2) (string1) else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1049


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then string_eq (string2) (string3) else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case2 in goal at 0(rank:13)
rewrite <- Case2 in goal at 1(rank:13)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case2 in goal at 2(rank:13)
case if any_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1050


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string1) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string1) else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case2 in goal at 0(rank:13)
rewrite <- Case2 in goal at 1(rank:13)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case2 in goal at 2(rank:13)
case if any_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1051


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 2(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1052


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case3 in goal at 0(rank:13)
rewrite <- Case3 in goal at 1(rank:13)
rewrite Case3 in goal at 0(rank:29)
rewrite Case3 in goal at 1(rank:29)
rewrite Case3 in goal at 2(rank:29)
rewrite Case3 in goal at 3(rank:29)
rewrite <- Case3 in goal at 2(rank:13)
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1053


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1054


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1055


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1056


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1057


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1058


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1059


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1060


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1061


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1062


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1063


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1064


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:13)
=================================================
Progress: 1065


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1066


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 12
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1067


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1068


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 9
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1069


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1070


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 9
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1071


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1072


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 8
Tactic List : 7
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 1(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case1 in goal at 2(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
rewrite <- Case3 in goal at 1(rank:20)
rewrite <- Case3 in goal at 2(rank:28)
=================================================
Progress: 1073


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1074


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 1075


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case4 at 0(rank:14)
=================================================
Progress: 1076


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string1) (string1) then false else true(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:14)
=================================================
Progress: 1077


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case4 at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:14)
=================================================
Progress: 1078


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:14)
=================================================
Progress: 1079


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case4 in goal at 0(rank:14)
=================================================
Progress: 1080


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 0
case if string_eq (string1) (string2) then string_eq (string2) (string1) else true
case if any_eq (string1) (string1) then false else true
rewrite <- Case1 in goal at 0
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if any_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
Model : string1: "pzy", string2: "jqu"
Model : string1: "gii", string2: "qfc"
Model : string1: "qnx", string2: "mou"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("jqu") ("pzy")
true = string_eq ("qfc") ("gii")
true = string_eq ("mou") ("qnx")
Simplifying took 0.004715 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if any_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1081


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if any_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)(rank : 0)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

---------------------------------------
forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 1082


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

---------------------------------------
forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
---------------------------------------
forall (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 1083


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
---------------------------------------
forall (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
---------------------------------------
if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 1084


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
---------------------------------------
if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11)
=================================================
Progress: 1085


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Cond2 : if string_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
Model : string1: "xje", string2: "rgj"
Model : string1: "htn", string2: "ioe"
Model : string1: "duq", string2: "aiu"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("rgj") ("xje")
true = string_eq ("ioe") ("htn")
true = string_eq ("aiu") ("duq")
Simplifying took 0.004128 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
End of Lemma List


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Cond2 : if string_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 1086


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Cond2 : if string_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)(rank : 0)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

---------------------------------------
forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro string1(rank:13)
=================================================
Progress: 1087


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

---------------------------------------
forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
>>> intro string1(rank : 13)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
---------------------------------------
forall (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro string2(rank:13)
=================================================
Progress: 1088


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
---------------------------------------
forall (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
>>> intro string2(rank : 13)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
---------------------------------------
if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:13)
=================================================
Progress: 1089


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
---------------------------------------
if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
>>> intro Cond1(rank : 13)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:13)
=================================================
Progress: 1090


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
>>> intro Cond2(rank : 13)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Cond2 : if string_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
Model : string1: "bie", string2: "pav"
Model : string1: "qyp", string2: "ujl"
Model : string1: "qzy", string2: "yog"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("pav") ("bie")
true = string_eq ("ujl") ("qyp")
true = string_eq ("yog") ("qzy")
Simplifying took 0.006011 seconds
Result : true
=================================================
Progress: 1091


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case4 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
case if any_eq (string3) (string1) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case4 at 0
rewrite <- Case1 in goal at 0
rewrite <- Case4 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), true = string_eq (string2) (string1)
Model : string1: "tll", string2: "dwj"
Model : string1: "ixc", string2: "cre"
Model : string1: "cug", string2: "cin"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("dwj") ("tll")
true = string_eq ("cre") ("ixc")
true = string_eq ("cin") ("cug")
Simplifying took 0.000490 seconds
Result : false
=================================================
Progress: 1092


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite <- Case2 in goal at 0(rank:12)
case if string_eq (string3) (string2) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite Case2 in goal at 0(rank:28)
=================================================
Progress: 1093


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string1) (string2) then false else true(rank:13)
=================================================
Progress: 1094


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite <- Case2 in goal at 0(rank:13)
rewrite Cond1 in goal at 0(rank:21)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:13)
rewrite <- Case2 in goal at 2(rank:13)
case if any_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 1095


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1096


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1097


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1098


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1099


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1100


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 10
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1101


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string1) (string1) then false else true(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:14)
=================================================
Progress: 1102


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:14)
=================================================
Progress: 1103


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
case if string_eq (string1) (string2) then false else true
case if any_eq (string1) (string1) then false else true
rewrite <- Case1 in goal at 0
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if any_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
Model : string1: "ouk", string2: "ggg"
Model : string1: "skw", string2: "mig"
Model : string1: "eww", string2: "mvn"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("ggg") ("ouk")
true = string_eq ("mig") ("skw")
true = string_eq ("mvn") ("eww")
Simplifying took 0.004024 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if any_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1104


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if any_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)(rank : 0)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

---------------------------------------
forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 1105


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

---------------------------------------
forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
---------------------------------------
forall (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 1106


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
---------------------------------------
forall (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
---------------------------------------
if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 1107


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
---------------------------------------
if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11)
=================================================
Progress: 1108


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then false else true = true
Cond2 : if string_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
Model : string1: "hsh", string2: "ydd"
Model : string1: "dwp", string2: "mpw"
Model : string1: "puu", string2: "wtp"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("ydd") ("hsh")
true = string_eq ("mpw") ("dwp")
true = string_eq ("wtp") ("puu")
Simplifying took 0.004045 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
End of Lemma List


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then false else true = true
Cond2 : if string_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 1109


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then false else true = true
Cond2 : if string_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)(rank : 0)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

---------------------------------------
forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro string1(rank:13)
=================================================
Progress: 1110


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

---------------------------------------
forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
>>> intro string1(rank : 13)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
---------------------------------------
forall (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro string2(rank:13)
=================================================
Progress: 1111


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
---------------------------------------
forall (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
>>> intro string2(rank : 13)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
---------------------------------------
if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:13)
=================================================
Progress: 1112


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
---------------------------------------
if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
>>> intro Cond1(rank : 13)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:13)
=================================================
Progress: 1113


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
>>> intro Cond2(rank : 13)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then false else true = true
Cond2 : if string_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
Model : string1: "oxk", string2: "ual"
Model : string1: "nev", string2: "tya"
Model : string1: "gjr", string2: "inc"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("ual") ("oxk")
true = string_eq ("tya") ("nev")
true = string_eq ("inc") ("gjr")
Simplifying took 0.003640 seconds
Result : true
=================================================
Progress: 1114


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string1) (string2) then false else true(rank:13)
=================================================
Progress: 1115


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite <- Case2 in goal at 0(rank:13)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
case if any_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 1116


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1117


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1118


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 10
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1119


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then false else true(rank:13)
=================================================
Progress: 1120


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 2(rank:29)
=================================================
Progress: 1121


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string1) (string1) then false else true(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:14)
=================================================
Progress: 1122


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:14)
=================================================
Progress: 1123


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 3
rewrite Case1 in goal at 0
case if string_eq (string3) (string2) then false else true
case if any_eq (string1) (string1) then false else true
rewrite <- Case1 in goal at 0
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), if any_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
Model : string1: "rxs", string2: "eou"
Model : string1: "bro", string2: "adl"
Model : string1: "qmj", string2: "vuw"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("eou") ("rxs")
true = string_eq ("adl") ("bro")
true = string_eq ("vuw") ("qmj")
Simplifying took 0.003374 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string2:string), if any_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1124


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), if any_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)(rank : 0)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

---------------------------------------
forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 1125


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

---------------------------------------
forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
---------------------------------------
forall (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 1126


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
---------------------------------------
forall (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
---------------------------------------
if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 1127


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
---------------------------------------
if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
Model : string1: "otx", string2: "iua"
Model : string1: "ifc", string2: "sfm"
Model : string1: "bxc", string2: "emx"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("iua") ("otx")
true = string_eq ("sfm") ("ifc")
true = string_eq ("emx") ("bxc")
Simplifying took 0.002682 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
End of Lemma List


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 1128


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)(rank : 0)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

---------------------------------------
forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro string1(rank:13)
=================================================
Progress: 1129


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

---------------------------------------
forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
>>> intro string1(rank : 13)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
---------------------------------------
forall (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro string2(rank:13)
=================================================
Progress: 1130


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
---------------------------------------
forall (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
>>> intro string2(rank : 13)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
---------------------------------------
if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:13)
=================================================
Progress: 1131


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
---------------------------------------
if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
>>> intro Cond1(rank : 13)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
Model : string1: "clf", string2: "inw"
Model : string1: "ana", string2: "upn"
Model : string1: "fuy", string2: "nsa"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("inw") ("clf")
true = string_eq ("upn") ("ana")
true = string_eq ("nsa") ("fuy")
Simplifying took 0.002188 seconds
Result : true
=================================================
Progress: 1132


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 1133


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 1134


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 1135


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case3 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 1136


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1137


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:14)
=================================================
Progress: 1138


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case4 at 0(rank:14)
=================================================
Progress: 1139


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case4 at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case4 in goal at 0(rank:14)
rewrite Case1 in goal at 0(rank:22)
=================================================
Progress: 1140


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case4 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
case if any_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case4 at 0
rewrite <- Case4 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), true = string_eq (string2) (string1)
Model : string1: "gio", string2: "rya"
Model : string1: "ght", string2: "zvf"
Model : string1: "tyw", string2: "mql"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("rya") ("gio")
true = string_eq ("zvf") ("ght")
true = string_eq ("mql") ("tyw")
Simplifying took 0.000807 seconds
Result : false
=================================================
Progress: 1141


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case3 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:29)
rewrite <- Case3 in goal at 2(rank:29)
=================================================
Progress: 1142


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1143


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case3 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "uay", string2: "tfw", string3: "ntd"
Model : string1: "xeh", string2: "xqg", string3: "frl"
Model : string1: "zfp", string2: "gnx", string3: "tvl"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("tfw") ("ntd") = string_eq ("uay") ("ntd")
string_eq ("xqg") ("frl") = string_eq ("xeh") ("frl")
string_eq ("gnx") ("tvl") = string_eq ("zfp") ("tvl")
Simplifying took 0.007660 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1144


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 1145


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 1146


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string3(rank:11)
=================================================
Progress: 1147


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 1148


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11)
=================================================
Progress: 1149


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:11)
=================================================
Progress: 1150


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:11)
=================================================
Progress: 1151


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond4(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Cond4 : string_eq (string1) (string3) = false
---------------------------------------
if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond5(rank:11)
=================================================
Progress: 1152


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Cond4 : string_eq (string1) (string3) = false
---------------------------------------
if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond5(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Cond4 : string_eq (string1) (string3) = false
Cond5 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
rewrite Cond2 in goal at 0(rank:27)
rewrite Cond4 in goal at 0(rank:27)
=================================================
Progress: 1153


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case1 in goal at 1(rank:29)
rewrite <- Case1 in goal at 2(rank:29)
=================================================
Progress: 1154


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "kbz", string2: "mnq", string3: "erd"
Model : string1: "ary", string2: "jel", string3: "wxs"
Model : string1: "ilq", string2: "lbe", string3: "uyi"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("kbz") ("erd") = string_eq ("mnq") ("erd")
string_eq ("ary") ("wxs") = string_eq ("jel") ("wxs")
string_eq ("ilq") ("uyi") = string_eq ("lbe") ("uyi")
Simplifying took 0.005111 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1155


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 1156


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 1157


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string3(rank:11)
=================================================
Progress: 1158


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 1159


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11)
=================================================
Progress: 1160


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:11)
=================================================
Progress: 1161


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:11)
=================================================
Progress: 1162


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond4(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Cond4 : string_eq (string1) (string3) = false
---------------------------------------
if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond5(rank:11)
=================================================
Progress: 1163


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Cond4 : string_eq (string1) (string3) = false
---------------------------------------
if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond5(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Cond4 : string_eq (string1) (string3) = false
Cond5 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
rewrite Cond2 in goal at 0(rank:27)
rewrite Cond4 in goal at 0(rank:27)
=================================================
Progress: 1164


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1165


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 22)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
case if any_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case4 at 0
rewrite Case1 in goal at 0
advanced_generalize done
=================================================
Progress: 1166


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 27)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank:12)
case string_eq (string1) (string3)(rank:12)
=================================================
Progress: 1167


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 1168


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12)
=================================================
Progress: 1169


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
rewrite <- Case2 in goal at 0(rank:12)
rewrite <- Case2 in goal at 2(rank:12)
rewrite <- Case2 in goal at 3(rank:12)
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank:13)
rewrite Case1 in goal at 0(rank:20)
rewrite Case2 in goal at 0(rank:28)
rewrite <- Case2 in goal at 1(rank:12)
=================================================
Progress: 1170


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then string_eq (string2) (string1) else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string1) (string2) then string_eq (string2) (string1) else true(rank:13)
=================================================
Progress: 1171


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then string_eq (string2) (string3) else true(rank:13)
rewrite Case1 in goal at 0(rank:20)
=================================================
Progress: 1172


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string1) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then string_eq (string2) (string1) else true(rank:13)
=================================================
Progress: 1173


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 3(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank:13)
rewrite Case1 in goal at 0(rank:20)
=================================================
Progress: 1174


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case string_eq (string1) (string3)(rank:14)
rewrite <- Case1 in goal at 0(rank:21)
=================================================
Progress: 1175


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 1176


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case2 in goal at 0(rank:13)
rewrite <- Case2 in goal at 1(rank:13)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case2 in goal at 2(rank:13)
case if any_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1177


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then string_eq (string2) (string1) else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then string_eq (string2) (string1) else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1178


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then string_eq (string2) (string3) else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case2 in goal at 0(rank:13)
rewrite <- Case2 in goal at 1(rank:13)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case2 in goal at 2(rank:13)
case if any_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1179


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string1) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string1) else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case2 in goal at 0(rank:13)
rewrite <- Case2 in goal at 1(rank:13)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case2 in goal at 2(rank:13)
case if any_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1180


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 2(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1181


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case3 in goal at 0(rank:13)
rewrite <- Case3 in goal at 1(rank:13)
rewrite Case3 in goal at 0(rank:29)
rewrite Case3 in goal at 1(rank:29)
rewrite Case3 in goal at 2(rank:29)
rewrite Case3 in goal at 3(rank:29)
rewrite <- Case3 in goal at 2(rank:13)
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1182


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1183


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1184


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1185


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1186


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1187


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1188


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1189


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1190


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1191


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1192


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1193


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:13)
=================================================
Progress: 1194


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1195


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 12
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1196


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1197


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 9
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1198


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1199


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 9
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1200


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1201


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 8
Tactic List : 7
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 1(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case1 in goal at 2(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
rewrite <- Case3 in goal at 1(rank:20)
rewrite <- Case3 in goal at 2(rank:28)
=================================================
Progress: 1202


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1203


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 1204


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case4 at 0(rank:14)
=================================================
Progress: 1205


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string1) (string1) then false else true(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:14)
=================================================
Progress: 1206


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case4 at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:14)
=================================================
Progress: 1207


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:14)
=================================================
Progress: 1208


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case4 in goal at 0(rank:14)
=================================================
Progress: 1209


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 0
case if string_eq (string1) (string2) then string_eq (string2) (string1) else true
case if any_eq (string1) (string1) then false else true
rewrite <- Case1 in goal at 0
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if any_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
Model : string1: "wgh", string2: "xvi"
Model : string1: "iiz", string2: "rzb"
Model : string1: "htg", string2: "sdd"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("xvi") ("wgh")
true = string_eq ("rzb") ("iiz")
true = string_eq ("sdd") ("htg")
Simplifying took 0.003943 seconds
Result : true
=================================================
Progress: 1210


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case4 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
case if any_eq (string3) (string1) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case4 at 0
rewrite <- Case1 in goal at 0
rewrite <- Case4 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), true = string_eq (string2) (string1)
Model : string1: "kms", string2: "pyj"
Model : string1: "quj", string2: "kid"
Model : string1: "qek", string2: "euq"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("pyj") ("kms")
true = string_eq ("kid") ("quj")
true = string_eq ("euq") ("qek")
Simplifying took 0.000596 seconds
Result : false
=================================================
Progress: 1211


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite <- Case2 in goal at 0(rank:12)
case if string_eq (string3) (string2) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite Case2 in goal at 0(rank:28)
=================================================
Progress: 1212


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string1) (string2) then false else true(rank:13)
=================================================
Progress: 1213


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite <- Case2 in goal at 0(rank:13)
rewrite Cond1 in goal at 0(rank:21)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:13)
rewrite <- Case2 in goal at 2(rank:13)
case if any_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 1214


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1215


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1216


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1217


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1218


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1219


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 10
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1220


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string1) (string1) then false else true(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:14)
=================================================
Progress: 1221


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:14)
=================================================
Progress: 1222


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
case if string_eq (string1) (string2) then false else true
case if any_eq (string1) (string1) then false else true
rewrite <- Case1 in goal at 0
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if any_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
Model : string1: "sqd", string2: "adv"
Model : string1: "zkn", string2: "sgi"
Model : string1: "qvf", string2: "grh"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("adv") ("sqd")
true = string_eq ("sgi") ("zkn")
true = string_eq ("grh") ("qvf")
Simplifying took 0.003760 seconds
Result : true
=================================================
Progress: 1223


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string1) (string2) then false else true(rank:13)
=================================================
Progress: 1224


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite <- Case2 in goal at 0(rank:13)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
case if any_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 1225


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1226


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1227


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 10
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1228


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then false else true(rank:13)
=================================================
Progress: 1229


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 2(rank:29)
=================================================
Progress: 1230


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string1) (string1) then false else true(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:14)
=================================================
Progress: 1231


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:14)
=================================================
Progress: 1232


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 3
rewrite Case1 in goal at 0
case if string_eq (string3) (string2) then false else true
case if any_eq (string1) (string1) then false else true
rewrite <- Case1 in goal at 0
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), if any_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
Model : string1: "whf", string2: "fdm"
Model : string1: "mos", string2: "ixp"
Model : string1: "bwe", string2: "mjo"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("fdm") ("whf")
true = string_eq ("ixp") ("mos")
true = string_eq ("mjo") ("bwe")
Simplifying took 0.002398 seconds
Result : true
=================================================
Progress: 1233


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 1234


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 1235


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 1236


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case3 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 1237


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1238


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:14)
=================================================
Progress: 1239


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case4 at 0(rank:14)
=================================================
Progress: 1240


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case4 at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case4 in goal at 0(rank:14)
rewrite Case1 in goal at 0(rank:22)
=================================================
Progress: 1241


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case4 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
case if any_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case4 at 0
rewrite <- Case4 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), true = string_eq (string2) (string1)
Model : string1: "xlc", string2: "ptt"
Model : string1: "fom", string2: "ljv"
Model : string1: "ayx", string2: "nte"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("ptt") ("xlc")
true = string_eq ("ljv") ("fom")
true = string_eq ("nte") ("ayx")
Simplifying took 0.000579 seconds
Result : false
=================================================
Progress: 1242


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case3 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:29)
rewrite <- Case3 in goal at 2(rank:29)
=================================================
Progress: 1243


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1244


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case3 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "bts", string2: "aey", string3: "kky"
Model : string1: "rvk", string2: "dsc", string3: "mse"
Model : string1: "euz", string2: "gpp", string3: "xas"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("aey") ("kky") = string_eq ("bts") ("kky")
string_eq ("dsc") ("mse") = string_eq ("rvk") ("mse")
string_eq ("gpp") ("xas") = string_eq ("euz") ("xas")
Simplifying took 0.004700 seconds
Result : true
=================================================
Progress: 1245


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case1 in goal at 1(rank:29)
rewrite <- Case1 in goal at 2(rank:29)
=================================================
Progress: 1246


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "jks", string2: "ssc", string3: "ofz"
Model : string1: "lxr", string2: "iuq", string3: "yoj"
Model : string1: "iex", string2: "tdb", string3: "eyx"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("jks") ("ofz") = string_eq ("ssc") ("ofz")
string_eq ("lxr") ("yoj") = string_eq ("iuq") ("yoj")
string_eq ("iex") ("eyx") = string_eq ("tdb") ("eyx")
Simplifying took 0.006344 seconds
Result : true
=================================================
Progress: 1247


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1248


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 22)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
case if any_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case4 at 0
rewrite Case1 in goal at 0
advanced_generalize done
=================================================
Progress: 1249


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 27)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank:12)
=================================================
Progress: 1250


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 1(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 1251


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 1252


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1253


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 1
rewrite Case1 in goal at 0(rank:12)
=================================================
Progress: 1254


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:12)
=================================================
Progress: 1255


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case1 in goal at 0
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
case if any_eq (string3) (string1) then false else true
rewrite Case1 in goal at 0
reflexivity
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string3:string), string_eq (string1) (string3) = false->if any_eq (string3) (string1) then false else true = false -> string_eq (string1) (string3) = true
Model : string1: "dzd", string3: "aqm"
Model : string1: "lpv", string3: "hjo"
Model : string1: "bjg", string3: "fpy"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("dzd") ("aqm") = true
string_eq ("lpv") ("hjo") = true
string_eq ("bjg") ("fpy") = true
Simplifying took 0.000956 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string3:string), string_eq (string1) (string3) = false->if any_eq (string3) (string1) then false else true = false -> string_eq (string1) (string3) = true
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1256


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string3:string), string_eq (string1) (string3) = false->if any_eq (string3) (string1) then false else true = false -> string_eq (string1) (string3) = true(rank : 0)


1st goal of : forall (string1:string) (string2:string), string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 1257


1st goal of : forall (string1:string) (string2:string), string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (string1:string) (string2:string), string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 1258


1st goal of : forall (string1:string) (string2:string), string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (string1:string) (string2:string), string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 1259


1st goal of : forall (string1:string) (string2:string), string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (string1:string) (string2:string), string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11)
=================================================
Progress: 1260


1st goal of : forall (string1:string) (string2:string), string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11)


1st goal of : forall (string1:string) (string2:string), string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : string_eq (string1) (string2) = false
Cond2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:11)
=================================================
Progress: 1261


1st goal of : forall (string1:string) (string2:string), string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : string_eq (string1) (string2) = false
Cond2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 11)


1st goal of : forall (string1:string) (string2:string), string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : string_eq (string1) (string2) = false
Cond2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1262


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 27)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank:12)
=================================================
Progress: 1263


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 1(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case1 in goal at 2(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case2 in goal at 1(rank:20)
rewrite <- Case2 in goal at 2(rank:28)
=================================================
Progress: 1264


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1265


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 1266


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 1267


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 1268


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 1269


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case2 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 1270


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:29)
rewrite <- Case2 in goal at 2(rank:29)
=================================================
Progress: 1271


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1272


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case1 in goal at 2
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
rewrite <- Case1 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "yhq", string2: "olj", string3: "nnv"
Model : string1: "jdb", string2: "flx", string3: "iuf"
Model : string1: "yfj", string2: "ail", string3: "thw"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("olj") ("nnv") = string_eq ("yhq") ("nnv")
string_eq ("flx") ("iuf") = string_eq ("jdb") ("iuf")
string_eq ("ail") ("thw") = string_eq ("yfj") ("thw")
Simplifying took 0.006307 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1273


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 1274


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 1275


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string3(rank:11)
=================================================
Progress: 1276


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 1277


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11)
=================================================
Progress: 1278


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
---------------------------------------
string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:11)
=================================================
Progress: 1279


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
---------------------------------------
string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
---------------------------------------
if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:11)
=================================================
Progress: 1280


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
---------------------------------------
if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond4(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
Cond4 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond5(rank:11)
=================================================
Progress: 1281


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
Cond4 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond5(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
Cond4 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Cond5 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
rewrite Cond2 in goal at 0(rank:27)
rewrite Cond3 in goal at 0(rank:27)
=================================================
Progress: 1282


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case1 in goal at 1(rank:29)
rewrite <- Case1 in goal at 2(rank:29)
=================================================
Progress: 1283


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case1 in goal at 2
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
rewrite <- Case2 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "yuf", string2: "nqk", string3: "qwx"
Model : string1: "hud", string2: "mmu", string3: "vhg"
Model : string1: "vru", string2: "xhf", string3: "fll"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("yuf") ("qwx") = string_eq ("nqk") ("qwx")
string_eq ("hud") ("vhg") = string_eq ("mmu") ("vhg")
string_eq ("vru") ("fll") = string_eq ("xhf") ("fll")
Simplifying took 0.007307 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1284


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 1285


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 1286


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string3(rank:11)
=================================================
Progress: 1287


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 1288


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11)
=================================================
Progress: 1289


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
---------------------------------------
string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:11)
=================================================
Progress: 1290


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
---------------------------------------
string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
---------------------------------------
if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:11)
=================================================
Progress: 1291


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
---------------------------------------
if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond4(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
Cond4 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond5(rank:11)
=================================================
Progress: 1292


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
Cond4 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond5(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
Cond4 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Cond5 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
rewrite Cond2 in goal at 0(rank:27)
rewrite Cond3 in goal at 0(rank:27)
=================================================
Progress: 1293


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1294


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 27)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string1) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then string_eq (string1) (string3) else true(rank:12)
=================================================
Progress: 1295


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string1) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string1) (string3) else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Case2 in goal at 0(rank:28)
rewrite Case2 in goal at 1(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 1296


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case2 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 1297


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1298


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 1
rewrite Case2 in goal at 0(rank:12)
=================================================
Progress: 1299


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:12)
=================================================
Progress: 1300


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case2 in goal at 0
case if string_eq (string3) (string2) then string_eq (string1) (string3) else true
case if any_eq (string3) (string1) then false else true
rewrite Case2 in goal at 0
reflexivity
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string2:string) (string3:string), string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true
Model : string2: "kfb", string3: "uzc"
Model : string2: "hpo", string3: "nxc"
Model : string2: "cwn", string3: "ryq"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("kfb") ("uzc") = true
string_eq ("hpo") ("nxc") = true
string_eq ("cwn") ("ryq") = true
Simplifying took 0.001183 seconds
Result : false
=================================================
Progress: 1301


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 27)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string1) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then string_eq (string1) (string3) else true(rank:12)
=================================================
Progress: 1302


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string1) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string1) (string3) else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 1(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case1 in goal at 2(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case2 in goal at 1(rank:20)
rewrite <- Case2 in goal at 2(rank:28)
=================================================
Progress: 1303


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1304


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 1305


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 1306


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 1307


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 1308


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case2 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 1309


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:29)
rewrite <- Case2 in goal at 2(rank:29)
=================================================
Progress: 1310


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1311


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case2 in goal at 2
case if string_eq (string3) (string2) then string_eq (string1) (string3) else true
rewrite <- Case1 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "emc", string2: "fxs", string3: "xfs"
Model : string1: "kzr", string2: "vvq", string3: "cjk"
Model : string1: "qvu", string2: "qgu", string3: "jei"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("fxs") ("xfs") = string_eq ("emc") ("xfs")
string_eq ("vvq") ("cjk") = string_eq ("kzr") ("cjk")
string_eq ("qgu") ("jei") = string_eq ("qvu") ("jei")
Simplifying took 0.005569 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1312


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 1313


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 1314


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string3(rank:11)
=================================================
Progress: 1315


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 1316


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11)
=================================================
Progress: 1317


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
---------------------------------------
string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:11)
=================================================
Progress: 1318


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
---------------------------------------
string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
---------------------------------------
if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:11)
=================================================
Progress: 1319


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
---------------------------------------
if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond4(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
Cond4 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond5(rank:11)
=================================================
Progress: 1320


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
Cond4 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond5(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
Cond4 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Cond5 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
rewrite Cond2 in goal at 0(rank:27)
rewrite Cond3 in goal at 0(rank:27)
=================================================
Progress: 1321


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case1 in goal at 1(rank:29)
rewrite <- Case1 in goal at 2(rank:29)
=================================================
Progress: 1322


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case2 in goal at 2
case if string_eq (string3) (string2) then string_eq (string1) (string3) else true
rewrite <- Case2 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "ogm", string2: "fbb", string3: "yks"
Model : string1: "vun", string2: "syp", string3: "wcu"
Model : string1: "uyp", string2: "ogr", string3: "sng"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("ogm") ("yks") = string_eq ("fbb") ("yks")
string_eq ("vun") ("wcu") = string_eq ("syp") ("wcu")
string_eq ("uyp") ("sng") = string_eq ("ogr") ("sng")
Simplifying took 0.010664 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1323


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 1324


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 1325


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string3(rank:11)
=================================================
Progress: 1326


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 1327


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11)
=================================================
Progress: 1328


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
---------------------------------------
string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:11)
=================================================
Progress: 1329


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
---------------------------------------
string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
---------------------------------------
if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:11)
=================================================
Progress: 1330


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
---------------------------------------
if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond4(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
Cond4 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond5(rank:11)
=================================================
Progress: 1331


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
Cond4 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond5(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
Cond4 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Cond5 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
rewrite Cond2 in goal at 0(rank:27)
rewrite Cond3 in goal at 0(rank:27)
=================================================
Progress: 1332


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1333


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 27)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank:12)
=================================================
Progress: 1334


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 1(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 1335


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 1336


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1337


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 1
rewrite Case1 in goal at 0(rank:12)
=================================================
Progress: 1338


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:12)
=================================================
Progress: 1339


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case1 in goal at 0
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
case if any_eq (string3) (string1) then false else true
rewrite Case1 in goal at 0
reflexivity
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string3:string), string_eq (string1) (string3) = false->if any_eq (string3) (string1) then false else true = false -> string_eq (string1) (string3) = true
Model : string1: "dhh", string3: "qso"
Model : string1: "sdg", string3: "mwz"
Model : string1: "yxs", string3: "rkr"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("dhh") ("qso") = true
string_eq ("sdg") ("mwz") = true
string_eq ("yxs") ("rkr") = true
Simplifying took 0.002691 seconds
Result : true
=================================================
Progress: 1340


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 27)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank:12)
=================================================
Progress: 1341


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 1(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case1 in goal at 2(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case2 in goal at 1(rank:20)
rewrite <- Case2 in goal at 2(rank:28)
=================================================
Progress: 1342


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1343


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 1344


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 1345


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 1346


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 1347


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case2 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 1348


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:29)
rewrite <- Case2 in goal at 2(rank:29)
=================================================
Progress: 1349


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1350


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case1 in goal at 2
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
rewrite <- Case1 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "xox", string2: "sxh", string3: "fwi"
Model : string1: "fkk", string2: "mdx", string3: "uls"
Model : string1: "tgm", string2: "wve", string3: "rnl"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("sxh") ("fwi") = string_eq ("xox") ("fwi")
string_eq ("mdx") ("uls") = string_eq ("fkk") ("uls")
string_eq ("wve") ("rnl") = string_eq ("tgm") ("rnl")
Simplifying took 0.008510 seconds
Result : true
=================================================
Progress: 1351


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case1 in goal at 1(rank:29)
rewrite <- Case1 in goal at 2(rank:29)
=================================================
Progress: 1352


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case1 in goal at 2
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
rewrite <- Case2 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "asn", string2: "mhv", string3: "gii"
Model : string1: "xlx", string2: "rvx", string3: "qkb"
Model : string1: "nab", string2: "hck", string3: "bpw"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("asn") ("gii") = string_eq ("mhv") ("gii")
string_eq ("xlx") ("qkb") = string_eq ("rvx") ("qkb")
string_eq ("nab") ("bpw") = string_eq ("hck") ("bpw")
Simplifying took 0.005618 seconds
Result : true
=================================================
Progress: 1353


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1354


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 27)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string1) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then string_eq (string1) (string3) else true(rank:12)
=================================================
Progress: 1355


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string1) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string1) (string3) else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Case2 in goal at 0(rank:28)
rewrite Case2 in goal at 1(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 1356


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case2 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 1357


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1358


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 1
rewrite Case2 in goal at 0(rank:12)
=================================================
Progress: 1359


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:12)
=================================================
Progress: 1360


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case2 in goal at 0
case if string_eq (string3) (string2) then string_eq (string1) (string3) else true
case if any_eq (string3) (string1) then false else true
rewrite Case2 in goal at 0
reflexivity
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string2:string) (string3:string), string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true
Model : string2: "cru", string3: "mef"
Model : string2: "qiq", string3: "xpu"
Model : string2: "uya", string3: "bom"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("cru") ("mef") = true
string_eq ("qiq") ("xpu") = true
string_eq ("uya") ("bom") = true
Simplifying took 0.001226 seconds
Result : false
=================================================
Progress: 1361


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 27)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string1) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then string_eq (string1) (string3) else true(rank:12)
=================================================
Progress: 1362


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string1) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string1) (string3) else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 1(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case1 in goal at 2(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case2 in goal at 1(rank:20)
rewrite <- Case2 in goal at 2(rank:28)
=================================================
Progress: 1363


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1364


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 1365


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 1366


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 1367


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 1368


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case2 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 1369


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:29)
rewrite <- Case2 in goal at 2(rank:29)
=================================================
Progress: 1370


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1371


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case2 in goal at 2
case if string_eq (string3) (string2) then string_eq (string1) (string3) else true
rewrite <- Case1 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "njt", string2: "xfm", string3: "kff"
Model : string1: "jeo", string2: "zyr", string3: "nrw"
Model : string1: "rfb", string2: "qcb", string3: "ali"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("xfm") ("kff") = string_eq ("njt") ("kff")
string_eq ("zyr") ("nrw") = string_eq ("jeo") ("nrw")
string_eq ("qcb") ("ali") = string_eq ("rfb") ("ali")
Simplifying took 0.005991 seconds
Result : true
=================================================
Progress: 1372


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case1 in goal at 1(rank:29)
rewrite <- Case1 in goal at 2(rank:29)
=================================================
Progress: 1373


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case2 in goal at 2
case if string_eq (string3) (string2) then string_eq (string1) (string3) else true
rewrite <- Case2 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "lyu", string2: "ccn", string3: "slx"
Model : string1: "lup", string2: "bgv", string3: "pun"
Model : string1: "bky", string2: "ubz", string3: "yuj"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
string_eq ("lyu") ("slx") = string_eq ("ccn") ("slx")
string_eq ("lup") ("pun") = string_eq ("bgv") ("pun")
string_eq ("bky") ("yuj") = string_eq ("ubz") ("yuj")
Simplifying took 0.006709 seconds
Result : true
=================================================
Progress: 1374


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1375


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 27)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank:12)
case string_eq (string1) (string3)(rank:12)
=================================================
Progress: 1376


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 1377


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12)
=================================================
Progress: 1378


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
rewrite <- Case2 in goal at 0(rank:12)
rewrite <- Case2 in goal at 2(rank:12)
rewrite <- Case2 in goal at 3(rank:12)
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank:13)
rewrite Case1 in goal at 0(rank:20)
rewrite Case2 in goal at 0(rank:28)
rewrite <- Case2 in goal at 1(rank:12)
=================================================
Progress: 1379


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then string_eq (string2) (string1) else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string1) (string2) then string_eq (string2) (string1) else true(rank:13)
=================================================
Progress: 1380


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then string_eq (string2) (string3) else true(rank:13)
rewrite Case1 in goal at 0(rank:20)
=================================================
Progress: 1381


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string1) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then string_eq (string2) (string1) else true(rank:13)
=================================================
Progress: 1382


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 3(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank:13)
rewrite Case1 in goal at 0(rank:20)
=================================================
Progress: 1383


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case string_eq (string1) (string3)(rank:14)
rewrite <- Case1 in goal at 0(rank:21)
=================================================
Progress: 1384


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 1385


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case2 in goal at 0(rank:13)
rewrite <- Case2 in goal at 1(rank:13)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case2 in goal at 2(rank:13)
case if any_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1386


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then string_eq (string2) (string1) else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then string_eq (string2) (string1) else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1387


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then string_eq (string2) (string3) else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case2 in goal at 0(rank:13)
rewrite <- Case2 in goal at 1(rank:13)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case2 in goal at 2(rank:13)
case if any_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1388


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string1) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string1) else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case2 in goal at 0(rank:13)
rewrite <- Case2 in goal at 1(rank:13)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case2 in goal at 2(rank:13)
case if any_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1389


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 2(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1390


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case3 in goal at 0(rank:13)
rewrite <- Case3 in goal at 1(rank:13)
rewrite Case3 in goal at 0(rank:29)
rewrite Case3 in goal at 1(rank:29)
rewrite Case3 in goal at 2(rank:29)
rewrite Case3 in goal at 3(rank:29)
rewrite <- Case3 in goal at 2(rank:13)
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1391


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1392


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1393


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1394


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1395


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1396


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1397


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1398


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1399


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1400


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1401


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1402


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:13)
=================================================
Progress: 1403


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1404


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 12
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1405


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1406


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 9
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1407


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1408


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 9
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1409


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1410


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 8
Tactic List : 7
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 1(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case1 in goal at 2(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
rewrite <- Case3 in goal at 1(rank:20)
rewrite <- Case3 in goal at 2(rank:28)
=================================================
Progress: 1411


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1412


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 1413


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case4 at 0(rank:14)
=================================================
Progress: 1414


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string1) (string1) then false else true(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:14)
=================================================
Progress: 1415


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case4 at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:14)
=================================================
Progress: 1416


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:14)
=================================================
Progress: 1417


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case4 in goal at 0(rank:14)
=================================================
Progress: 1418


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 0
case if string_eq (string1) (string2) then string_eq (string2) (string1) else true
case if any_eq (string1) (string1) then false else true
rewrite <- Case1 in goal at 0
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if any_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
Model : string1: "gsv", string2: "uud"
Model : string1: "rkj", string2: "pib"
Model : string1: "omt", string2: "lro"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("uud") ("gsv")
true = string_eq ("pib") ("rkj")
true = string_eq ("lro") ("omt")
Simplifying took 0.004046 seconds
Result : true
=================================================
Progress: 1419


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case4 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
case if any_eq (string3) (string1) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case4 at 0
rewrite <- Case1 in goal at 0
rewrite <- Case4 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), true = string_eq (string2) (string1)
Model : string1: "vzm", string2: "rif"
Model : string1: "dnn", string2: "hyy"
Model : string1: "ugf", string2: "aan"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("rif") ("vzm")
true = string_eq ("hyy") ("dnn")
true = string_eq ("aan") ("ugf")
Simplifying took 0.000546 seconds
Result : false
=================================================
Progress: 1420


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite <- Case2 in goal at 0(rank:12)
case if string_eq (string3) (string2) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite Case2 in goal at 0(rank:28)
=================================================
Progress: 1421


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string1) (string2) then false else true(rank:13)
=================================================
Progress: 1422


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite <- Case2 in goal at 0(rank:13)
rewrite Cond1 in goal at 0(rank:21)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:13)
rewrite <- Case2 in goal at 2(rank:13)
case if any_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 1423


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1424


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1425


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1426


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1427


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1428


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 10
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1429


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string1) (string1) then false else true(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:14)
=================================================
Progress: 1430


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:14)
=================================================
Progress: 1431


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
case if string_eq (string1) (string2) then false else true
case if any_eq (string1) (string1) then false else true
rewrite <- Case1 in goal at 0
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if any_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
Model : string1: "mqd", string2: "ktu"
Model : string1: "zav", string2: "hqu"
Model : string1: "yon", string2: "okk"
Substituting variables...
Simplifying conditions and property...
let rec getStn m =
match (m) with
| V var -> (var::(Nil))
| P n m' -> filter (aux (n)) (getStn (m'))
| C m1 m2 -> (getStn (m1) @ getStn (m2))
let check lambda =
if list_eq (getStn (lambda)) ((Nil)) then true else false
prop list:
true = string_eq ("ktu") ("mqd")
true = string_eq ("hqu") ("zav")
true = string_eq ("okk") ("yon")
Simplifying took 0.004935 seconds
Result : true
=================================================
Progress: 1432


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string1) (string2) then false else true(rank:13)
=================================================
Progress: 1433


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite <- Case2 in goal at 0(rank:13)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
case if any_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 1434


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1435


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
