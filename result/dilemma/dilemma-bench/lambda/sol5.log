Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (l:lambda), check_ta1 (l) = check (l)(rank : 0)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:3)
=================================================
Progress: 2


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) ((Nil)) = if list_eq (getStn (lambda1)) ((Nil)) then true else false

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:5)
=================================================
Progress: 3


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) ((Nil)) = if list_eq (getStn (lambda1)) ((Nil)) then true else false

0 goal(s) more...

0 conjecture(s) more...
>>> induction lambda1(rank : 5)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
sub_check_ta1 (V (string1)) ((Nil)) = if list_eq (getStn (V (string1))) ((Nil)) then true else false

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:4)
=================================================
Progress: 4


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
sub_check_ta1 (V (string1)) ((Nil)) = if list_eq (getStn (V (string1))) ((Nil)) then true else false

2 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 4)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = if list_eq (getStn (lambda2)) ((Nil)) then true else false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (P (string1) (lambda2)) ((Nil)) = if list_eq (getStn (P (string1) (lambda2))) ((Nil)) then true else false

1 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:4)
=================================================
Progress: 5


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = if list_eq (getStn (lambda2)) ((Nil)) then true else false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (P (string1) (lambda2)) ((Nil)) = if list_eq (getStn (P (string1) (lambda2))) ((Nil)) then true else false

1 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 4)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = if list_eq (getStn (lambda2)) ((Nil)) then true else false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) then true else false

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))(rank:5)
=================================================
Progress: 6


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = if list_eq (getStn (lambda2)) ((Nil)) then true else false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) then true else false

1 goal(s) more...

0 conjecture(s) more...
>>> case list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))(rank : 5)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = if list_eq (getStn (lambda2)) ((Nil)) then true else false
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = true

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:5)
=================================================
Progress: 7


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = if list_eq (getStn (lambda2)) ((Nil)) then true else false
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = true

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 5)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = if list_eq (getStn (lambda2)) ((Nil)) then true else false
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (lambda2:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Model : lambda2: V ("jpu"), string1: "vny"
Model : lambda2: V ("wrc"), string1: "oqx"
Model : lambda2: V ("yfu"), string1: "uou"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.006039 seconds
Result : true
New Env

;;
Lemma List
forall (lambda2:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = if list_eq (getStn (lambda2)) ((Nil)) then true else false
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))

2 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 8


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = if list_eq (getStn (lambda2)) ((Nil)) then true else false
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))

2 goal(s) more...

0 conjecture(s) more...
>>> assert forall (lambda2:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
intro lambda1(rank:5)
intro string1(rank:5)
induction lambda1(rank:15)
=================================================
Progress: 9


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> intro lambda1(rank : 5)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string1(rank:5)
=================================================
Progress: 10


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 5)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:7)
=================================================
Progress: 11


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 5)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:5)
=================================================
Progress: 12


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 5)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:5)
=================================================
Progress: 13


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 5)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
advanced_generalize done
Lemma : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
Model : lambda1: V ("gdw"), string1: "kun"
Model : lambda1: C (V ("yfj")) (P ("jhq") (C (V ("atz")) (V ("kji")))), string1: "isa"
Model : lambda1: P ("jfn") (V ("trc")), string1: "zsh"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.007340 seconds
Result : true
New Env

;;
Lemma List
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 14


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

1 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
intro lambda1(rank:7)
intro string1(rank:7)
induction lambda1(rank:17)
=================================================
Progress: 15


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> induction lambda1(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7)
=================================================
Progress: 16


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro lambda1(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7)
=================================================
Progress: 17


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:9)
=================================================
Progress: 18


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7)
=================================================
Progress: 19


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7)
=================================================
Progress: 20


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
case if any_eq (string2) (string1) then false else true(rank:8)
rewrite Cond1 in goal at 0(rank:15)
case string_eq (string1) (string2)(rank:8)
=================================================
Progress: 21


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- Cond1 in goal at 0(rank:7)
=================================================
Progress: 22


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
advanced_generalize done
Lemma : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
Model : lambda1: V ("emk"), string1: "nls"
Model : lambda1: V ("tvk"), string1: "cut"
Model : lambda1: V ("srh"), string1: "noi"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.004443 seconds
Result : true
New Env

;;
Lemma List
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 23


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
intro lambda1(rank:9)
intro string1(rank:9)
induction lambda1(rank:19)
=================================================
Progress: 24


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> case if any_eq (string2) (string1) then false else true(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : if any_eq (string2) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:7)
=================================================
Progress: 25


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : if any_eq (string2) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = false

3 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if any_eq (string2) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string2)(rank:8)
=================================================
Progress: 26


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:8)
=================================================
Progress: 27


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if any_eq (string2) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 28


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:7)
=================================================
Progress: 29


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case if any_eq (string2) (string1) then false else true
discriminate
case string_eq (string1) (string2)
reflexivity
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
Model : string1: "siq", string2: "ize"
Model : string1: "aqk", string2: "zmy"
Model : string1: "ypr", string2: "fid"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.002171 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 30


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true(rank : 0)


1st goal of : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7)
=================================================
Progress: 31


1st goal of : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7)


1st goal of : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:7)
=================================================
Progress: 32


1st goal of : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 7)


1st goal of : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7)
=================================================
Progress: 33


1st goal of : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7)


1st goal of : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
---------------------------------------
if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:7)
=================================================
Progress: 34


1st goal of : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
---------------------------------------
if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 7)


1st goal of : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:7)
=================================================
Progress: 35


1st goal of : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond3(rank : 7)


1st goal of : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : if string_eq (string2) (string1) then false else true = false
Cond3 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond3 in goal at 0(rank:7)
=================================================
Progress: 36


1st goal of : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : if string_eq (string2) (string1) then false else true = false
Cond3 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond3 in goal at 0(rank : 7)


1st goal of : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : if string_eq (string2) (string1) then false else true = false
Cond3 : string_eq (string1) (string2) = false
---------------------------------------
false = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 37


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
rewrite <- Case1 in goal at 0(rank:8)
rewrite <- Case1 in goal at 1(rank:8)
rewrite Case1 in goal at 0(rank:24)
rewrite Case1 in goal at 1(rank:24)
rewrite Case1 in goal at 2(rank:24)
rewrite Case1 in goal at 3(rank:24)
rewrite <- Case1 in goal at 2(rank:8)
case if string_eq (string2) (string1) then false else true(rank:9)
rewrite Cond1 in goal at 0(rank:16)
=================================================
Progress: 38


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:8)
=================================================
Progress: 39


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:8)
=================================================
Progress: 40


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 2
advanced_generalize done
Lemma : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
Model : string1: "dcv", string2: "hfs"
Model : string1: "ovw", string2: "wyy"
Model : string1: "oqg", string2: "usi"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.002234 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 41


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))(rank : 0)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7)
=================================================
Progress: 42


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
---------------------------------------
forall (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:7)
=================================================
Progress: 43


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
---------------------------------------
forall (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 7)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
---------------------------------------
list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7)
=================================================
Progress: 44


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
---------------------------------------
list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:7)
=================================================
Progress: 45


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 7)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
case if string_eq (string2) (string1) then false else true(rank:8)
rewrite Cond2 in goal at 0(rank:23)
rewrite Cond2 in goal at 1(rank:23)
rewrite Cond2 in goal at 2(rank:23)
rewrite Cond2 in goal at 3(rank:23)
rewrite <- Cond2 in goal at 0(rank:23)
=================================================
Progress: 46


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 47


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 13
Tactic List : 5
case if string_eq (string2) (string1) then false else true(rank:8)
rewrite Cond1 in goal at 0(rank:15)
rewrite <- Case1 in goal at 0(rank:23)
rewrite <- Case1 in goal at 1(rank:15)
rewrite <- Case1 in goal at 2(rank:23)
=================================================
Progress: 48


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> case if string_eq (string2) (string1) then false else true(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
false = false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 49


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
false = false

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:7)
=================================================
Progress: 50


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string2) (string1) then false else true
reflexivity
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
Model : string1: "xrz", string2: "eru"
Model : string1: "cer", string2: "dnv"
Model : string1: "emy", string2: "jjy"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.001511 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 51


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true(rank : 0)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7)
=================================================
Progress: 52


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:7)
=================================================
Progress: 53


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 7)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7)
=================================================
Progress: 54


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
---------------------------------------
string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:7)
=================================================
Progress: 55


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
---------------------------------------
string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 7)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:7)
=================================================
Progress: 56


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond3(rank : 7)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
Cond3 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond2 in goal at 0(rank:7)
=================================================
Progress: 57


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
Cond3 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 7)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
Cond3 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 58


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 59


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro lambda1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:9)
=================================================
Progress: 60


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:11)
=================================================
Progress: 61


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = true

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9)
=================================================
Progress: 62


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9)
=================================================
Progress: 63


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:10)
=================================================
Progress: 64


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:9)
=================================================
Progress: 65


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string1 : string
Cond1 : list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
Lemma : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
Model : lambda1: V ("qiv"), string1: "pya"
Model : lambda1: V ("szo"), string1: "qwc"
Model : lambda1: P ("txr") (V ("tpz")), string1: "xfb"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.005581 seconds
Result : true
=================================================
Progress: 66


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 67


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:9)
=================================================
Progress: 68


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string1) (string2)
reflexivity
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
Model : string1: "pws", string2: "arm"
Model : string1: "vzd", string2: "abr"
Model : string1: "cyz", string2: "fnx"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.001250 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 69


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true(rank : 0)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:9)
=================================================
Progress: 70


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 9)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string2(rank:9)
=================================================
Progress: 71


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 9)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9)
=================================================
Progress: 72


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9)
=================================================
Progress: 73


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 9)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Cond2 in goal at 0(rank:9)
=================================================
Progress: 74


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 9)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
false = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 75


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> induction lambda1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11)
=================================================
Progress: 76


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 77


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string2) (string1) then false else true(rank:12)
rewrite Cond1 in goal at 0(rank:19)
case string_eq (string1) (string2)(rank:12)
=================================================
Progress: 78


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string2) (string1) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : if any_eq (string2) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:11)
=================================================
Progress: 79


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : if any_eq (string2) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if any_eq (string2) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string2)(rank:12)
=================================================
Progress: 80


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12)
=================================================
Progress: 81


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if any_eq (string2) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 82


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:11)
=================================================
Progress: 83


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case if any_eq (string2) (string1) then false else true
discriminate
case string_eq (string1) (string2)
reflexivity
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
Model : string1: "tqf", string2: "cst"
Model : string1: "nrh", string2: "kiw"
Model : string1: "gxt", string2: "lco"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.001850 seconds
Result : true
=================================================
Progress: 84


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case1 in goal at 0(rank:12)
rewrite <- Case1 in goal at 1(rank:12)
rewrite Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 1(rank:28)
rewrite Case1 in goal at 2(rank:28)
rewrite Case1 in goal at 3(rank:28)
rewrite <- Case1 in goal at 2(rank:12)
case if string_eq (string2) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
=================================================
Progress: 85


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12)
=================================================
Progress: 86


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12)
=================================================
Progress: 87


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 2
advanced_generalize done
Lemma : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
Model : string1: "aai", string2: "pzr"
Model : string1: "gug", string2: "gwu"
Model : string1: "qxz", string2: "ors"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.003152 seconds
Result : true
=================================================
Progress: 88


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 89


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 7
Tactic List : 5
case if string_eq (string2) (string1) then false else true(rank:12)
rewrite Cond1 in goal at 0(rank:19)
rewrite <- Case1 in goal at 0(rank:27)
rewrite <- Case1 in goal at 1(rank:19)
rewrite <- Case1 in goal at 2(rank:27)
=================================================
Progress: 90


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string2) (string1) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
false = false

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 91


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
false = false

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:11)
=================================================
Progress: 92


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string2) (string1) then false else true
reflexivity
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
Model : string1: "fwu", string2: "aaq"
Model : string1: "wmu", string2: "miz"
Model : string1: "cib", string2: "fkj"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.001587 seconds
Result : true
=================================================
Progress: 93


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> induction lambda1(rank : 15)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7)
=================================================
Progress: 94


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string1(rank:7)
=================================================
Progress: 95


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7)
=================================================
Progress: 96


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
case if any_eq (string2) (string1) then false else true(rank:8)
rewrite Cond1 in goal at 0(rank:15)
case string_eq (string1) (string2)(rank:8)
=================================================
Progress: 97


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> case if any_eq (string2) (string1) then false else true(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : if any_eq (string2) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:7)
=================================================
Progress: 98


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : if any_eq (string2) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = false

3 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : if any_eq (string2) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string2)(rank:8)
=================================================
Progress: 99


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:8)
=================================================
Progress: 100


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : if any_eq (string2) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 101


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:7)
=================================================
Progress: 102


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case if any_eq (string2) (string1) then false else true
discriminate
case string_eq (string1) (string2)
reflexivity
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
Model : string1: "ibz", string2: "cnq"
Model : string1: "fxv", string2: "xko"
Model : string1: "nfd", string2: "uws"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.002022 seconds
Result : true
=================================================
Progress: 103


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
rewrite <- Case1 in goal at 0(rank:8)
rewrite <- Case1 in goal at 1(rank:8)
rewrite Case1 in goal at 0(rank:24)
rewrite Case1 in goal at 1(rank:24)
rewrite Case1 in goal at 2(rank:24)
rewrite Case1 in goal at 3(rank:24)
rewrite <- Case1 in goal at 2(rank:8)
case if string_eq (string2) (string1) then false else true(rank:9)
rewrite Cond1 in goal at 0(rank:16)
=================================================
Progress: 104


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:8)
=================================================
Progress: 105


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:8)
=================================================
Progress: 106


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 2
advanced_generalize done
Lemma : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
Model : string1: "xfw", string2: "uay"
Model : string1: "edo", string2: "gjm"
Model : string1: "kpi", string2: "mrf"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.002136 seconds
Result : true
=================================================
Progress: 107


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 108


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 7
Tactic List : 5
case if string_eq (string2) (string1) then false else true(rank:8)
rewrite Cond1 in goal at 0(rank:15)
rewrite <- Case1 in goal at 0(rank:23)
rewrite <- Case1 in goal at 1(rank:15)
rewrite <- Case1 in goal at 2(rank:23)
=================================================
Progress: 109


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> case if string_eq (string2) (string1) then false else true(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
false = false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 110


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
false = false

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:7)
=================================================
Progress: 111


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string2) (string1) then false else true
reflexivity
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
Model : string1: "fxf", string2: "bir"
Model : string1: "cxj", string2: "jhv"
Model : string1: "quv", string2: "yvo"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.001778 seconds
Result : true
=================================================
Progress: 112


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 15)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:8)
=================================================
Progress: 113


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:8)
=================================================
Progress: 114


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 115


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 15)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:7)
=================================================
Progress: 116


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite Cond1 in goal at 0
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
Model : string1: "idk", string2: "sch"
Model : string1: "gfr", string2: "lce"
Model : string1: "ary", string2: "gkq"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.001605 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 117


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true(rank : 0)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7)
=================================================
Progress: 118


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:7)
=================================================
Progress: 119


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 7)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7)
=================================================
Progress: 120


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:7)
=================================================
Progress: 121


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 7)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Cond2 in goal at 0(rank:7)
=================================================
Progress: 122


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 7)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
false = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 123


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 15)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case if string_eq (string2) (string1) then false else true(rank:8)
=================================================
Progress: 124


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> case if string_eq (string2) (string1) then false else true(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:16)
rewrite Cond1 in goal at 0(rank:16)
rewrite <- Case1 in goal at 0(rank:16)
=================================================
Progress: 125


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 15)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:8)
=================================================
Progress: 126


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:8)
=================================================
Progress: 127


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 128


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 15)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:7)
=================================================
Progress: 129


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite Cond1 in goal at 0
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
Model : string1: "dvq", string2: "qpr"
Model : string1: "lhq", string2: "yti"
Model : string1: "aub", string2: "tdd"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.001878 seconds
Result : true
=================================================
Progress: 130


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 15)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case if string_eq (string2) (string1) then false else true(rank:8)
=================================================
Progress: 131


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> case if string_eq (string2) (string1) then false else true(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:16)
rewrite Cond1 in goal at 0(rank:16)
rewrite <- Case1 in goal at 0(rank:16)
=================================================
Progress: 132


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 16)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
false = false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:24)
rewrite Cond1 in goal at 1(rank:24)
rewrite Cond1 in goal at 2(rank:24)
=================================================
Progress: 133


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 16)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string2) (string1) then false else true
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true
Model : string1: "jlf", string2: "psg"
Model : string1: "smx", string2: "gxy"
Model : string1: "hdo", string2: "unt"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.002193 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 134


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true(rank : 0)


1st goal of : forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
discriminate(rank:8)
=================================================
Progress: 135


1st goal of : forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

0 goal(s) more...

2 conjecture(s) more...
>>> discriminate(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
discriminate(rank:7)
=================================================
Progress: 136


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 4
Tactic List : 2
rewrite Case1 in goal at 0(rank:15)
rewrite lemma3 in goal at 0(rank:18)
=================================================
Progress: 137


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 15)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string2) (string1) then false else true
rewrite Cond1 in goal at 0
assert forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true
discriminate
discriminate
rewrite Case1 in goal at 0
advanced_generalize done
=================================================
Progress: 138


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 16)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
false = false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:24)
rewrite Cond1 in goal at 1(rank:24)
rewrite Cond1 in goal at 2(rank:24)
=================================================
Progress: 139


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 16)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string2) (string1) then false else true
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true
Model : string1: "fro", string2: "nhw"
Model : string1: "lvj", string2: "utg"
Model : string1: "xes", string2: "mxd"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.003026 seconds
Result : true
=================================================
Progress: 140


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 16)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = string_eq (string1) (string2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 141


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 17)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 142


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = true

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:9)
=================================================
Progress: 143


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9)
=================================================
Progress: 144


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:10)
=================================================
Progress: 145


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 146


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:9)
=================================================
Progress: 147


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string1) (string2)
reflexivity
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
Model : string1: "vna", string2: "qyq"
Model : string1: "pjn", string2: "hjv"
Model : string1: "ved", string2: "spv"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.003476 seconds
Result : true
=================================================
Progress: 148


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 18)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
true = true

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 149


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
true = true

5 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

4 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:9)
=================================================
Progress: 150


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:12)
=================================================
Progress: 151


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
true = true

7 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 152


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
true = true

7 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

6 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:11)
=================================================
Progress: 153


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

6 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

6 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:14)
=================================================
Progress: 154


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

6 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
true = true

9 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13)
=================================================
Progress: 155


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
true = true

9 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

8 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:13)
=================================================
Progress: 156


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

8 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

8 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:16)
=================================================
Progress: 157


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

8 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 16)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
true = true

11 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:15)
=================================================
Progress: 158


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
true = true

11 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 15)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

10 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:15)
=================================================
Progress: 159


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

10 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 15)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

10 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:18)
=================================================
Progress: 160


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

10 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 18)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
true = true

13 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:17)
=================================================
Progress: 161


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
true = true

13 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 17)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

12 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:17)
=================================================
Progress: 162


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

12 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 17)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

12 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:20)
=================================================
Progress: 163


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> induction lambda1(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11)
=================================================
Progress: 164


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil)) = true -> sub_check_ta1 (V (string2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (V (string2)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 165


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 166


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string2) (string1) then false else true(rank:12)
rewrite Cond1 in goal at 0(rank:19)
case string_eq (string1) (string2)(rank:12)
=================================================
Progress: 167


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string2) (string1) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : if any_eq (string2) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:11)
=================================================
Progress: 168


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : if any_eq (string2) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : if any_eq (string2) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string2)(rank:12)
=================================================
Progress: 169


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12)
=================================================
Progress: 170


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : if any_eq (string2) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 171


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:11)
=================================================
Progress: 172


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string2) (string1) then false else true = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case if any_eq (string2) (string1) then false else true
discriminate
case string_eq (string1) (string2)
reflexivity
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), true = true->if string_eq (string2) (string1) then false else true = false->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
Model : string1: "wwu", string2: "xjj"
Model : string1: "yaw", string2: "iec"
Model : string1: "ond", string2: "oed"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.004368 seconds
Result : true
=================================================
Progress: 173


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case1 in goal at 0(rank:12)
rewrite <- Case1 in goal at 1(rank:12)
rewrite Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 1(rank:28)
rewrite Case1 in goal at 2(rank:28)
rewrite Case1 in goal at 3(rank:28)
rewrite <- Case1 in goal at 2(rank:12)
case if string_eq (string2) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
=================================================
Progress: 174


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12)
=================================================
Progress: 175


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12)
=================================================
Progress: 176


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 2
advanced_generalize done
Lemma : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string1 = string2 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
Model : string1: "rec", string2: "zyy"
Model : string1: "ddm", string2: "ayx"
Model : string1: "cjf", string2: "yli"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.002187 seconds
Result : true
=================================================
Progress: 177


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 178


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 7
Tactic List : 5
case if string_eq (string2) (string1) then false else true(rank:12)
rewrite Cond1 in goal at 0(rank:19)
rewrite <- Case1 in goal at 0(rank:27)
rewrite <- Case1 in goal at 1(rank:19)
rewrite <- Case1 in goal at 2(rank:27)
=================================================
Progress: 179


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string2) (string1) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
false = false

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 180


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
false = false

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:11)
=================================================
Progress: 181


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string2) (string1) then false else true
reflexivity
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
Model : string1: "adg", string2: "llp"
Model : string1: "gjr", string2: "igr"
Model : string1: "jih", string2: "odv"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.001388 seconds
Result : true
=================================================
Progress: 182


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:12)
=================================================
Progress: 183


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12)
=================================================
Progress: 184


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 185


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:11)
=================================================
Progress: 186


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite Cond1 in goal at 0
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
Model : string1: "ukc", string2: "qxj"
Model : string1: "byk", string2: "gjz"
Model : string1: "ajo", string2: "kvx"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.001864 seconds
Result : true
=================================================
Progress: 187


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string2) (string1) then false else true(rank:12)
=================================================
Progress: 188


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string2) (string1) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:20)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:20)
=================================================
Progress: 189


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:12)
=================================================
Progress: 190


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if any_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12)
=================================================
Progress: 191


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string1 = string2
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 192


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:11)
=================================================
Progress: 193


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite Cond1 in goal at 0
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
Model : string1: "bjl", string2: "twv"
Model : string1: "zrh", string2: "zch"
Model : string1: "yyz", string2: "gez"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.003486 seconds
Result : true
=================================================
Progress: 194


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string2) (string1) then false else true(rank:12)
=================================================
Progress: 195


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string2) (string1) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:20)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:20)
=================================================
Progress: 196


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

12 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
true = true

15 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:19)
=================================================
Progress: 197


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
true = true

15 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

14 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:19)
=================================================
Progress: 198


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

14 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

14 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:22)
=================================================
Progress: 199


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
false = false

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:28)
rewrite Cond1 in goal at 1(rank:28)
rewrite Cond1 in goal at 2(rank:28)
=================================================
Progress: 200


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string2) (string1) then false else true
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true
Model : string1: "izu", string2: "dus"
Model : string1: "igx", string2: "mbw"
Model : string1: "nbc", string2: "ptd"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.001669 seconds
Result : true
=================================================
Progress: 201


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = string_eq (string1) (string2)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 202


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
false = false

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:28)
rewrite Cond1 in goal at 1(rank:28)
rewrite Cond1 in goal at 2(rank:28)
=================================================
Progress: 203


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string2) (string1) then false else true
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true
Model : string1: "okn", string2: "xrg"
Model : string1: "nuh", string2: "mse"
Model : string1: "lwv", string2: "oqc"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.002770 seconds
Result : true
=================================================
Progress: 204


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string2) = string_eq (string1) (string2)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 205


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

14 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 22)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
true = true

17 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:21)
=================================================
Progress: 206


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
true = true

17 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

16 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:21)
=================================================
Progress: 207


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

16 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

16 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:24)
=================================================
Progress: 208


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 23)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then string_eq (string1) (string2) else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case if string_eq (string2) (string1) then string_eq (string1) (string2) else true(rank:8)
=================================================
Progress: 209


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then string_eq (string1) (string2) else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> case if string_eq (string2) (string1) then string_eq (string1) (string2) else true(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Case1 in goal at 0(rank:16)
rewrite <- Case1 in goal at 0(rank:16)
=================================================
Progress: 210


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 16)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
false = false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 211


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
false = false

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 1
Tactic List : 1
rewrite Case1 in goal at 0(rank:7)
=================================================
Progress: 212


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:7)
=================================================
Progress: 213


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string1)(rank:8)
=================================================
Progress: 214


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string_eq (string2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:8)
=================================================
Progress: 215


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string_eq (string2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite <- Case3 in goal at 0(rank:8)
rewrite Case1 in goal at 0(rank:16)
rewrite Case3 in goal at 0(rank:24)
=================================================
Progress: 216


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:8)
=================================================
Progress: 217


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 218


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : true = false
Case3 : string_eq (string2) (string1) = false
---------------------------------------
true = true

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 2
Tactic List : 1
reflexivity(rank:6)
=================================================
Progress: 219


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : true = false
Case3 : string_eq (string2) (string1) = false
---------------------------------------
true = true

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 6)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil)) = true -> sub_check_ta1 (P (string2) (lambda2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 2
Tactic List : 1
simpl in goal(rank:6)
=================================================
Progress: 220


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil)) = true -> sub_check_ta1 (P (string2) (lambda2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:6)
=================================================
Progress: 221


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 6)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:6)
=================================================
Progress: 222


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 6)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = true

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (lambda2:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = true
Model : lambda2: P ("yhe") (V ("nxg")), string1: "drn", string2: "pxb"
Model : lambda2: V ("fcz"), string1: "nvs", string2: "gve"
Model : lambda2: V ("kmq"), string1: "dwo", string2: "jks"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.004980 seconds
Result : true
New Env

;;
Lemma List
forall (lambda2:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = true
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = true

1 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 223


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = true

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (lambda2:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = true(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
intro lambda1(rank:7)
intro string1(rank:7)
intro string2(rank:7)
induction lambda1(rank:17)
=================================================
Progress: 224


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro lambda1(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7)
=================================================
Progress: 225


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro string2(rank:7)
induction lambda1(rank:17)
=================================================
Progress: 226


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:9)
=================================================
Progress: 227


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:7)
=================================================
Progress: 228


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:9)
=================================================
Progress: 229


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7)
=================================================
Progress: 230


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- Cond1 in goal at 0(rank:7)
=================================================
Progress: 231


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
advanced_generalize done
Lemma : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
Model : lambda1: V ("ndj"), string1: "egv", string2: "kxq"
Model : lambda1: V ("pgp"), string1: "sqc", string2: "cum"
Model : lambda1: V ("dqu"), string1: "tbv", string2: "ikx"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.006140 seconds
Result : true
New Env

;;
Lemma List
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 232


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

2 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
intro lambda1(rank:9)
intro string1(rank:9)
intro string2(rank:9)
induction lambda1(rank:19)
=================================================
Progress: 233


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 234


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 235


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro lambda1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:9)
=================================================
Progress: 236


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro string2(rank:9)
induction lambda1(rank:19)
=================================================
Progress: 237


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:11)
=================================================
Progress: 238


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:9)
=================================================
Progress: 239


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9)
=================================================
Progress: 240


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string2(rank:9)
=================================================
Progress: 241


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:11)
=================================================
Progress: 242


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9)
=================================================
Progress: 243


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:10)
=================================================
Progress: 244


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9)
=================================================
Progress: 245


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:10)
=================================================
Progress: 246


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:9)
=================================================
Progress: 247


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
Lemma : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
Model : lambda1: V ("yaz"), string1: "rha", string2: "jzm"
Model : lambda1: V ("cer"), string1: "yjs", string2: "sfi"
Model : lambda1: V ("veu"), string1: "gze", string2: "dla"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.004032 seconds
Result : true
New Env

;;
Lemma List
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 248


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 4
intro lambda1(rank:11)
intro string1(rank:11)
intro string2(rank:11)
induction lambda1(rank:21)
=================================================
Progress: 249


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 250


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:10)
=================================================
Progress: 251


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 252


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:10)
=================================================
Progress: 253


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 254


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:25)
rewrite <- Case2 in goal at 0(rank:25)
=================================================
Progress: 255


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 256


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:25)
rewrite <- Case2 in goal at 0(rank:25)
=================================================
Progress: 257


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> induction lambda1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11)
=================================================
Progress: 258


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> induction lambda1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11)
=================================================
Progress: 259


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro lambda1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 260


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
intro string2(rank:11)
induction lambda1(rank:21)
=================================================
Progress: 261


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:13)
=================================================
Progress: 262


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 263


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 264


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 265


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:13)
=================================================
Progress: 266


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 267


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string3) (string2) then false else true(rank:12)
rewrite Cond1 in goal at 0(rank:19)
case string_eq (string2) (string3)(rank:12)
=================================================
Progress: 268


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 269


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string3) (string2) then false else true(rank:12)
rewrite Cond1 in goal at 0(rank:19)
case string_eq (string2) (string3)(rank:12)
=================================================
Progress: 270


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite <- Cond1 in goal at 0(rank:11)
=================================================
Progress: 271


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
advanced_generalize done
Lemma : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
Model : lambda1: V ("vcm"), string1: "jap", string2: "vug"
Model : lambda1: V ("nkj"), string1: "yak", string2: "sur"
Model : lambda1: V ("vnv"), string1: "vqy", string2: "pir"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.009016 seconds
Result : true
=================================================
Progress: 272


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
case string_eq (string2) (string3)(rank:13)
=================================================
Progress: 273


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12)
=================================================
Progress: 274


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
case string_eq (string2) (string3)(rank:13)
=================================================
Progress: 275


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12)
=================================================
Progress: 276


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case1 in goal at 0(rank:12)
rewrite <- Case1 in goal at 1(rank:12)
rewrite Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 1(rank:28)
rewrite Case1 in goal at 2(rank:28)
rewrite Case1 in goal at 3(rank:28)
rewrite <- Case1 in goal at 2(rank:12)
case if string_eq (string3) (string2) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
=================================================
Progress: 277


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case1 in goal at 0(rank:12)
rewrite <- Case1 in goal at 1(rank:12)
rewrite Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 1(rank:28)
rewrite Case1 in goal at 2(rank:28)
rewrite Case1 in goal at 3(rank:28)
rewrite <- Case1 in goal at 2(rank:12)
case if string_eq (string3) (string2) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
=================================================
Progress: 278


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12)
=================================================
Progress: 279


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12)
=================================================
Progress: 280


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then false else true(rank:13)
=================================================
Progress: 281


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12)
=================================================
Progress: 282


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12)
=================================================
Progress: 283


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then false else true(rank:13)
=================================================
Progress: 284


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 285


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 8
Tactic List : 4
case if string_eq (string3) (string2) then false else true(rank:12)
case string_eq (string1) (string3)(rank:12)
rewrite Cond1 in goal at 0(rank:19)
rewrite <- Case1 in goal at 0(rank:27)
=================================================
Progress: 286


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 287


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 8
Tactic List : 4
case if string_eq (string3) (string2) then false else true(rank:12)
case string_eq (string1) (string3)(rank:12)
rewrite Cond1 in goal at 0(rank:19)
rewrite <- Case1 in goal at 0(rank:27)
=================================================
Progress: 288


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
case if any_eq (string3) (string1) then false else true(rank:13)
case string_eq (string1) (string3)(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 289


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12)
=================================================
Progress: 290


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
case if any_eq (string3) (string1) then false else true(rank:13)
case string_eq (string1) (string3)(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 291


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12)
=================================================
Progress: 292


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
rewrite <- Case2 in goal at 0(rank:12)
rewrite <- Case2 in goal at 1(rank:12)
rewrite <- Case2 in goal at 2(rank:12)
case if string_eq (string3) (string2) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite Case2 in goal at 0(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 293


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
rewrite <- Case2 in goal at 0(rank:12)
rewrite <- Case2 in goal at 1(rank:12)
rewrite <- Case2 in goal at 2(rank:12)
case if string_eq (string3) (string2) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite Case2 in goal at 0(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 294


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 295


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 296


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 297


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 298


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 299


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 300


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
---------------------------------------
forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
>>> induction lambda1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13)
=================================================
Progress: 301


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
---------------------------------------
forall (lambda1:lambda), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
>>> induction lambda1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13)
=================================================
Progress: 302


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 303


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string2) (string3)(rank:13)
=================================================
Progress: 304


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:13)
=================================================
Progress: 305


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 306


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string2) (string3)(rank:13)
=================================================
Progress: 307


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:13)
=================================================
Progress: 308


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 309


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 310


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 311


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 312


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 313


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 314


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite <- Case2 in goal at 0(rank:13)
rewrite Cond1 in goal at 0(rank:21)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:13)
rewrite <- Case2 in goal at 2(rank:13)
case if any_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 315


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite <- Case2 in goal at 0(rank:13)
rewrite Cond1 in goal at 0(rank:21)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:13)
rewrite <- Case2 in goal at 2(rank:13)
case if any_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 316


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 317


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite <- Case2 in goal at 0(rank:13)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
case if any_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 318


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 2(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 319


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 320


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite <- Case2 in goal at 0(rank:13)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
case if any_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 321


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 2(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 322


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:13)
=================================================
Progress: 323


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:13)
=================================================
Progress: 324


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 325


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 326


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
rewrite <- Case2 in goal at 0(rank:13)
rewrite <- Case2 in goal at 1(rank:13)
rewrite <- Case2 in goal at 2(rank:13)
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite Cond1 in goal at 0(rank:21)
=================================================
Progress: 327


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 328


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 329


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
rewrite <- Case2 in goal at 0(rank:13)
rewrite <- Case2 in goal at 1(rank:13)
rewrite <- Case2 in goal at 2(rank:13)
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite Cond1 in goal at 0(rank:21)
=================================================
Progress: 330


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 331


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case4 in goal at 0(rank:28)
=================================================
Progress: 332


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite <- Case3 in goal at 0(rank:13)
rewrite Cond1 in goal at 0(rank:21)
rewrite Case3 in goal at 0(rank:29)
rewrite Case3 in goal at 1(rank:29)
rewrite Case3 in goal at 2(rank:29)
rewrite Case3 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:13)
rewrite <- Case3 in goal at 2(rank:13)
case if string_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 333


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 334


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case4 in goal at 0(rank:28)
=================================================
Progress: 335


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite <- Case3 in goal at 0(rank:13)
rewrite Cond1 in goal at 0(rank:21)
rewrite Case3 in goal at 0(rank:29)
rewrite Case3 in goal at 1(rank:29)
rewrite Case3 in goal at 2(rank:29)
rewrite Case3 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:13)
rewrite <- Case3 in goal at 2(rank:13)
case if string_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 336


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 337


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 338


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 339


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 340


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 341


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 342


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 343


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 344


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:13)
=================================================
Progress: 345


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:14)
=================================================
Progress: 346


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 347


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
Case4 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case3 in goal at 0(rank:28)
rewrite <- Case4 in goal at 0(rank:28)
=================================================
Progress: 348


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string2) (string1) then false else true(rank:14)
=================================================
Progress: 349


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 1
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
Model : string1: "nlq", string2: "osk", string3: "srd"
Model : string1: "tkw", string2: "hpg", string3: "zsd"
Model : string1: "xzf", string2: "gjn", string3: "xnu"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.004595 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 350


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 351


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 352


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string3(rank:11)
=================================================
Progress: 353


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
>>> intro string3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 354


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11)
=================================================
Progress: 355


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:11)
=================================================
Progress: 356


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : if string_eq (string3) (string2) then false else true = true
Cond3 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
case if string_eq (string2) (string1) then false else true(rank:12)
rewrite Cond3 in goal at 0(rank:27)
rewrite <- Cond3 in goal at 0(rank:27)
=================================================
Progress: 357


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : if string_eq (string3) (string2) then false else true = true
Cond3 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
>>> case if string_eq (string2) (string1) then false else true(rank : 12)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : if string_eq (string3) (string2) then false else true = true
Cond3 : string2 = string3
Case1 : if string_eq (string2) (string1) then false else true = true
---------------------------------------
true = false

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 358


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 2
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
Model : string1: "hle", string2: "ugf", string3: "qol"
Model : string1: "sti", string2: "qjv", string3: "wbu"
Model : string1: "rtb", string2: "pyw", string3: "hak"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.003719 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 359


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 360


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 361


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string3(rank:11)
=================================================
Progress: 362


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
>>> intro string3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 363


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11)
=================================================
Progress: 364


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:11)
=================================================
Progress: 365


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : if string_eq (string3) (string2) then false else true = true
Cond3 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
case if string_eq (string3) (string1) then false else true(rank:12)
rewrite Cond3 in goal at 0(rank:27)
rewrite <- Cond3 in goal at 0(rank:27)
=================================================
Progress: 366


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : if string_eq (string3) (string2) then false else true = true
Cond3 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

0 goal(s) more...

4 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 12)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : false = true
Cond2 : if string_eq (string3) (string2) then false else true = true
Cond3 : string2 = string3
Case1 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
true = false

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
discriminate(rank:11)
=================================================
Progress: 367


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : false = true
Cond2 : if string_eq (string3) (string2) then false else true = true
Cond3 : string2 = string3
Case1 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
true = false

1 goal(s) more...

4 conjecture(s) more...
>>> discriminate(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : true = true
Cond2 : if string_eq (string3) (string2) then false else true = true
Cond3 : string2 = string3
Case1 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

0 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
reflexivity(rank:13)
=================================================
Progress: 368


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 369


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
Case4 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case3 in goal at 0(rank:28)
rewrite <- Case4 in goal at 0(rank:28)
=================================================
Progress: 370


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string2) (string1) then false else true(rank:14)
=================================================
Progress: 371


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 1
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
Model : string1: "fhh", string2: "qjn", string3: "ice"
Model : string1: "pxu", string2: "kzw", string3: "asi"
Model : string1: "jku", string2: "hbt", string3: "jla"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.002287 seconds
Result : true
=================================================
Progress: 372


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 2
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
Model : string1: "nji", string2: "cwn", string3: "jgj"
Model : string1: "qxi", string2: "onv", string3: "hew"
Model : string1: "bwr", string2: "ndo", string3: "yht"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.002800 seconds
Result : true
=================================================
Progress: 373


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 374


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 375


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:13)
=================================================
Progress: 376


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 377


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 378


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:13)
=================================================
Progress: 379


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 380


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 13
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 381


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 18
Tactic List : 8
case if string_eq (string3) (string2) then false else true(rank:12)
rewrite Cond1 in goal at 0(rank:19)
rewrite <- Case1 in goal at 1(rank:19)
rewrite <- Case1 in goal at 2(rank:27)
rewrite <- Case2 in goal at 1(rank:19)
rewrite <- Case2 in goal at 0(rank:27)
rewrite <- Case1 in goal at 0(rank:27)
rewrite <- Case2 in goal at 2(rank:27)
=================================================
Progress: 382


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 8
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 1(rank:20)
rewrite <- Case1 in goal at 2(rank:28)
rewrite <- Case2 in goal at 1(rank:20)
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 2(rank:28)
=================================================
Progress: 383


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 384


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 13
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 385


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 18
Tactic List : 8
case if string_eq (string3) (string2) then false else true(rank:12)
rewrite Cond1 in goal at 0(rank:19)
rewrite <- Case1 in goal at 1(rank:19)
rewrite <- Case1 in goal at 2(rank:27)
rewrite <- Case2 in goal at 1(rank:19)
rewrite <- Case2 in goal at 0(rank:27)
rewrite <- Case1 in goal at 0(rank:27)
rewrite <- Case2 in goal at 2(rank:27)
=================================================
Progress: 386


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 8
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 1(rank:20)
rewrite <- Case1 in goal at 2(rank:28)
rewrite <- Case2 in goal at 1(rank:20)
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 2(rank:28)
=================================================
Progress: 387


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:14)
=================================================
Progress: 388


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
string1 : string
string2 : string
string3 : string
Cond1 : true = true
Cond2 : if string_eq (string3) (string2) then false else true = true
Cond3 : string2 = string3
Case1 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

0 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 1
case if string_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 389


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 390


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 9
Tactic List : 8
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 1(rank:20)
rewrite <- Case1 in goal at 2(rank:28)
rewrite <- Case3 in goal at 1(rank:20)
rewrite <- Case3 in goal at 0(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case3 in goal at 2(rank:28)
=================================================
Progress: 391


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 392


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 9
Tactic List : 8
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 1(rank:20)
rewrite <- Case1 in goal at 2(rank:28)
rewrite <- Case3 in goal at 1(rank:20)
rewrite <- Case3 in goal at 0(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case3 in goal at 2(rank:28)
=================================================
Progress: 393


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 394


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 395


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 396


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 397


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 398


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 399


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 400


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 401


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:13)
=================================================
Progress: 402


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 403


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 5
Tactic List : 4
case if string_eq (string3) (string1) then false else true(rank:13)
case string_eq (string1) (string3)(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 404


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 405


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 406


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 407


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 408


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case4 in goal at 0(rank:28)
=================================================
Progress: 409


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite <- Case3 in goal at 0(rank:13)
rewrite Cond1 in goal at 0(rank:21)
rewrite Case3 in goal at 0(rank:29)
rewrite Case3 in goal at 1(rank:29)
rewrite Case3 in goal at 2(rank:29)
rewrite Case3 in goal at 3(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:13)
rewrite <- Case3 in goal at 2(rank:13)
case if string_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 410


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 411


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 412


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:13)
=================================================
Progress: 413


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 414


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 9
Tactic List : 8
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case2 in goal at 1(rank:20)
rewrite <- Case2 in goal at 2(rank:28)
rewrite <- Case3 in goal at 1(rank:20)
rewrite <- Case3 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case3 in goal at 2(rank:28)
=================================================
Progress: 415


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 416


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 417


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:13)
=================================================
Progress: 418


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 419


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 4
case if string_eq (string3) (string1) then false else true(rank:13)
case string_eq (string1) (string3)(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 420


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 421


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 422


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 423


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 424


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case4 in goal at 0(rank:28)
=================================================
Progress: 425


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite <- Case3 in goal at 0(rank:13)
rewrite Cond1 in goal at 0(rank:21)
rewrite Case3 in goal at 0(rank:29)
rewrite Case3 in goal at 1(rank:29)
rewrite Case3 in goal at 2(rank:29)
rewrite Case3 in goal at 3(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:13)
rewrite <- Case3 in goal at 2(rank:13)
case if string_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 426


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 427


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 428


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:13)
=================================================
Progress: 429


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 430


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 9
Tactic List : 8
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case2 in goal at 1(rank:20)
rewrite <- Case2 in goal at 2(rank:28)
rewrite <- Case3 in goal at 1(rank:20)
rewrite <- Case3 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case3 in goal at 2(rank:28)
=================================================
Progress: 431


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 432


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 433


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13)
=================================================
Progress: 434


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:14)
=================================================
Progress: 435


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13)
=================================================
Progress: 436


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:14)
=================================================
Progress: 437


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13)
=================================================
Progress: 438


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
=================================================
Progress: 439


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13)
=================================================
Progress: 440


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
=================================================
Progress: 441


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 17)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 442


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:9)
=================================================
Progress: 443


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:9)
=================================================
Progress: 444


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9)
=================================================
Progress: 445


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:10)
=================================================
Progress: 446


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 447


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:10)
=================================================
Progress: 448


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 449


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:25)
rewrite <- Case2 in goal at 0(rank:25)
=================================================
Progress: 450


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 17)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 451


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:9)
=================================================
Progress: 452


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9)
=================================================
Progress: 453


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:10)
=================================================
Progress: 454


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 455


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:10)
=================================================
Progress: 456


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 457


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:25)
rewrite <- Case2 in goal at 0(rank:25)
=================================================
Progress: 458


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> induction lambda1(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11)
=================================================
Progress: 459


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 460


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 461


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 462


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string3) (string2) then false else true(rank:12)
rewrite Cond1 in goal at 0(rank:19)
case string_eq (string2) (string3)(rank:12)
=================================================
Progress: 463


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
case string_eq (string2) (string3)(rank:13)
=================================================
Progress: 464


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12)
=================================================
Progress: 465


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case1 in goal at 0(rank:12)
rewrite <- Case1 in goal at 1(rank:12)
rewrite Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 1(rank:28)
rewrite Case1 in goal at 2(rank:28)
rewrite Case1 in goal at 3(rank:28)
rewrite <- Case1 in goal at 2(rank:12)
case if string_eq (string3) (string2) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
=================================================
Progress: 466


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12)
=================================================
Progress: 467


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12)
=================================================
Progress: 468


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then false else true(rank:13)
=================================================
Progress: 469


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 470


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 8
Tactic List : 4
case if string_eq (string3) (string2) then false else true(rank:12)
case string_eq (string1) (string3)(rank:12)
rewrite Cond1 in goal at 0(rank:19)
rewrite <- Case1 in goal at 0(rank:27)
=================================================
Progress: 471


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
case if any_eq (string3) (string1) then false else true(rank:13)
case string_eq (string1) (string3)(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 472


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12)
=================================================
Progress: 473


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
rewrite <- Case2 in goal at 0(rank:12)
rewrite <- Case2 in goal at 1(rank:12)
rewrite <- Case2 in goal at 2(rank:12)
case if string_eq (string3) (string2) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite Case2 in goal at 0(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 474


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 475


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 476


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 477


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 478


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string2) (string3)(rank:13)
=================================================
Progress: 479


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:13)
=================================================
Progress: 480


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 481


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 482


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 483


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite <- Case2 in goal at 0(rank:13)
rewrite Cond1 in goal at 0(rank:21)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:13)
rewrite <- Case2 in goal at 2(rank:13)
case if any_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 484


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 485


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite <- Case2 in goal at 0(rank:13)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
case if any_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 486


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 2(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 487


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 488


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 489


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
rewrite <- Case2 in goal at 0(rank:13)
rewrite <- Case2 in goal at 1(rank:13)
rewrite <- Case2 in goal at 2(rank:13)
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite Cond1 in goal at 0(rank:21)
=================================================
Progress: 490


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 491


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case4 in goal at 0(rank:28)
=================================================
Progress: 492


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite <- Case3 in goal at 0(rank:13)
rewrite Cond1 in goal at 0(rank:21)
rewrite Case3 in goal at 0(rank:29)
rewrite Case3 in goal at 1(rank:29)
rewrite Case3 in goal at 2(rank:29)
rewrite Case3 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:13)
rewrite <- Case3 in goal at 2(rank:13)
case if string_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 493


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 494


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 495


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 496


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 497


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 498


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
Case4 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case3 in goal at 0(rank:28)
rewrite <- Case4 in goal at 0(rank:28)
=================================================
Progress: 499


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string2) (string1) then false else true(rank:14)
=================================================
Progress: 500


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 1
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
Model : string1: "ubp", string2: "mpp", string3: "ubb"
Model : string1: "ped", string2: "kxg", string3: "wjx"
Model : string1: "yhe", string2: "tzo", string3: "vwi"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.005222 seconds
Result : true
=================================================
Progress: 501


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 2
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
Model : string1: "qmr", string2: "ubn", string3: "zhv"
Model : string1: "oxq", string2: "sfy", string3: "keg"
Model : string1: "vgm", string2: "qym", string3: "vks"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.005622 seconds
Result : true
=================================================
Progress: 502


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 503


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 504


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:13)
=================================================
Progress: 505


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 506


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 13
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 507


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 18
Tactic List : 8
case if string_eq (string3) (string2) then false else true(rank:12)
rewrite Cond1 in goal at 0(rank:19)
rewrite <- Case1 in goal at 1(rank:19)
rewrite <- Case1 in goal at 2(rank:27)
rewrite <- Case2 in goal at 1(rank:19)
rewrite <- Case2 in goal at 0(rank:27)
rewrite <- Case1 in goal at 0(rank:27)
rewrite <- Case2 in goal at 2(rank:27)
=================================================
Progress: 508


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 8
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 1(rank:20)
rewrite <- Case1 in goal at 2(rank:28)
rewrite <- Case2 in goal at 1(rank:20)
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 2(rank:28)
=================================================
Progress: 509


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 510


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 9
Tactic List : 8
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 1(rank:20)
rewrite <- Case1 in goal at 2(rank:28)
rewrite <- Case3 in goal at 1(rank:20)
rewrite <- Case3 in goal at 0(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case3 in goal at 2(rank:28)
=================================================
Progress: 511


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 512


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 513


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 514


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 515


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:13)
=================================================
Progress: 516


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 517


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 4
case if string_eq (string3) (string1) then false else true(rank:13)
case string_eq (string1) (string3)(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 518


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 519


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 520


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 521


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 522


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case4 in goal at 0(rank:28)
=================================================
Progress: 523


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite <- Case3 in goal at 0(rank:13)
rewrite Cond1 in goal at 0(rank:21)
rewrite Case3 in goal at 0(rank:29)
rewrite Case3 in goal at 1(rank:29)
rewrite Case3 in goal at 2(rank:29)
rewrite Case3 in goal at 3(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:13)
rewrite <- Case3 in goal at 2(rank:13)
case if string_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 524


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 525


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 526


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:13)
=================================================
Progress: 527


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 528


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 9
Tactic List : 8
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case2 in goal at 1(rank:20)
rewrite <- Case2 in goal at 2(rank:28)
rewrite <- Case3 in goal at 1(rank:20)
rewrite <- Case3 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case3 in goal at 2(rank:28)
=================================================
Progress: 529


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 530


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 531


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))

0 goal(s) more...

3 conjecture(s) more...
>>> induction lambda1(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11)
=================================================
Progress: 532


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 533


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 534


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string3) (string2) then false else true(rank:12)
rewrite Cond1 in goal at 0(rank:19)
case string_eq (string2) (string3)(rank:12)
=================================================
Progress: 535


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
case string_eq (string2) (string3)(rank:13)
=================================================
Progress: 536


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12)
=================================================
Progress: 537


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case1 in goal at 0(rank:12)
rewrite <- Case1 in goal at 1(rank:12)
rewrite Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 1(rank:28)
rewrite Case1 in goal at 2(rank:28)
rewrite Case1 in goal at 3(rank:28)
rewrite <- Case1 in goal at 2(rank:12)
case if string_eq (string3) (string2) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
=================================================
Progress: 538


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12)
=================================================
Progress: 539


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12)
=================================================
Progress: 540


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then false else true(rank:13)
=================================================
Progress: 541


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string2) (string2) then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 542


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if true then false else true then (string2::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 8
Tactic List : 4
case if string_eq (string3) (string2) then false else true(rank:12)
case string_eq (string1) (string3)(rank:12)
rewrite Cond1 in goal at 0(rank:19)
rewrite <- Case1 in goal at 0(rank:27)
=================================================
Progress: 543


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
case if any_eq (string3) (string1) then false else true(rank:13)
case string_eq (string1) (string3)(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 544


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12)
=================================================
Progress: 545


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
rewrite <- Case2 in goal at 0(rank:12)
rewrite <- Case2 in goal at 1(rank:12)
rewrite <- Case2 in goal at 2(rank:12)
case if string_eq (string3) (string2) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite Case2 in goal at 0(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 546


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 547


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 548


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 549


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 550


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string2) (string3)(rank:13)
=================================================
Progress: 551


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:13)
=================================================
Progress: 552


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 553


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 554


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 555


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite <- Case2 in goal at 0(rank:13)
rewrite Cond1 in goal at 0(rank:21)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:13)
rewrite <- Case2 in goal at 2(rank:13)
case if any_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 556


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 557


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite <- Case2 in goal at 0(rank:13)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
case if any_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 558


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 2(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 559


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 560


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 561


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
rewrite <- Case2 in goal at 0(rank:13)
rewrite <- Case2 in goal at 1(rank:13)
rewrite <- Case2 in goal at 2(rank:13)
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite Cond1 in goal at 0(rank:21)
=================================================
Progress: 562


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 563


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case4 in goal at 0(rank:28)
=================================================
Progress: 564


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite <- Case3 in goal at 0(rank:13)
rewrite Cond1 in goal at 0(rank:21)
rewrite Case3 in goal at 0(rank:29)
rewrite Case3 in goal at 1(rank:29)
rewrite Case3 in goal at 2(rank:29)
rewrite Case3 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:13)
rewrite <- Case3 in goal at 2(rank:13)
case if string_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 565


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 566


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 567


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 568


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 569


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 570


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : if string_eq (string3) (string1) then false else true = false
Case3 : string_eq (string2) (string3) = false
Case4 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case3 in goal at 0(rank:28)
rewrite <- Case4 in goal at 0(rank:28)
=================================================
Progress: 571


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string2) (string1) then false else true(rank:14)
=================================================
Progress: 572


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 1
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string2) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
Model : string1: "pms", string2: "ckg", string3: "apb"
Model : string1: "zlj", string2: "gst", string3: "txt"
Model : string1: "fal", string2: "dsi", string3: "pex"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.002150 seconds
Result : true
=================================================
Progress: 573


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 2
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->if string_eq (string3) (string2) then false else true = true->string2 = string3 -> true = list_eq (if if string_eq (string3) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))
Model : string1: "qlq", string2: "sub", string3: "lrj"
Model : string1: "yiw", string2: "nnf", string3: "vyb"
Model : string1: "naa", string2: "vgy", string3: "clq"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.002998 seconds
Result : true
=================================================
Progress: 574


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 575


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 576


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:13)
=================================================
Progress: 577


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 578


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 13
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 579


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 18
Tactic List : 8
case if string_eq (string3) (string2) then false else true(rank:12)
rewrite Cond1 in goal at 0(rank:19)
rewrite <- Case1 in goal at 1(rank:19)
rewrite <- Case1 in goal at 2(rank:27)
rewrite <- Case2 in goal at 1(rank:19)
rewrite <- Case2 in goal at 0(rank:27)
rewrite <- Case1 in goal at 0(rank:27)
rewrite <- Case2 in goal at 2(rank:27)
=================================================
Progress: 580


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 8
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 1(rank:20)
rewrite <- Case1 in goal at 2(rank:28)
rewrite <- Case2 in goal at 1(rank:20)
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 2(rank:28)
=================================================
Progress: 581


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 582


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 9
Tactic List : 8
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 1(rank:20)
rewrite <- Case1 in goal at 2(rank:28)
rewrite <- Case3 in goal at 1(rank:20)
rewrite <- Case3 in goal at 0(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case3 in goal at 2(rank:28)
=================================================
Progress: 583


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 584


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 585


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 586


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 587


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:13)
=================================================
Progress: 588


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 589


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 4
case if string_eq (string3) (string1) then false else true(rank:13)
case string_eq (string1) (string3)(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 590


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 591


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 592


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 593


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 594


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : if string_eq (string3) (string1) then false else true = false
Case4 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case4 in goal at 0(rank:28)
=================================================
Progress: 595


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite <- Case3 in goal at 0(rank:13)
rewrite Cond1 in goal at 0(rank:21)
rewrite Case3 in goal at 0(rank:29)
rewrite Case3 in goal at 1(rank:29)
rewrite Case3 in goal at 2(rank:29)
rewrite Case3 in goal at 3(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:13)
rewrite <- Case3 in goal at 2(rank:13)
case if string_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 596


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 597


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 598


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:13)
=================================================
Progress: 599


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 600


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 9
Tactic List : 8
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case2 in goal at 1(rank:20)
rewrite <- Case2 in goal at 2(rank:28)
rewrite <- Case3 in goal at 1(rank:20)
rewrite <- Case3 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case3 in goal at 2(rank:28)
=================================================
Progress: 601


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 602


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 603


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:12)
=================================================
Progress: 604


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12)
=================================================
Progress: 605


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 606


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:12)
=================================================
Progress: 607


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12)
=================================================
Progress: 608


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 609


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:12)
=================================================
Progress: 610


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12)
=================================================
Progress: 611


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 612


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:12)
=================================================
Progress: 613


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12)
=================================================
Progress: 614


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 615


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:27)
rewrite <- Case2 in goal at 0(rank:27)
=================================================
Progress: 616


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then false else true(rank:12)
rewrite <- Case2 in goal at 0(rank:27)
=================================================
Progress: 617


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 1(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 618


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 619


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite Case1 in goal at 0(rank:12)
=================================================
Progress: 620


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:12)
=================================================
Progress: 621


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string2) then false else true
case if any_eq (string3) (string1) then false else true
discriminate
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string3:string), true = true->string_eq (string1) (string3) = false->if any_eq (string3) (string1) then false else true = false -> string_eq (string1) (string3) = true
Model : string1: "bmr", string3: "zni"
Model : string1: "ccx", string3: "mav"
Model : string1: "xho", string3: "osa"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.002207 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string3:string), true = true->string_eq (string1) (string3) = false->if any_eq (string3) (string1) then false else true = false -> string_eq (string1) (string3) = true
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 622


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string3:string), true = true->string_eq (string1) (string3) = false->if any_eq (string3) (string1) then false else true = false -> string_eq (string1) (string3) = true(rank : 0)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 623


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 624


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 625


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
---------------------------------------
string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11)
=================================================
Progress: 626


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
---------------------------------------
string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:11)
=================================================
Progress: 627


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond3(rank : 11)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
Cond3 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite Cond2 in goal at 0(rank:11)
=================================================
Progress: 628


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
Cond3 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 11)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
Cond3 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 629


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then false else true(rank:12)
rewrite <- Case1 in goal at 0(rank:27)
=================================================
Progress: 630


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
rewrite Case2 in goal at 0(rank:28)
rewrite Case2 in goal at 1(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 631


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 632


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite Case2 in goal at 0(rank:12)
=================================================
Progress: 633


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:12)
=================================================
Progress: 634


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string2) then false else true
case if any_eq (string3) (string1) then false else true
discriminate
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "bmj", string3: "kvr"
Model : string2: "qma", string3: "jtf"
Model : string2: "gfy", string3: "jse"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.001630 seconds
Result : false
=================================================
Progress: 635


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:27)
rewrite <- Case2 in goal at 0(rank:27)
=================================================
Progress: 636


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then false else true(rank:12)
rewrite <- Case2 in goal at 0(rank:27)
=================================================
Progress: 637


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 1(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 638


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 639


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite Case1 in goal at 0(rank:12)
=================================================
Progress: 640


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:12)
=================================================
Progress: 641


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string2) then false else true
case if any_eq (string3) (string1) then false else true
discriminate
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string3:string), true = true->string_eq (string1) (string3) = false->if any_eq (string3) (string1) then false else true = false -> string_eq (string1) (string3) = true
Model : string1: "kbk", string3: "aev"
Model : string1: "iwh", string3: "lhs"
Model : string1: "hwh", string3: "ibw"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.001397 seconds
Result : true
=================================================
Progress: 642


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then false else true(rank:12)
rewrite <- Case1 in goal at 0(rank:27)
=================================================
Progress: 643


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
rewrite Case2 in goal at 0(rank:28)
rewrite Case2 in goal at 1(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 644


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 645


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite Case2 in goal at 0(rank:12)
=================================================
Progress: 646


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:12)
=================================================
Progress: 647


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string2) then false else true
case if any_eq (string3) (string1) then false else true
discriminate
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "nsh", string3: "jwo"
Model : string2: "joh", string3: "jhu"
Model : string2: "hcm", string3: "kzp"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.002590 seconds
Result : false
=================================================
Progress: 648


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:12)
=================================================
Progress: 649


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12)
=================================================
Progress: 650


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 651


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:12)
=================================================
Progress: 652


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12)
=================================================
Progress: 653


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 654


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:27)
rewrite <- Case2 in goal at 0(rank:27)
=================================================
Progress: 655


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then false else true(rank:12)
rewrite <- Case2 in goal at 0(rank:27)
=================================================
Progress: 656


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 1(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 657


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 658


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite Case1 in goal at 0(rank:12)
=================================================
Progress: 659


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:12)
=================================================
Progress: 660


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string2) then false else true
case if any_eq (string3) (string1) then false else true
discriminate
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string3:string), true = true->string_eq (string1) (string3) = false->if any_eq (string3) (string1) then false else true = false -> string_eq (string1) (string3) = true
Model : string1: "wlq", string3: "bsf"
Model : string1: "xsy", string3: "yib"
Model : string1: "isk", string3: "otp"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.002959 seconds
Result : true
=================================================
Progress: 661


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then false else true(rank:12)
rewrite <- Case1 in goal at 0(rank:27)
=================================================
Progress: 662


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
rewrite Case2 in goal at 0(rank:28)
rewrite Case2 in goal at 1(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 663


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 664


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite Case2 in goal at 0(rank:12)
=================================================
Progress: 665


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:12)
=================================================
Progress: 666


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string2) then false else true
case if any_eq (string3) (string1) then false else true
discriminate
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "tuv", string3: "gyf"
Model : string2: "xyb", string3: "usv"
Model : string2: "rxh", string3: "izy"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.002954 seconds
Result : false
=================================================
Progress: 667


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:12)
=================================================
Progress: 668


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:12)
=================================================
Progress: 669


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string2 = string3
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 670


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:12)
=================================================
Progress: 671


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12)
=================================================
Progress: 672


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 673


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:27)
rewrite <- Case2 in goal at 0(rank:27)
=================================================
Progress: 674


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then false else true(rank:12)
rewrite <- Case2 in goal at 0(rank:27)
=================================================
Progress: 675


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 1(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 676


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 677


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite Case1 in goal at 0(rank:12)
=================================================
Progress: 678


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:12)
=================================================
Progress: 679


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string2) then false else true
case if any_eq (string3) (string1) then false else true
discriminate
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string3:string), true = true->string_eq (string1) (string3) = false->if any_eq (string3) (string1) then false else true = false -> string_eq (string1) (string3) = true
Model : string1: "kvo", string3: "fbi"
Model : string1: "vdr", string3: "gqo"
Model : string1: "yur", string3: "lzl"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.002288 seconds
Result : true
=================================================
Progress: 680


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 19)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then false else true(rank:12)
rewrite <- Case1 in goal at 0(rank:27)
=================================================
Progress: 681


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
rewrite Case2 in goal at 0(rank:28)
rewrite Case2 in goal at 1(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 682


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 683


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite Case2 in goal at 0(rank:12)
=================================================
Progress: 684


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:12)
=================================================
Progress: 685


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string2) then false else true
case if any_eq (string3) (string1) then false else true
discriminate
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "qtr", string3: "qju"
Model : string2: "vuk", string3: "ola"
Model : string2: "aaq", string3: "jhw"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.003255 seconds
Result : false
=================================================
Progress: 686


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:13)
=================================================
Progress: 687


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:13)
=================================================
Progress: 688


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 689


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:13)
=================================================
Progress: 690


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:13)
=================================================
Progress: 691


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 692


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 693


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 694


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 695


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 696


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 697


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 698


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 699


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 700


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 701


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 702


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 703


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 704


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 705


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 706


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 707


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 708


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 709


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 710


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 711


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 712


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case3 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 713


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 714


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 715


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 716


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 717


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case3 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 718


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 719


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 720


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 721


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 722


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 723


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 724


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 725


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case3 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 726


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 727


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 728


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 729


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 730


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 731


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 732


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 733


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case3 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 734


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:13)
=================================================
Progress: 735


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:13)
=================================================
Progress: 736


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 737


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 738


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 739


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 740


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 741


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 742


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 743


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 744


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 745


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 746


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 747


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 748


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 749


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case3 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 750


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 751


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 752


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 753


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 754


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 755


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 756


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 757


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case3 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 758


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:13)
=================================================
Progress: 759


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if any_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:13)
=================================================
Progress: 760


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string2 = string3
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 761


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 762


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 763


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string1 = string3
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 764


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 765


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 766


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 767


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 768


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 769


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 770


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 771


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 772


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 773


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case3 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 774


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 775


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 776


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string1 = string3
---------------------------------------
true = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 777


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 778


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 779


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 780


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 781


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Case3 in goal at 0(rank:21)
rewrite Cond1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 782


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:12)
=================================================
Progress: 783


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:12)
=================================================
Progress: 784


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string2) then false else true
rewrite Cond1 in goal at 0
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string3:string), list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string3) = false -> string_eq (string1) (string3) = true
Model : string1: "scj", string3: "kzn"
Model : string1: "yvm", string3: "pcp"
Model : string1: "stu", string3: "mxy"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.003092 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string3:string), list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string3) = false -> string_eq (string1) (string3) = true
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 785


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string3:string), list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string3) = false -> string_eq (string1) (string3) = true(rank : 0)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 786


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 787


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 788


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11)
=================================================
Progress: 789


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
---------------------------------------
string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite Cond2 in goal at 0(rank:11)
=================================================
Progress: 790


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 11)


1st goal of : forall (string1:string) (string2:string), list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
false = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 791


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:12)
=================================================
Progress: 792


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:12)
=================================================
Progress: 793


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string2) then false else true
rewrite Cond1 in goal at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string2:string) (string3:string), string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "uej", string3: "ggk"
Model : string2: "bmw", string3: "dtr"
Model : string2: "jwm", string3: "obq"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.001495 seconds
Result : false
=================================================
Progress: 794


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:12)
=================================================
Progress: 795


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:12)
=================================================
Progress: 796


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string2) then false else true
rewrite Cond1 in goal at 0
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string3:string), list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string3) = false -> string_eq (string1) (string3) = true
Model : string1: "umc", string3: "hpw"
Model : string1: "lzt", string3: "ieb"
Model : string1: "drw", string3: "ran"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.001868 seconds
Result : true
=================================================
Progress: 797


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:12)
=================================================
Progress: 798


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:12)
=================================================
Progress: 799


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string2) then false else true
rewrite Cond1 in goal at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string2:string) (string3:string), string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "ejy", string3: "xni"
Model : string2: "rsf", string3: "amc"
Model : string2: "dik", string3: "ufn"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.001109 seconds
Result : false
=================================================
Progress: 800


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:12)
=================================================
Progress: 801


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:12)
=================================================
Progress: 802


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string2) then false else true
rewrite Cond1 in goal at 0
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string3:string), list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string3) = false -> string_eq (string1) (string3) = true
Model : string1: "wlg", string3: "tsf"
Model : string1: "etd", string3: "sip"
Model : string1: "nuq", string3: "wyk"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.003349 seconds
Result : true
=================================================
Progress: 803


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:12)
=================================================
Progress: 804


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:12)
=================================================
Progress: 805


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string2) then false else true
rewrite Cond1 in goal at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string2:string) (string3:string), string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "dlc", string3: "jbf"
Model : string2: "fkg", string3: "ash"
Model : string2: "zox", string3: "nco"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.001593 seconds
Result : false
=================================================
Progress: 806


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:12)
=================================================
Progress: 807


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:12)
=================================================
Progress: 808


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string2) then false else true
rewrite Cond1 in goal at 0
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string3:string), list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true->string_eq (string1) (string3) = false -> string_eq (string1) (string3) = true
Model : string1: "ism", string3: "rlj"
Model : string1: "qnq", string3: "lql"
Model : string1: "tcf", string3: "qmm"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.002464 seconds
Result : true
=================================================
Progress: 809


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:12)
=================================================
Progress: 810


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:12)
=================================================
Progress: 811


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string2) then false else true
rewrite Cond1 in goal at 0
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string2:string) (string3:string), string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "syg", string3: "wgx"
Model : string2: "ekd", string3: "svr"
Model : string2: "unh", string3: "pgq"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.002639 seconds
Result : false
=================================================
Progress: 812


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
>>> induction lambda1(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13)
=================================================
Progress: 813


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:13)
=================================================
Progress: 814


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:13)
=================================================
Progress: 815


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:13)
=================================================
Progress: 816


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:14)
=================================================
Progress: 817


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13)
=================================================
Progress: 818


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:14)
=================================================
Progress: 819


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13)
=================================================
Progress: 820


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
=================================================
Progress: 821


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true

0 goal(s) more...

4 conjecture(s) more...
>>> induction lambda1(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13)
=================================================
Progress: 822


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (V (string3))))) ((Nil)) = true -> sub_check_ta1 (V (string3)) ((string2::(string1::(Nil)))) = true

2 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:13)
=================================================
Progress: 823


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:13)
=================================================
Progress: 824


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:14)
=================================================
Progress: 825


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if any_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::(Nil))) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13)
=================================================
Progress: 826


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case string_eq (string1) (string3)(rank:14)
=================================================
Progress: 827


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = true

2 goal(s) more...

4 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13)
=================================================
Progress: 828


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
=================================================
Progress: 829


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:29)
rewrite <- Case2 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 830


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case1 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "dpd", string3: "oou"
Model : string2: "xma", string3: "gwb"
Model : string2: "avo", string3: "bjy"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.001309 seconds
Result : true
New Env

;;
Lemma List
forall (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 831


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true(rank : 0)


1st goal of : forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
discriminate(rank:13)
=================================================
Progress: 832


1st goal of : forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> discriminate(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 833


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 8
Tactic List : 2
rewrite Case1 in goal at 0(rank:20)
rewrite lemma3 in goal at 0(rank:23)
=================================================
Progress: 834


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:12)
=================================================
Progress: 835


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:15)
=================================================
Progress: 836


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 15)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

6 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:14)
=================================================
Progress: 837


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

6 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

5 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:30)
rewrite <- Case2 in goal at 0(rank:30)
=================================================
Progress: 838


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case1 in goal at 1(rank:29)
rewrite <- Case1 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 839


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string3:string), false = true->string_eq (string1) (string3) = false->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = true
Model : string1: "ffu", string3: "erb"
Model : string1: "zwt", string3: "ghe"
Model : string1: "zdn", string3: "zoc"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.003024 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string3:string), false = true->string_eq (string1) (string3) = false->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = true
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 840


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string3:string), false = true->string_eq (string1) (string3) = false->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = true(rank : 0)


1st goal of : forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
discriminate(rank:13)
=================================================
Progress: 841


1st goal of : forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> discriminate(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite Case2 in goal at 0(rank:21)
rewrite lemma3 in goal at 0(rank:24)
=================================================
Progress: 842


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "izu", string2: "xnl", string3: "sew"
Model : string1: "osh", string2: "qlj", string3: "ujz"
Model : string1: "jzv", string2: "uer", string3: "fdx"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.005164 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 843


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
discriminate(rank:13)
=================================================
Progress: 844


1st goal of : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> discriminate(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 845


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 9
Tactic List : 1
rewrite Case2 in goal at 0(rank:12)
=================================================
Progress: 846


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:12)
=================================================
Progress: 847


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
assert forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
discriminate
discriminate
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "edj", string3: "osk"
Model : string2: "qkw", string3: "qea"
Model : string2: "ots", string3: "ewz"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.002347 seconds
Result : false
=================================================
Progress: 848


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:29)
rewrite <- Case2 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 849


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case1 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "tzd", string3: "rfu"
Model : string2: "rkv", string3: "boy"
Model : string2: "oag", string3: "nsq"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.002395 seconds
Result : true
=================================================
Progress: 850


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 851


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case1 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "opd", string2: "umc", string3: "ytq"
Model : string1: "ytp", string2: "dbk", string3: "icp"
Model : string1: "aml", string2: "pjx", string3: "ncb"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.004497 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 852


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
discriminate(rank:13)
=================================================
Progress: 853


1st goal of : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> discriminate(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 854


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 6
Tactic List : 1
rewrite Case1 in goal at 0(rank:12)
=================================================
Progress: 855


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:12)
=================================================
Progress: 856


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case1 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case2 in goal at 0
assert forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
discriminate
discriminate
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string3:string), true = true->string_eq (string1) (string3) = false->if any_eq (string3) (string1) then false else true = false -> string_eq (string1) (string3) = true
Model : string1: "knq", string3: "lkc"
Model : string1: "jas", string3: "rzu"
Model : string1: "ild", string3: "tmc"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.001899 seconds
Result : true
=================================================
Progress: 857


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case1 in goal at 1(rank:29)
rewrite <- Case1 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 858


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string3:string), false = true->string_eq (string1) (string3) = false->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = true
Model : string1: "aaz", string3: "zgr"
Model : string1: "zdz", string3: "lxp"
Model : string1: "aws", string3: "blc"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.001517 seconds
Result : true
=================================================
Progress: 859


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "ues", string2: "ulp", string3: "fds"
Model : string1: "vsz", string2: "dwb", string3: "qmn"
Model : string1: "nty", string2: "ixq", string3: "igg"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.004353 seconds
Result : true
=================================================
Progress: 860


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 861


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case3 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:29)
rewrite <- Case3 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 862


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "ywq", string3: "prk"
Model : string2: "pih", string3: "nkl"
Model : string2: "ury", string3: "ged"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.002435 seconds
Result : true
=================================================
Progress: 863


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 864


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case3 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "rsn", string2: "rsx", string3: "vzv"
Model : string1: "qsd", string2: "uhi", string3: "uug"
Model : string1: "ewv", string2: "nsw", string3: "fhx"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.006236 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 865


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
discriminate(rank:13)
=================================================
Progress: 866


1st goal of : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> discriminate(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 867


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 6
Tactic List : 1
rewrite Case1 in goal at 0(rank:12)
=================================================
Progress: 868


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case3 in goal at 0(rank:12)
=================================================
Progress: 869


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case3 in goal at 0
assert forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
discriminate
discriminate
rewrite Case1 in goal at 0
rewrite <- Case3 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string3:string), true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = false -> string_eq (string1) (string3) = true
Model : string1: "jei", string3: "ysc"
Model : string1: "bzx", string3: "xkk"
Model : string1: "ypa", string3: "sxa"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.002592 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string3:string), true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = false -> string_eq (string1) (string3) = true
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 870


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string3:string), true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = false -> string_eq (string1) (string3) = true(rank : 0)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 871


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 872


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 873


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
---------------------------------------
string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11)
=================================================
Progress: 874


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
---------------------------------------
string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:11)
=================================================
Progress: 875


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond3(rank : 11)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
Cond3 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite Cond2 in goal at 0(rank:11)
=================================================
Progress: 876


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
Cond3 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 11)


1st goal of : forall (string1:string) (string2:string), true = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string_eq (string1) (string2) = false
Cond3 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 877


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case1 in goal at 1(rank:29)
rewrite <- Case1 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 878


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string3:string), false = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = true
Model : string1: "elu", string3: "xhu"
Model : string1: "tnb", string3: "oaw"
Model : string1: "txs", string3: "ynx"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.002945 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string3:string), false = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = true
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 879


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string3:string), false = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = true(rank : 0)


1st goal of : forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
discriminate(rank:13)
=================================================
Progress: 880


1st goal of : forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), false = true->string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = true -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> discriminate(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 881


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 8
Tactic List : 2
rewrite Case3 in goal at 0(rank:20)
rewrite lemma3 in goal at 0(rank:23)
=================================================
Progress: 882


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:12)
=================================================
Progress: 883


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:15)
=================================================
Progress: 884


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 15)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

6 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:14)
=================================================
Progress: 885


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

6 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

5 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:30)
rewrite <- Case3 in goal at 0(rank:30)
=================================================
Progress: 886


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case3 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:29)
rewrite <- Case3 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 887


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "qjz", string3: "emd"
Model : string2: "uuh", string3: "dlp"
Model : string2: "ogl", string3: "wqz"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.002064 seconds
Result : true
=================================================
Progress: 888


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 889


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case3 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "lez", string2: "anj", string3: "iiu"
Model : string1: "obh", string2: "axx", string3: "ava"
Model : string1: "acs", string2: "xyn", string3: "trz"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.004372 seconds
Result : true
=================================================
Progress: 890


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case1 in goal at 1(rank:29)
rewrite <- Case1 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 891


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string3:string), false = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = true
Model : string1: "uwg", string3: "lwb"
Model : string1: "tem", string3: "dgm"
Model : string1: "nwt", string3: "kyf"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.001969 seconds
Result : true
=================================================
Progress: 892


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "uhw", string2: "slg", string3: "vwh"
Model : string1: "fzl", string2: "kiw", string3: "hzr"
Model : string1: "qwa", string2: "qbd", string3: "kxo"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.004741 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 893


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
discriminate(rank:13)
=================================================
Progress: 894


1st goal of : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> discriminate(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 895


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 7
Tactic List : 1
rewrite Case3 in goal at 0(rank:12)
=================================================
Progress: 896


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:12)
=================================================
Progress: 897


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
assert forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
discriminate
discriminate
rewrite Case3 in goal at 0
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string2:string) (string3:string), true = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "hat", string3: "aha"
Model : string2: "txs", string3: "bqk"
Model : string2: "pii", string3: "nib"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.001303 seconds
Result : false
=================================================
Progress: 898


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case3 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:29)
rewrite <- Case3 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 899


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true
Model : string2: "gqe", string3: "rwi"
Model : string2: "ios", string3: "dbz"
Model : string2: "rdo", string3: "gbp"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.001409 seconds
Result : true
New Env

;;
Lemma List
forall (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 900


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true(rank : 0)


1st goal of : forall (string1:string) (string2:string), false = true->if string_eq (string2) (string1) then false else true = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), false = true->if string_eq (string2) (string1) then false else true = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
discriminate(rank:13)
=================================================
Progress: 901


1st goal of : forall (string1:string) (string2:string), false = true->if string_eq (string2) (string1) then false else true = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), false = true->if string_eq (string2) (string1) then false else true = true->string_eq (string1) (string2) = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> discriminate(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 902


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 8
Tactic List : 2
rewrite Case2 in goal at 0(rank:20)
rewrite lemma3 in goal at 0(rank:23)
=================================================
Progress: 903


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case3 in goal at 0(rank:12)
=================================================
Progress: 904


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:15)
=================================================
Progress: 905


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 15)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

6 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:14)
=================================================
Progress: 906


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

6 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

5 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:30)
rewrite <- Case3 in goal at 0(rank:30)
=================================================
Progress: 907


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:29)
rewrite <- Case2 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 908


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string3:string), false = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = true
Model : string1: "fnz", string3: "agu"
Model : string1: "bgu", string3: "ciq"
Model : string1: "qjm", string3: "oxg"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.001427 seconds
Result : true
=================================================
Progress: 909


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "srp", string2: "pxz", string3: "kwu"
Model : string1: "sxv", string2: "hji", string3: "zpm"
Model : string1: "nwx", string2: "ert", string3: "hwd"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.004812 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 910


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
discriminate(rank:13)
=================================================
Progress: 911


1st goal of : forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> discriminate(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 912


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 7
Tactic List : 1
rewrite Case3 in goal at 0(rank:12)
=================================================
Progress: 913


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:12)
=================================================
Progress: 914


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case2 in goal at 0
assert forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
discriminate
discriminate
rewrite Case3 in goal at 0
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string2:string) (string3:string), true = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true
Model : string2: "ave", string3: "qph"
Model : string2: "kxn", string3: "wvp"
Model : string2: "zrz", string3: "qte"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.002408 seconds
Result : false
=================================================
Progress: 915


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case3 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:29)
rewrite <- Case3 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 916


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true
Model : string2: "znh", string3: "gun"
Model : string2: "vxs", string3: "rcs"
Model : string2: "noh", string3: "shc"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.002911 seconds
Result : true
=================================================
Progress: 917


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 918


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case3 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "fsv", string2: "ufk", string3: "crl"
Model : string1: "pgu", string2: "fpb", string3: "ize"
Model : string1: "kdi", string2: "oed", string3: "sxw"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.003436 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 919


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
discriminate(rank:13)
=================================================
Progress: 920


1st goal of : forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> discriminate(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
discriminate(rank:12)
=================================================
Progress: 921


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 6
Tactic List : 1
rewrite Case2 in goal at 0(rank:12)
=================================================
Progress: 922


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case3 in goal at 0(rank:12)
=================================================
Progress: 923


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case3 in goal at 0
assert forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
discriminate
discriminate
rewrite Case2 in goal at 0
rewrite <- Case3 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string3:string), true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = false -> string_eq (string1) (string3) = true
Model : string1: "dfc", string3: "wgs"
Model : string1: "uyr", string3: "dxq"
Model : string1: "ziz", string3: "lgb"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.002079 seconds
Result : true
=================================================
Progress: 924


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:29)
rewrite <- Case2 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 925


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string3:string), false = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = true
Model : string1: "crr", string3: "dhk"
Model : string1: "ojy", string3: "abq"
Model : string1: "vob", string3: "snm"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.001693 seconds
Result : true
=================================================
Progress: 926


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "mls", string2: "saj", string3: "gsz"
Model : string1: "ebn", string2: "krc", string3: "wfw"
Model : string1: "qcv", string2: "fuw", string3: "xkd"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.003997 seconds
Result : true
=================================================
Progress: 927


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 928


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:29)
rewrite <- Case2 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 929


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case1 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "yvd", string3: "jdi"
Model : string2: "nca", string3: "ime"
Model : string2: "fwt", string3: "gam"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.001593 seconds
Result : true
=================================================
Progress: 930


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 931


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case1 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "ddz", string2: "jqf", string3: "lhd"
Model : string1: "htc", string2: "dgl", string3: "pes"
Model : string1: "cwp", string2: "web", string3: "akk"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.002135 seconds
Result : true
=================================================
Progress: 932


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case1 in goal at 1(rank:29)
rewrite <- Case1 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 933


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string3:string), false = true->string_eq (string1) (string3) = false->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = true
Model : string1: "evb", string3: "gex"
Model : string1: "wil", string3: "woq"
Model : string1: "cqh", string3: "nuu"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.003016 seconds
Result : true
=================================================
Progress: 934


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "xva", string2: "uqs", string3: "lxh"
Model : string1: "plo", string2: "tao", string3: "xmh"
Model : string1: "vjs", string2: "bec", string3: "dvh"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.004990 seconds
Result : true
=================================================
Progress: 935


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 936


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case3 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:29)
rewrite <- Case3 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 937


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "hxq", string3: "cbb"
Model : string2: "gtn", string3: "xdp"
Model : string2: "rjm", string3: "oku"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.001786 seconds
Result : true
=================================================
Progress: 938


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 939


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case3 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "oti", string2: "aij", string3: "jss"
Model : string1: "eui", string2: "hui", string3: "oso"
Model : string1: "wcu", string2: "efc", string3: "gji"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.002768 seconds
Result : true
=================================================
Progress: 940


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case1 in goal at 1(rank:29)
rewrite <- Case1 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 941


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string3:string), false = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = true
Model : string1: "btp", string3: "itf"
Model : string1: "uwu", string3: "xrv"
Model : string1: "lww", string3: "qlg"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.002610 seconds
Result : true
=================================================
Progress: 942


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "gfh", string2: "xze", string3: "fry"
Model : string1: "wqr", string2: "naj", string3: "lzp"
Model : string1: "nbw", string2: "xsd", string3: "mdn"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.004263 seconds
Result : true
=================================================
Progress: 943


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 944


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case3 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:29)
rewrite <- Case3 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 945


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true
Model : string2: "zua", string3: "rma"
Model : string2: "sao", string3: "plt"
Model : string2: "rdw", string3: "ocv"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.003315 seconds
Result : true
=================================================
Progress: 946


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 947


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case3 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "cku", string2: "nnf", string3: "dtg"
Model : string1: "wbw", string2: "tbn", string3: "snh"
Model : string1: "yqi", string2: "lnx", string3: "evu"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.004252 seconds
Result : true
=================================================
Progress: 948


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:29)
rewrite <- Case2 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 949


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string3:string), false = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = true
Model : string1: "cff", string3: "bxo"
Model : string1: "gjx", string3: "ich"
Model : string1: "nfg", string3: "dvf"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.001014 seconds
Result : true
=================================================
Progress: 950


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "gnq", string2: "why", string3: "udu"
Model : string1: "bbd", string2: "sae", string3: "dtv"
Model : string1: "uch", string2: "spr", string3: "zdl"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.005435 seconds
Result : true
=================================================
Progress: 951


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 952


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:29)
rewrite <- Case2 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 953


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case1 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "owq", string3: "onw"
Model : string2: "vqq", string3: "ypf"
Model : string2: "con", string3: "ufb"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.003631 seconds
Result : true
=================================================
Progress: 954


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 955


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case1 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "npg", string2: "axa", string3: "tyo"
Model : string1: "ocp", string2: "cpd", string3: "irk"
Model : string1: "aee", string2: "goe", string3: "cpf"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.002394 seconds
Result : true
=================================================
Progress: 956


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case1 in goal at 1(rank:29)
rewrite <- Case1 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 957


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string3:string), false = true->string_eq (string1) (string3) = false->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = true
Model : string1: "fwd", string3: "xiy"
Model : string1: "eyq", string3: "bvx"
Model : string1: "xml", string3: "bxj"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.001389 seconds
Result : true
=================================================
Progress: 958


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then false else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "jiv", string2: "rnw", string3: "thw"
Model : string1: "dfk", string2: "bys", string3: "wzu"
Model : string1: "gkm", string2: "rsq", string3: "rwb"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.005733 seconds
Result : true
=================================================
Progress: 959


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 960


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case3 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:29)
rewrite <- Case3 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 961


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true -> string_eq (string2) (string3) = true
Model : string2: "ljy", string3: "dir"
Model : string2: "ftw", string3: "ihb"
Model : string2: "ujb", string3: "tyq"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.001891 seconds
Result : true
=================================================
Progress: 962


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 963


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case3 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "lrw", string2: "cfe", string3: "eah"
Model : string1: "sze", string2: "qls", string3: "kgy"
Model : string1: "plf", string2: "agg", string3: "qiv"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.003068 seconds
Result : true
=================================================
Progress: 964


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case1 in goal at 1(rank:29)
rewrite <- Case1 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 965


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string3:string), false = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = true
Model : string1: "yfj", string3: "vkp"
Model : string1: "mye", string3: "smd"
Model : string1: "zid", string3: "avn"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.002658 seconds
Result : true
=================================================
Progress: 966


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case if string_eq (string3) (string2) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then false else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "lbp", string2: "def", string3: "iqe"
Model : string1: "snz", string2: "pzh", string3: "mqa"
Model : string1: "bou", string2: "oic", string3: "naj"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.003316 seconds
Result : true
=================================================
Progress: 967


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 968


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case3 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:29)
rewrite <- Case3 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 969


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true
Model : string2: "ycj", string3: "dbn"
Model : string2: "pxg", string3: "pmc"
Model : string2: "ztx", string3: "izt"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.003076 seconds
Result : true
=================================================
Progress: 970


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 971


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case2 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case3 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "ehp", string2: "mvs", string3: "twg"
Model : string1: "sji", string2: "gyk", string3: "tdm"
Model : string1: "dtw", string2: "adz", string3: "zfl"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.003931 seconds
Result : true
=================================================
Progress: 972


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:29)
rewrite Cond1 in goal at 2(rank:29)
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:29)
rewrite <- Case2 in goal at 2(rank:29)
rewrite Cond1 in goal at 1(rank:29)
=================================================
Progress: 973


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = true

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string3:string), false = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = true
Model : string1: "waw", string3: "mhl"
Model : string1: "kbc", string3: "zwv"
Model : string1: "ppf", string3: "qmp"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.002722 seconds
Result : true
=================================================
Progress: 974


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case if any_eq (string3) (string2) then false else true
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string1) then false else true
discriminate
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), false = true->if string_eq (string3) (string2) then false else true = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "zdl", string2: "ggj", string3: "wvs"
Model : string1: "xlh", string2: "dce", string3: "ykg"
Model : string1: "dog", string2: "yei", string3: "mce"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.005612 seconds
Result : true
=================================================
Progress: 975


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : false = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 976


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 23)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then string_eq (string1) (string2) else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case if string_eq (string2) (string1) then string_eq (string1) (string2) else true(rank:8)
=================================================
Progress: 977


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then string_eq (string1) (string2) else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> case if string_eq (string2) (string1) then string_eq (string1) (string2) else true(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Case1 in goal at 0(rank:16)
rewrite <- Case1 in goal at 0(rank:16)
=================================================
Progress: 978


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 16)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
false = false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 979


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
false = false

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 1
Tactic List : 1
rewrite Case1 in goal at 0(rank:7)
=================================================
Progress: 980


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:7)
=================================================
Progress: 981


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
false = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string1)(rank:8)
=================================================
Progress: 982


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string_eq (string2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:8)
=================================================
Progress: 983


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string_eq (string2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite <- Case3 in goal at 0(rank:8)
rewrite Case1 in goal at 0(rank:16)
rewrite Case3 in goal at 0(rank:24)
=================================================
Progress: 984


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:8)
=================================================
Progress: 985


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 986


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : true = false
Case3 : string_eq (string2) (string1) = false
---------------------------------------
true = true

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 2
Tactic List : 1
reflexivity(rank:6)
=================================================
Progress: 987


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : true = false
Case3 : string_eq (string2) (string1) = false
---------------------------------------
true = true

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 6)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil)) = true -> sub_check_ta1 (P (string2) (lambda2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 4
Tactic List : 1
simpl in goal(rank:6)
=================================================
Progress: 988


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil)) = true -> sub_check_ta1 (P (string2) (lambda2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string1(rank:6)
=================================================
Progress: 989


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 6)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:6)
=================================================
Progress: 990


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 6)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:6)
=================================================
Progress: 991


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 6)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = true

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (lambda2:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = true
Model : lambda2: V ("ojn"), string1: "keh", string2: "dvo"
Model : lambda2: V ("jfd"), string1: "rpg", string2: "mjh"
Model : lambda2: V ("mew"), string1: "aub", string2: "orb"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.004074 seconds
Result : true
=================================================
Progress: 992


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 23)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

6 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:14)
=================================================
Progress: 993


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

6 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

5 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:30)
rewrite <- Case2 in goal at 0(rank:30)
=================================================
Progress: 994


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 23)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

6 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:14)
=================================================
Progress: 995


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

6 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then false else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

5 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:30)
rewrite <- Case3 in goal at 0(rank:30)
=================================================
Progress: 996


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 23)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

6 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:14)
=================================================
Progress: 997


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
true = true

6 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : if string_eq (string3) (string2) then false else true = true
Case2 : string_eq (string2) (string3) = false
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

5 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:30)
rewrite <- Case3 in goal at 0(rank:30)
=================================================
Progress: 998


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 25)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
reflexivity
case string_eq (string1) (string3)
reflexivity
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string2:string) (string3:string), string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true
Model : string2: "mul", string3: "pml"
Model : string2: "ckw", string3: "xfd"
Model : string2: "ets", string3: "wcg"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.001302 seconds
Result : false
=================================================
Progress: 999


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 25)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
reflexivity
case string_eq (string1) (string3)
reflexivity
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string3:string), string_eq (string1) (string3) = false -> string_eq (string1) (string3) = true
Model : string1: "xgz", string3: "sov"
Model : string1: "pjd", string3: "qff"
Model : string1: "del", string3: "kyu"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.002019 seconds
Result : false
=================================================
Progress: 1000


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 25)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
reflexivity
case string_eq (string1) (string3)
reflexivity
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string2:string) (string3:string), string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true
Model : string2: "bxj", string3: "hvv"
Model : string2: "sbr", string3: "ico"
Model : string2: "qbb", string3: "mrp"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.001186 seconds
Result : false
=================================================
Progress: 1001


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 25)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
reflexivity
case string_eq (string1) (string3)
reflexivity
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string3:string), string_eq (string1) (string3) = false -> string_eq (string1) (string3) = true
Model : string1: "lru", string3: "gtv"
Model : string1: "qvj", string3: "yri"
Model : string1: "lzu", string3: "hna"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.001685 seconds
Result : false
=================================================
Progress: 1002


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 25)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
reflexivity
case string_eq (string1) (string3)
reflexivity
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string2:string) (string3:string), string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true
Model : string2: "uod", string3: "tkj"
Model : string2: "bpy", string3: "rzx"
Model : string2: "kex", string3: "stw"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.001671 seconds
Result : false
=================================================
Progress: 1003


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 25)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
reflexivity
case string_eq (string1) (string3)
reflexivity
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string3:string), string_eq (string1) (string3) = false -> string_eq (string1) (string3) = true
Model : string1: "clo", string3: "bqx"
Model : string1: "hcb", string3: "vsu"
Model : string1: "fsd", string3: "nen"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.000983 seconds
Result : false
=================================================
Progress: 1004


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 25)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
reflexivity
case string_eq (string1) (string3)
reflexivity
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string2:string) (string3:string), string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true
Model : string2: "oyo", string3: "rwv"
Model : string2: "chv", string3: "hrr"
Model : string2: "nmm", string3: "jiv"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.001691 seconds
Result : false
=================================================
Progress: 1005


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 25)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = true
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
intro Cond1
case string_eq (string2) (string3)
reflexivity
case string_eq (string1) (string3)
reflexivity
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string3:string), string_eq (string1) (string3) = false -> string_eq (string1) (string3) = true
Model : string1: "bdl", string3: "ubp"
Model : string1: "gql", string3: "dtb"
Model : string1: "fjc", string3: "snc"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.000706 seconds
Result : false
=================================================
Progress: 1006


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 27)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then string_eq (string1) (string2) else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string2) (string1) then string_eq (string1) (string2) else true(rank:12)
=================================================
Progress: 1007


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then string_eq (string1) (string2) else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string2) (string1) then string_eq (string1) (string2) else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite Case1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:20)
=================================================
Progress: 1008


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
false = false

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 1009


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
false = false

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 1
Tactic List : 1
rewrite Case1 in goal at 0(rank:11)
=================================================
Progress: 1010


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:11)
=================================================
Progress: 1011


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string1)(rank:12)
=================================================
Progress: 1012


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string_eq (string2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:12)
=================================================
Progress: 1013


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string_eq (string2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case3 in goal at 0(rank:12)
rewrite Case1 in goal at 0(rank:20)
rewrite Case3 in goal at 0(rank:28)
=================================================
Progress: 1014


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string2) (string2) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12)
=================================================
Progress: 1015


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string2) (string2) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 1016


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : true = false
Case3 : string_eq (string2) (string1) = false
---------------------------------------
true = true

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 1
reflexivity(rank:10)
=================================================
Progress: 1017


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : true = false
Case3 : string_eq (string2) (string1) = false
---------------------------------------
true = true

2 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil)) = true -> sub_check_ta1 (P (string2) (lambda2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 4
Tactic List : 1
simpl in goal(rank:10)
=================================================
Progress: 1018


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil)) = true -> sub_check_ta1 (P (string2) (lambda2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10)
=================================================
Progress: 1019


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:10)
=================================================
Progress: 1020


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = true

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (lambda2:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = true
Model : lambda2: V ("cel"), string1: "tiv", string2: "eyi"
Model : lambda2: V ("oej"), string1: "ggf", string2: "oan"
Model : lambda2: C (P ("jaw") (V ("zmc"))) (C (V ("ydj")) (V ("vss"))), string1: "yuj", string2: "vam"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.011588 seconds
Result : true
=================================================
Progress: 1021


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 27)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then string_eq (string1) (string2) else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string2) (string1) then string_eq (string1) (string2) else true(rank:12)
=================================================
Progress: 1022


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string_eq (string1) (string2) = list_eq (if if string_eq (string2) (string1) then string_eq (string1) (string2) else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string2) (string1) then string_eq (string1) (string2) else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite Case1 in goal at 0(rank:20)
rewrite <- Case1 in goal at 0(rank:20)
=================================================
Progress: 1023


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
string_eq (string1) (string2) = false

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
false = false

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 1024


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true
---------------------------------------
false = false

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 1
Tactic List : 1
rewrite Case1 in goal at 0(rank:11)
=================================================
Progress: 1025


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:11)
=================================================
Progress: 1026


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string1)(rank:12)
=================================================
Progress: 1027


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : list_eq (if if string_eq (string2) (string1) then false else true then (string2::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string2) (string1) then string_eq (string1) (string2) else true = false
---------------------------------------
if string_eq (string2) (string1) then string_eq (string1) (string2) else true = true

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string_eq (string2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:12)
=================================================
Progress: 1028


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string_eq (string2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case3 in goal at 0(rank:12)
rewrite Case1 in goal at 0(rank:20)
rewrite Case3 in goal at 0(rank:28)
=================================================
Progress: 1029


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string1) (string2) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string2) (string2) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:12)
=================================================
Progress: 1030


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
string_eq (string2) (string2) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11)
=================================================
Progress: 1031


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : true = true
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string1) (string2) = false
Case3 : string2 = string1
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : true = false
Case3 : string_eq (string2) (string1) = false
---------------------------------------
true = true

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 1
reflexivity(rank:10)
=================================================
Progress: 1032


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Cond1 : false = true
Case1 : string_eq (string1) (string2) = false
Case2 : true = false
Case3 : string_eq (string2) (string1) = false
---------------------------------------
true = true

2 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil)) = true -> sub_check_ta1 (P (string2) (lambda2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 4
Tactic List : 1
simpl in goal(rank:10)
=================================================
Progress: 1033


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil)) = true -> sub_check_ta1 (P (string2) (lambda2)) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (P (string2) (lambda2)))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:10)
=================================================
Progress: 1034


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string1:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10)
=================================================
Progress: 1035


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
---------------------------------------
list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:10)
=================================================
Progress: 1036


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string), list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda1))) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string1::(Nil))) = list_eq (filter (aux (string1)) (getStn (lambda2))) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = true

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
rewrite Cond1 in goal at 0
advanced_generalize done
Lemma : forall (lambda2:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda2)))) ((Nil)) = true -> sub_check_ta1 (lambda2) ((string2::(string1::(Nil)))) = true
Model : lambda2: V ("coy"), string1: "qos", string2: "piq"
Model : lambda2: C (P ("sav") (V ("vho"))) (V ("hvg")), string1: "wqm", string2: "vjw"
Model : lambda2: P ("ppa") (V ("dvc")), string1: "cyp", string2: "bkr"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.010569 seconds
Result : true
=================================================
Progress: 1037


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 27)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank:12)
case string_eq (string1) (string3)(rank:12)
=================================================
Progress: 1038


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 1039


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12)
=================================================
Progress: 1040


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
rewrite <- Case2 in goal at 0(rank:12)
rewrite <- Case2 in goal at 2(rank:12)
rewrite <- Case2 in goal at 3(rank:12)
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank:13)
rewrite Case1 in goal at 0(rank:20)
rewrite Case2 in goal at 0(rank:28)
rewrite <- Case2 in goal at 1(rank:12)
=================================================
Progress: 1041


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then string_eq (string2) (string1) else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string1) (string2) then string_eq (string2) (string1) else true(rank:13)
=================================================
Progress: 1042


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then string_eq (string2) (string3) else true(rank:13)
rewrite Case1 in goal at 0(rank:20)
=================================================
Progress: 1043


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string1) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then string_eq (string2) (string1) else true(rank:13)
=================================================
Progress: 1044


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 3(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank:13)
rewrite Case1 in goal at 0(rank:20)
=================================================
Progress: 1045


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case string_eq (string1) (string3)(rank:14)
rewrite <- Case1 in goal at 0(rank:21)
=================================================
Progress: 1046


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 1047


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case2 in goal at 0(rank:13)
rewrite <- Case2 in goal at 1(rank:13)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case2 in goal at 2(rank:13)
case if any_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1048


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then string_eq (string2) (string1) else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then string_eq (string2) (string1) else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1049


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then string_eq (string2) (string3) else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case2 in goal at 0(rank:13)
rewrite <- Case2 in goal at 1(rank:13)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case2 in goal at 2(rank:13)
case if any_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1050


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string1) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string1) else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case2 in goal at 0(rank:13)
rewrite <- Case2 in goal at 1(rank:13)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case2 in goal at 2(rank:13)
case if any_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1051


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 2(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1052


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case3 in goal at 0(rank:13)
rewrite <- Case3 in goal at 1(rank:13)
rewrite Case3 in goal at 0(rank:29)
rewrite Case3 in goal at 1(rank:29)
rewrite Case3 in goal at 2(rank:29)
rewrite Case3 in goal at 3(rank:29)
rewrite <- Case3 in goal at 2(rank:13)
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1053


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1054


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1055


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1056


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1057


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1058


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1059


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1060


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1061


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1062


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1063


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1064


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:13)
=================================================
Progress: 1065


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1066


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 12
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1067


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1068


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 9
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1069


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1070


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 9
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1071


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1072


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 8
Tactic List : 7
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 1(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case1 in goal at 2(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
rewrite <- Case3 in goal at 1(rank:20)
rewrite <- Case3 in goal at 2(rank:28)
=================================================
Progress: 1073


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1074


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 1075


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case4 at 0(rank:14)
=================================================
Progress: 1076


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string1) (string1) then false else true(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:14)
=================================================
Progress: 1077


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case4 at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:14)
=================================================
Progress: 1078


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:14)
=================================================
Progress: 1079


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case4 in goal at 0(rank:14)
=================================================
Progress: 1080


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 0
case if string_eq (string1) (string2) then string_eq (string2) (string1) else true
case if any_eq (string1) (string1) then false else true
rewrite <- Case1 in goal at 0
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if any_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
Model : string1: "xzc", string2: "gqm"
Model : string1: "hhu", string2: "rmy"
Model : string1: "dff", string2: "tra"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.003590 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if any_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1081


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if any_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)(rank : 0)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

---------------------------------------
forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 1082


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

---------------------------------------
forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
---------------------------------------
forall (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 1083


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
---------------------------------------
forall (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
---------------------------------------
if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 1084


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
---------------------------------------
if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11)
=================================================
Progress: 1085


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Cond2 : if string_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
Model : string1: "zip", string2: "nmk"
Model : string1: "qvp", string2: "xqh"
Model : string1: "xri", string2: "gnz"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.005781 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
End of Lemma List


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Cond2 : if string_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 1086


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Cond2 : if string_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)(rank : 0)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

---------------------------------------
forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro string1(rank:13)
=================================================
Progress: 1087


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

---------------------------------------
forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
>>> intro string1(rank : 13)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
---------------------------------------
forall (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro string2(rank:13)
=================================================
Progress: 1088


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
---------------------------------------
forall (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
>>> intro string2(rank : 13)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
---------------------------------------
if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:13)
=================================================
Progress: 1089


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
---------------------------------------
if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
>>> intro Cond1(rank : 13)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:13)
=================================================
Progress: 1090


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
>>> intro Cond2(rank : 13)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Cond2 : if string_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
Model : string1: "mpm", string2: "exg"
Model : string1: "zqp", string2: "cmg"
Model : string1: "ihe", string2: "qxe"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.004046 seconds
Result : true
=================================================
Progress: 1091


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case4 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
case if any_eq (string3) (string1) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case4 at 0
rewrite <- Case1 in goal at 0
rewrite <- Case4 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), true = string_eq (string2) (string1)
Model : string1: "aaz", string2: "zrp"
Model : string1: "lty", string2: "jrt"
Model : string1: "eab", string2: "xrn"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.000537 seconds
Result : false
=================================================
Progress: 1092


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite <- Case2 in goal at 0(rank:12)
case if string_eq (string3) (string2) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite Case2 in goal at 0(rank:28)
=================================================
Progress: 1093


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string1) (string2) then false else true(rank:13)
=================================================
Progress: 1094


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite <- Case2 in goal at 0(rank:13)
rewrite Cond1 in goal at 0(rank:21)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:13)
rewrite <- Case2 in goal at 2(rank:13)
case if any_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 1095


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1096


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1097


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1098


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1099


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1100


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 10
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1101


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string1) (string1) then false else true(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:14)
=================================================
Progress: 1102


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:14)
=================================================
Progress: 1103


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
case if string_eq (string1) (string2) then false else true
case if any_eq (string1) (string1) then false else true
rewrite <- Case1 in goal at 0
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if any_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
Model : string1: "cwn", string2: "awa"
Model : string1: "xml", string2: "xau"
Model : string1: "rvt", string2: "ops"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.005178 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if any_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1104


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if any_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)(rank : 0)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

---------------------------------------
forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 1105


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

---------------------------------------
forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
---------------------------------------
forall (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 1106


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
---------------------------------------
forall (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
---------------------------------------
if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 1107


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
---------------------------------------
if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11)
=================================================
Progress: 1108


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then false else true = true
Cond2 : if string_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
Model : string1: "fbw", string2: "fnv"
Model : string1: "mth", string2: "frb"
Model : string1: "lhh", string2: "wsy"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.003593 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
End of Lemma List


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then false else true = true
Cond2 : if string_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 1109


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then false else true = true
Cond2 : if string_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)(rank : 0)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

---------------------------------------
forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro string1(rank:13)
=================================================
Progress: 1110


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

---------------------------------------
forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
>>> intro string1(rank : 13)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
---------------------------------------
forall (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro string2(rank:13)
=================================================
Progress: 1111


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
---------------------------------------
forall (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
>>> intro string2(rank : 13)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
---------------------------------------
if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:13)
=================================================
Progress: 1112


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
---------------------------------------
if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
>>> intro Cond1(rank : 13)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:13)
=================================================
Progress: 1113


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
>>> intro Cond2(rank : 13)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string2) then false else true = true
Cond2 : if string_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
Model : string1: "yqj", string2: "jli"
Model : string1: "fbw", string2: "dls"
Model : string1: "hns", string2: "cuc"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.003901 seconds
Result : true
=================================================
Progress: 1114


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string1) (string2) then false else true(rank:13)
=================================================
Progress: 1115


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite <- Case2 in goal at 0(rank:13)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
case if any_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 1116


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1117


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1118


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 10
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1119


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then false else true(rank:13)
=================================================
Progress: 1120


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 2(rank:29)
=================================================
Progress: 1121


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string1) (string1) then false else true(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:14)
=================================================
Progress: 1122


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:14)
=================================================
Progress: 1123


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 3
rewrite Case1 in goal at 0
case if string_eq (string3) (string2) then false else true
case if any_eq (string1) (string1) then false else true
rewrite <- Case1 in goal at 0
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), if any_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
Model : string1: "gzc", string2: "coa"
Model : string1: "fco", string2: "npv"
Model : string1: "ouc", string2: "jxh"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.002195 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string2:string), if any_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1124


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), if any_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)(rank : 0)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

---------------------------------------
forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 1125


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

---------------------------------------
forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
---------------------------------------
forall (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 1126


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
---------------------------------------
forall (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
---------------------------------------
if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 1127


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
---------------------------------------
if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
Model : string1: "fmm", string2: "tqk"
Model : string1: "dpk", string2: "bfw"
Model : string1: "qrv", string2: "scs"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.002972 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
End of Lemma List


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 1128


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)(rank : 0)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

---------------------------------------
forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro string1(rank:13)
=================================================
Progress: 1129


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

---------------------------------------
forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
>>> intro string1(rank : 13)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
---------------------------------------
forall (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro string2(rank:13)
=================================================
Progress: 1130


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
---------------------------------------
forall (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
>>> intro string2(rank : 13)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
---------------------------------------
if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:13)
=================================================
Progress: 1131


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
---------------------------------------
if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
>>> intro Cond1(rank : 13)


1st goal of : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
string1 : string
string2 : string
Cond1 : if string_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), if string_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
Model : string1: "tgw", string2: "biu"
Model : string1: "zbz", string2: "kxk"
Model : string1: "ztx", string2: "vef"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.004805 seconds
Result : true
=================================================
Progress: 1132


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 1133


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 1134


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 1135


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case3 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 1136


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1137


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:14)
=================================================
Progress: 1138


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case4 at 0(rank:14)
=================================================
Progress: 1139


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case4 at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case4 in goal at 0(rank:14)
rewrite Case1 in goal at 0(rank:22)
=================================================
Progress: 1140


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case4 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
case if any_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case4 at 0
rewrite <- Case4 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), true = string_eq (string2) (string1)
Model : string1: "lia", string2: "ykc"
Model : string1: "not", string2: "ckm"
Model : string1: "umz", string2: "znl"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.000870 seconds
Result : false
=================================================
Progress: 1141


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case3 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:29)
rewrite <- Case3 in goal at 2(rank:29)
=================================================
Progress: 1142


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1143


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case3 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "xjg", string2: "exh", string3: "dbl"
Model : string1: "dsf", string2: "orv", string3: "izy"
Model : string1: "vfz", string2: "ijw", string3: "vlk"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.006237 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1144


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 1145


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 1146


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string3(rank:11)
=================================================
Progress: 1147


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 1148


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11)
=================================================
Progress: 1149


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:11)
=================================================
Progress: 1150


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:11)
=================================================
Progress: 1151


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond4(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Cond4 : string_eq (string1) (string3) = false
---------------------------------------
if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond5(rank:11)
=================================================
Progress: 1152


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Cond4 : string_eq (string1) (string3) = false
---------------------------------------
if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond5(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Cond4 : string_eq (string1) (string3) = false
Cond5 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
rewrite Cond2 in goal at 0(rank:27)
rewrite Cond4 in goal at 0(rank:27)
=================================================
Progress: 1153


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case1 in goal at 1(rank:29)
rewrite <- Case1 in goal at 2(rank:29)
=================================================
Progress: 1154


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "esv", string2: "myx", string3: "jsq"
Model : string1: "uoz", string2: "vdv", string3: "szj"
Model : string1: "rap", string2: "zlt", string3: "fcl"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.007057 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1155


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 1156


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 1157


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string3(rank:11)
=================================================
Progress: 1158


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 1159


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11)
=================================================
Progress: 1160


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:11)
=================================================
Progress: 1161


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:11)
=================================================
Progress: 1162


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond4(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Cond4 : string_eq (string1) (string3) = false
---------------------------------------
if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond5(rank:11)
=================================================
Progress: 1163


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Cond4 : string_eq (string1) (string3) = false
---------------------------------------
if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond5(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Cond4 : string_eq (string1) (string3) = false
Cond5 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
rewrite Cond2 in goal at 0(rank:27)
rewrite Cond4 in goal at 0(rank:27)
=================================================
Progress: 1164


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1165


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 22)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
case if any_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case4 at 0
rewrite Case1 in goal at 0
advanced_generalize done
=================================================
Progress: 1166


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 27)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank:12)
case string_eq (string1) (string3)(rank:12)
=================================================
Progress: 1167


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 1168


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12)
=================================================
Progress: 1169


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
rewrite <- Case2 in goal at 0(rank:12)
rewrite <- Case2 in goal at 2(rank:12)
rewrite <- Case2 in goal at 3(rank:12)
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank:13)
rewrite Case1 in goal at 0(rank:20)
rewrite Case2 in goal at 0(rank:28)
rewrite <- Case2 in goal at 1(rank:12)
=================================================
Progress: 1170


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then string_eq (string2) (string1) else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string1) (string2) then string_eq (string2) (string1) else true(rank:13)
=================================================
Progress: 1171


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then string_eq (string2) (string3) else true(rank:13)
rewrite Case1 in goal at 0(rank:20)
=================================================
Progress: 1172


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string1) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then string_eq (string2) (string1) else true(rank:13)
=================================================
Progress: 1173


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 3(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank:13)
rewrite Case1 in goal at 0(rank:20)
=================================================
Progress: 1174


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case string_eq (string1) (string3)(rank:14)
rewrite <- Case1 in goal at 0(rank:21)
=================================================
Progress: 1175


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 1176


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case2 in goal at 0(rank:13)
rewrite <- Case2 in goal at 1(rank:13)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case2 in goal at 2(rank:13)
case if any_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1177


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then string_eq (string2) (string1) else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then string_eq (string2) (string1) else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1178


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then string_eq (string2) (string3) else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case2 in goal at 0(rank:13)
rewrite <- Case2 in goal at 1(rank:13)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case2 in goal at 2(rank:13)
case if any_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1179


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string1) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string1) else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case2 in goal at 0(rank:13)
rewrite <- Case2 in goal at 1(rank:13)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case2 in goal at 2(rank:13)
case if any_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1180


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 2(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1181


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case3 in goal at 0(rank:13)
rewrite <- Case3 in goal at 1(rank:13)
rewrite Case3 in goal at 0(rank:29)
rewrite Case3 in goal at 1(rank:29)
rewrite Case3 in goal at 2(rank:29)
rewrite Case3 in goal at 3(rank:29)
rewrite <- Case3 in goal at 2(rank:13)
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1182


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1183


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1184


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1185


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1186


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1187


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1188


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1189


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1190


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1191


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1192


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1193


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:13)
=================================================
Progress: 1194


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1195


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 12
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1196


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1197


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 9
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1198


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1199


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 9
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1200


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1201


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 8
Tactic List : 7
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 1(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case1 in goal at 2(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
rewrite <- Case3 in goal at 1(rank:20)
rewrite <- Case3 in goal at 2(rank:28)
=================================================
Progress: 1202


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1203


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 1204


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case4 at 0(rank:14)
=================================================
Progress: 1205


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string1) (string1) then false else true(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:14)
=================================================
Progress: 1206


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case4 at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:14)
=================================================
Progress: 1207


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:14)
=================================================
Progress: 1208


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case4 in goal at 0(rank:14)
=================================================
Progress: 1209


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 0
case if string_eq (string1) (string2) then string_eq (string2) (string1) else true
case if any_eq (string1) (string1) then false else true
rewrite <- Case1 in goal at 0
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if any_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
Model : string1: "nud", string2: "ppr"
Model : string1: "gwf", string2: "tmb"
Model : string1: "nzb", string2: "svk"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.003689 seconds
Result : true
=================================================
Progress: 1210


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case4 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
case if any_eq (string3) (string1) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case4 at 0
rewrite <- Case1 in goal at 0
rewrite <- Case4 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), true = string_eq (string2) (string1)
Model : string1: "tvr", string2: "jbq"
Model : string1: "nwq", string2: "ooz"
Model : string1: "fqc", string2: "fth"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.000889 seconds
Result : false
=================================================
Progress: 1211


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite <- Case2 in goal at 0(rank:12)
case if string_eq (string3) (string2) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite Case2 in goal at 0(rank:28)
=================================================
Progress: 1212


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string1) (string2) then false else true(rank:13)
=================================================
Progress: 1213


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite <- Case2 in goal at 0(rank:13)
rewrite Cond1 in goal at 0(rank:21)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:13)
rewrite <- Case2 in goal at 2(rank:13)
case if any_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 1214


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1215


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1216


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1217


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1218


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1219


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 10
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1220


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string1) (string1) then false else true(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:14)
=================================================
Progress: 1221


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:14)
=================================================
Progress: 1222


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
case if string_eq (string1) (string2) then false else true
case if any_eq (string1) (string1) then false else true
rewrite <- Case1 in goal at 0
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if any_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
Model : string1: "yzh", string2: "xsf"
Model : string1: "cmk", string2: "xmt"
Model : string1: "gfl", string2: "bjp"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.003607 seconds
Result : true
=================================================
Progress: 1223


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string1) (string2) then false else true(rank:13)
=================================================
Progress: 1224


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite <- Case2 in goal at 0(rank:13)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
case if any_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 1225


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1226


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1227


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 10
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1228


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then false else true(rank:13)
=================================================
Progress: 1229


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 2(rank:29)
=================================================
Progress: 1230


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string1) (string1) then false else true(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:14)
=================================================
Progress: 1231


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:14)
=================================================
Progress: 1232


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 3
rewrite Case1 in goal at 0
case if string_eq (string3) (string2) then false else true
case if any_eq (string1) (string1) then false else true
rewrite <- Case1 in goal at 0
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), if any_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
Model : string1: "jpr", string2: "cus"
Model : string1: "mya", string2: "uax"
Model : string1: "pvk", string2: "jxu"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.003050 seconds
Result : true
=================================================
Progress: 1233


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 1234


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 1235


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 1236


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case3 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 1237


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1238


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:14)
=================================================
Progress: 1239


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case4 at 0(rank:14)
=================================================
Progress: 1240


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case4 at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case4 in goal at 0(rank:14)
rewrite Case1 in goal at 0(rank:22)
=================================================
Progress: 1241


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case4 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
case if any_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case4 at 0
rewrite <- Case4 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), true = string_eq (string2) (string1)
Model : string1: "hst", string2: "sak"
Model : string1: "dnv", string2: "sli"
Model : string1: "kjn", string2: "vse"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.000597 seconds
Result : false
=================================================
Progress: 1242


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case3 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:29)
rewrite <- Case3 in goal at 2(rank:29)
=================================================
Progress: 1243


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1244


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case3 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "fer", string2: "vwc", string3: "mqt"
Model : string1: "bhg", string2: "mtd", string3: "wvm"
Model : string1: "knb", string2: "dpc", string3: "kyc"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.006485 seconds
Result : true
=================================================
Progress: 1245


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case1 in goal at 1(rank:29)
rewrite <- Case1 in goal at 2(rank:29)
=================================================
Progress: 1246


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "clu", string2: "abl", string3: "vod"
Model : string1: "mlx", string2: "wka", string3: "mvg"
Model : string1: "xry", string2: "pfo", string3: "qnr"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.008037 seconds
Result : true
=================================================
Progress: 1247


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1248


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 22)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
case if any_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case4 at 0
rewrite Case1 in goal at 0
advanced_generalize done
=================================================
Progress: 1249


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 27)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank:12)
=================================================
Progress: 1250


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 1(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 1251


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 1252


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1253


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 1
rewrite Case1 in goal at 0(rank:12)
=================================================
Progress: 1254


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:12)
=================================================
Progress: 1255


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case1 in goal at 0
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
case if any_eq (string3) (string1) then false else true
rewrite Case1 in goal at 0
reflexivity
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string3:string), string_eq (string1) (string3) = false->if any_eq (string3) (string1) then false else true = false -> string_eq (string1) (string3) = true
Model : string1: "tjf", string3: "xbi"
Model : string1: "iat", string3: "lbe"
Model : string1: "zse", string3: "emn"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.002295 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string3:string), string_eq (string1) (string3) = false->if any_eq (string3) (string1) then false else true = false -> string_eq (string1) (string3) = true
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1256


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string3:string), string_eq (string1) (string3) = false->if any_eq (string3) (string1) then false else true = false -> string_eq (string1) (string3) = true(rank : 0)


1st goal of : forall (string1:string) (string2:string), string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 1257


1st goal of : forall (string1:string) (string2:string), string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

---------------------------------------
forall (string1:string) (string2:string), string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (string1:string) (string2:string), string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 1258


1st goal of : forall (string1:string) (string2:string), string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
---------------------------------------
forall (string2:string), string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (string1:string) (string2:string), string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 1259


1st goal of : forall (string1:string) (string2:string), string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
---------------------------------------
string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (string1:string) (string2:string), string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11)
=================================================
Progress: 1260


1st goal of : forall (string1:string) (string2:string), string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11)


1st goal of : forall (string1:string) (string2:string), string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : string_eq (string1) (string2) = false
Cond2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:11)
=================================================
Progress: 1261


1st goal of : forall (string1:string) (string2:string), string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : string_eq (string1) (string2) = false
Cond2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 11)


1st goal of : forall (string1:string) (string2:string), string_eq (string1) (string2) = false->if string_eq (string2) (string1) then false else true = false -> string_eq (string1) (string2) = true
string1 : string
string2 : string
Cond1 : string_eq (string1) (string2) = false
Cond2 : if string_eq (string2) (string1) then false else true = false
---------------------------------------
false = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1262


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 27)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank:12)
=================================================
Progress: 1263


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 1(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case1 in goal at 2(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case2 in goal at 1(rank:20)
rewrite <- Case2 in goal at 2(rank:28)
=================================================
Progress: 1264


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1265


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 1266


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 1267


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 1268


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 1269


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case2 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 1270


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:29)
rewrite <- Case2 in goal at 2(rank:29)
=================================================
Progress: 1271


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1272


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case1 in goal at 2
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
rewrite <- Case1 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "ndv", string2: "zso", string3: "nbc"
Model : string1: "xxl", string2: "txr", string3: "oua"
Model : string1: "nkx", string2: "obg", string3: "byp"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.006892 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1273


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 1274


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 1275


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string3(rank:11)
=================================================
Progress: 1276


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 1277


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11)
=================================================
Progress: 1278


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
---------------------------------------
string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:11)
=================================================
Progress: 1279


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
---------------------------------------
string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
---------------------------------------
if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:11)
=================================================
Progress: 1280


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
---------------------------------------
if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond4(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
Cond4 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond5(rank:11)
=================================================
Progress: 1281


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
Cond4 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond5(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
Cond4 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Cond5 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
rewrite Cond2 in goal at 0(rank:27)
rewrite Cond3 in goal at 0(rank:27)
=================================================
Progress: 1282


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case1 in goal at 1(rank:29)
rewrite <- Case1 in goal at 2(rank:29)
=================================================
Progress: 1283


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case1 in goal at 2
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
rewrite <- Case2 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "klk", string2: "dsw", string3: "jwr"
Model : string1: "ifn", string2: "hub", string3: "dwj"
Model : string1: "hvo", string2: "etr", string3: "ukf"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.004290 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1284


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 1285


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 1286


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string3(rank:11)
=================================================
Progress: 1287


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 1288


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11)
=================================================
Progress: 1289


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
---------------------------------------
string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:11)
=================================================
Progress: 1290


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
---------------------------------------
string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
---------------------------------------
if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:11)
=================================================
Progress: 1291


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
---------------------------------------
if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond4(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
Cond4 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond5(rank:11)
=================================================
Progress: 1292


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
Cond4 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond5(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
Cond4 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Cond5 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
rewrite Cond2 in goal at 0(rank:27)
rewrite Cond3 in goal at 0(rank:27)
=================================================
Progress: 1293


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1294


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 27)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string1) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then string_eq (string1) (string3) else true(rank:12)
=================================================
Progress: 1295


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string1) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string1) (string3) else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Case2 in goal at 0(rank:28)
rewrite Case2 in goal at 1(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 1296


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case2 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 1297


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1298


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 1
rewrite Case2 in goal at 0(rank:12)
=================================================
Progress: 1299


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:12)
=================================================
Progress: 1300


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case2 in goal at 0
case if string_eq (string3) (string2) then string_eq (string1) (string3) else true
case if any_eq (string3) (string1) then false else true
rewrite Case2 in goal at 0
reflexivity
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string2:string) (string3:string), string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true
Model : string2: "ypq", string3: "ewm"
Model : string2: "wvm", string3: "usf"
Model : string2: "qwr", string3: "oer"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.002042 seconds
Result : false
=================================================
Progress: 1301


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 27)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string1) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then string_eq (string1) (string3) else true(rank:12)
=================================================
Progress: 1302


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string1) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string1) (string3) else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 1(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case1 in goal at 2(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case2 in goal at 1(rank:20)
rewrite <- Case2 in goal at 2(rank:28)
=================================================
Progress: 1303


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1304


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 1305


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 1306


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 1307


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 1308


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case2 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 1309


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:29)
rewrite <- Case2 in goal at 2(rank:29)
=================================================
Progress: 1310


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1311


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case2 in goal at 2
case if string_eq (string3) (string2) then string_eq (string1) (string3) else true
rewrite <- Case1 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "evi", string2: "vpu", string3: "kiu"
Model : string1: "teb", string2: "kfj", string3: "ihf"
Model : string1: "rbw", string2: "ebf", string3: "slg"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.005801 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1312


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 1313


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 1314


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string3(rank:11)
=================================================
Progress: 1315


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 1316


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11)
=================================================
Progress: 1317


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
---------------------------------------
string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:11)
=================================================
Progress: 1318


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
---------------------------------------
string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
---------------------------------------
if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:11)
=================================================
Progress: 1319


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
---------------------------------------
if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond4(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
Cond4 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond5(rank:11)
=================================================
Progress: 1320


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
Cond4 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond5(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
Cond4 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Cond5 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
rewrite Cond2 in goal at 0(rank:27)
rewrite Cond3 in goal at 0(rank:27)
=================================================
Progress: 1321


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case1 in goal at 1(rank:29)
rewrite <- Case1 in goal at 2(rank:29)
=================================================
Progress: 1322


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case2 in goal at 2
case if string_eq (string3) (string2) then string_eq (string1) (string3) else true
rewrite <- Case2 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "njo", string2: "gti", string3: "yvn"
Model : string1: "dqp", string2: "dbl", string3: "vzd"
Model : string1: "sql", string2: "ckf", string3: "dzl"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.005729 seconds
Result : true
New Env

;;
Lemma List
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 1323


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11)
=================================================
Progress: 1324


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11)
=================================================
Progress: 1325


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
---------------------------------------
forall (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string3(rank:11)
=================================================
Progress: 1326


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
---------------------------------------
forall (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11)
=================================================
Progress: 1327


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
---------------------------------------
list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11)
=================================================
Progress: 1328


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
---------------------------------------
string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
---------------------------------------
string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:11)
=================================================
Progress: 1329


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
---------------------------------------
string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond3(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
---------------------------------------
if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond4(rank:11)
=================================================
Progress: 1330


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
---------------------------------------
if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond4(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
Cond4 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond5(rank:11)
=================================================
Progress: 1331


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
Cond4 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond5(rank : 11)


1st goal of : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
string1 : string
string2 : string
string3 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Cond2 : string_eq (string2) (string3) = false
Cond3 : string_eq (string1) (string3) = false
Cond4 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Cond5 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
rewrite Cond2 in goal at 0(rank:27)
rewrite Cond3 in goal at 0(rank:27)
=================================================
Progress: 1332


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1333


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 27)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank:12)
=================================================
Progress: 1334


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 1(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 1335


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 1336


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1337


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 1
rewrite Case1 in goal at 0(rank:12)
=================================================
Progress: 1338


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:12)
=================================================
Progress: 1339


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case1 in goal at 0
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
case if any_eq (string3) (string1) then false else true
rewrite Case1 in goal at 0
reflexivity
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string3:string), string_eq (string1) (string3) = false->if any_eq (string3) (string1) then false else true = false -> string_eq (string1) (string3) = true
Model : string1: "zup", string3: "zeu"
Model : string1: "mai", string3: "hqj"
Model : string1: "ccq", string3: "fmw"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.003642 seconds
Result : true
=================================================
Progress: 1340


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 27)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank:12)
=================================================
Progress: 1341


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 1(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case1 in goal at 2(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case2 in goal at 1(rank:20)
rewrite <- Case2 in goal at 2(rank:28)
=================================================
Progress: 1342


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1343


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 1344


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 1345


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 1346


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 1347


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case2 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 1348


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:29)
rewrite <- Case2 in goal at 2(rank:29)
=================================================
Progress: 1349


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1350


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case1 in goal at 2
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
rewrite <- Case1 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "zfr", string2: "ysk", string3: "hzr"
Model : string1: "czi", string2: "ami", string3: "one"
Model : string1: "uib", string2: "hla", string3: "odg"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.005968 seconds
Result : true
=================================================
Progress: 1351


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case1 in goal at 1(rank:29)
rewrite <- Case1 in goal at 2(rank:29)
=================================================
Progress: 1352


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case1 in goal at 2
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
rewrite <- Case2 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "ybd", string2: "rzc", string3: "eus"
Model : string1: "hgn", string2: "rxq", string3: "xlf"
Model : string1: "esh", string2: "xkv", string3: "ymr"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.008743 seconds
Result : true
=================================================
Progress: 1353


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1354


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 27)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string1) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then string_eq (string1) (string3) else true(rank:12)
=================================================
Progress: 1355


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string1) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string1) (string3) else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Case2 in goal at 0(rank:28)
rewrite Case2 in goal at 1(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 1356


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case2 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 1357


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1358


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 1
rewrite Case2 in goal at 0(rank:12)
=================================================
Progress: 1359


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:12)
=================================================
Progress: 1360


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case2 in goal at 0
case if string_eq (string3) (string2) then string_eq (string1) (string3) else true
case if any_eq (string3) (string1) then false else true
rewrite Case2 in goal at 0
reflexivity
rewrite Case2 in goal at 0
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string2:string) (string3:string), string_eq (string2) (string3) = false -> string_eq (string2) (string3) = true
Model : string2: "hgy", string3: "dhf"
Model : string2: "phr", string3: "hbx"
Model : string2: "ldq", string3: "uwf"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.001260 seconds
Result : false
=================================================
Progress: 1361


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 27)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string1) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then string_eq (string1) (string3) else true(rank:12)
=================================================
Progress: 1362


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string1) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string1) (string3) else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 1(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case1 in goal at 2(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case2 in goal at 1(rank:20)
rewrite <- Case2 in goal at 2(rank:28)
=================================================
Progress: 1363


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1364


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 1365


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 1366


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 1367


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 1368


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case2 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 1369


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:29)
rewrite <- Case2 in goal at 2(rank:29)
=================================================
Progress: 1370


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1371


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case2 in goal at 2
case if string_eq (string3) (string2) then string_eq (string1) (string3) else true
rewrite <- Case1 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "fnz", string2: "fty", string3: "akz"
Model : string1: "oaq", string2: "hvz", string3: "dfr"
Model : string1: "qym", string2: "ngg", string3: "uvt"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.006075 seconds
Result : true
=================================================
Progress: 1372


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case1 in goal at 1(rank:29)
rewrite <- Case1 in goal at 2(rank:29)
=================================================
Progress: 1373


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case2 in goal at 2
case if string_eq (string3) (string2) then string_eq (string1) (string3) else true
rewrite <- Case2 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "jyo", string2: "cqg", string3: "hhz"
Model : string1: "uee", string2: "kdh", string3: "sgg"
Model : string1: "yhx", string2: "iyi", string3: "smt"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.008038 seconds
Result : true
=================================================
Progress: 1374


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1375


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 27)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank:12)
case string_eq (string1) (string3)(rank:12)
=================================================
Progress: 1376


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
case string_eq (string1) (string3)(rank:13)
=================================================
Progress: 1377


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:12)
=================================================
Progress: 1378


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
rewrite <- Case2 in goal at 0(rank:12)
rewrite <- Case2 in goal at 2(rank:12)
rewrite <- Case2 in goal at 3(rank:12)
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank:13)
rewrite Case1 in goal at 0(rank:20)
rewrite Case2 in goal at 0(rank:28)
rewrite <- Case2 in goal at 1(rank:12)
=================================================
Progress: 1379


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then string_eq (string2) (string1) else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string1) (string2) then string_eq (string2) (string1) else true(rank:13)
=================================================
Progress: 1380


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then string_eq (string2) (string3) else true(rank:13)
rewrite Case1 in goal at 0(rank:20)
=================================================
Progress: 1381


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string1) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then string_eq (string2) (string1) else true(rank:13)
=================================================
Progress: 1382


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 3(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank:13)
rewrite Case1 in goal at 0(rank:20)
=================================================
Progress: 1383


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case string_eq (string1) (string3)(rank:14)
rewrite <- Case1 in goal at 0(rank:21)
=================================================
Progress: 1384


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:13)
=================================================
Progress: 1385


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case2 in goal at 0(rank:13)
rewrite <- Case2 in goal at 1(rank:13)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case2 in goal at 2(rank:13)
case if any_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1386


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then string_eq (string2) (string1) else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then string_eq (string2) (string1) else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1387


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then string_eq (string2) (string3) else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case2 in goal at 0(rank:13)
rewrite <- Case2 in goal at 1(rank:13)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case2 in goal at 2(rank:13)
case if any_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1388


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string1) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string1) else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case2 in goal at 0(rank:13)
rewrite <- Case2 in goal at 1(rank:13)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case2 in goal at 2(rank:13)
case if any_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1389


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 2(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1390


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case3 in goal at 0(rank:13)
rewrite <- Case3 in goal at 1(rank:13)
rewrite Case3 in goal at 0(rank:29)
rewrite Case3 in goal at 1(rank:29)
rewrite Case3 in goal at 2(rank:29)
rewrite Case3 in goal at 3(rank:29)
rewrite <- Case3 in goal at 2(rank:13)
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1391


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1392


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1393


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1394


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1395


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1396


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1397


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1398


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1399


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1400


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1401


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1402


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:13)
=================================================
Progress: 1403


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1404


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 12
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1405


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1406


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string3) else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 9
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1407


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1408


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string1) else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 9
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1409


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1410


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string1 = string3
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 8
Tactic List : 7
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 1(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case1 in goal at 2(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
rewrite <- Case3 in goal at 1(rank:20)
rewrite <- Case3 in goal at 2(rank:28)
=================================================
Progress: 1411


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1412


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 1413


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case4 at 0(rank:14)
=================================================
Progress: 1414


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string1) (string1) then false else true(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:14)
=================================================
Progress: 1415


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case4 at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:14)
=================================================
Progress: 1416


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:14)
=================================================
Progress: 1417


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case4 in goal at 0(rank:14)
=================================================
Progress: 1418


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 0
case if string_eq (string1) (string2) then string_eq (string2) (string1) else true
case if any_eq (string1) (string1) then false else true
rewrite <- Case1 in goal at 0
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), if string_eq (string1) (string2) then string_eq (string2) (string1) else true = true->if any_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
Model : string1: "hmk", string2: "khc"
Model : string1: "qpc", string2: "mdx"
Model : string1: "xrn", string2: "fkt"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.003568 seconds
Result : true
=================================================
Progress: 1419


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case4 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
case if any_eq (string3) (string1) then false else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case4 at 0
rewrite <- Case1 in goal at 0
rewrite <- Case4 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), true = string_eq (string2) (string1)
Model : string1: "zba", string2: "nid"
Model : string1: "snm", string2: "dat"
Model : string1: "aai", string2: "cwv"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.000516 seconds
Result : false
=================================================
Progress: 1420


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite <- Case2 in goal at 0(rank:12)
case if string_eq (string3) (string2) then false else true(rank:13)
rewrite Cond1 in goal at 0(rank:20)
rewrite Case2 in goal at 0(rank:28)
=================================================
Progress: 1421


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string1) (string2) then false else true(rank:13)
=================================================
Progress: 1422


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite <- Case2 in goal at 0(rank:13)
rewrite Cond1 in goal at 0(rank:21)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:13)
rewrite <- Case2 in goal at 2(rank:13)
case if any_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 1423


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 0(rank:29)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1424


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1425


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1426


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 2(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string3) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:14)
rewrite <- Case1 in goal at 0(rank:29)
=================================================
Progress: 1427


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1428


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : true = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 10
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1429


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string1) (string1) then false else true(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:14)
=================================================
Progress: 1430


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:14)
=================================================
Progress: 1431


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
case if string_eq (string1) (string2) then false else true
case if any_eq (string1) (string1) then false else true
rewrite <- Case1 in goal at 0
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), if string_eq (string1) (string2) then false else true = true->if any_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
Model : string1: "itm", string2: "hso"
Model : string1: "cjp", string2: "znn"
Model : string1: "qkl", string2: "uxa"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.003554 seconds
Result : true
=================================================
Progress: 1432


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string1) (string2) then false else true(rank:13)
=================================================
Progress: 1433


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string1) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string1) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite <- Case2 in goal at 0(rank:13)
rewrite Case2 in goal at 1(rank:29)
rewrite Case2 in goal at 2(rank:29)
rewrite Case2 in goal at 3(rank:29)
rewrite <- Case1 in goal at 0(rank:29)
case if any_eq (string3) (string1) then false else true(rank:14)
=================================================
Progress: 1434


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:13)
=================================================
Progress: 1435


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if string_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1436


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = true
---------------------------------------
true = list_eq (if if true then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string1) (string2) then false else true = false
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 10
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1437


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then false else true(rank:13)
=================================================
Progress: 1438


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string1::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string1) (string1) then false else true(rank:14)
rewrite Case2 in goal at 2(rank:29)
=================================================
Progress: 1439


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
---------------------------------------
true = list_eq (if if any_eq (string1) (string1) then false else true then (string1::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string1) (string1) then false else true(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:14)
=================================================
Progress: 1440


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:14)
=================================================
Progress: 1441


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Case3 : if string_eq (string3) (string2) then false else true = true
Case4 : if any_eq (string1) (string1) then false else true = true
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 3
rewrite Case1 in goal at 0
case if string_eq (string3) (string2) then false else true
case if any_eq (string1) (string1) then false else true
rewrite <- Case1 in goal at 0
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), if any_eq (string1) (string1) then false else true = true -> true = string_eq (string2) (string1)
Model : string1: "duk", string2: "hno"
Model : string1: "dvx", string2: "dru"
Model : string1: "eqp", string2: "vuw"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.003718 seconds
Result : true
=================================================
Progress: 1442


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case3 in goal at 0(rank:28)
=================================================
Progress: 1443


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 1444


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 1445


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (if if string_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case3 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case3 in goal at 0(rank:21)
=================================================
Progress: 1446


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1447


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string3)(rank:14)
=================================================
Progress: 1448


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 ((Nil)) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case4 at 0(rank:14)
=================================================
Progress: 1449


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string_eq (string1) (string3) = true
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case4 at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case4 in goal at 0(rank:14)
rewrite Case1 in goal at 0(rank:22)
=================================================
Progress: 1450


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case4 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string1)

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
case if any_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case4 at 0
rewrite <- Case4 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string), true = string_eq (string2) (string1)
Model : string1: "mxb", string2: "ens"
Model : string1: "deq", string2: "dsf"
Model : string1: "onn", string2: "blc"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.000452 seconds
Result : false
=================================================
Progress: 1451


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case3 in goal at 0(rank:29)
rewrite <- Case3 in goal at 1(rank:29)
rewrite <- Case3 in goal at 2(rank:29)
=================================================
Progress: 1452


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1453


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case3 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "piq", string2: "zxl", string3: "nkg"
Model : string1: "bqg", string2: "vbg", string3: "tmx"
Model : string1: "qsm", string2: "cuz", string3: "lqm"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.007734 seconds
Result : true
=================================================
Progress: 1454


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case1 in goal at 1(rank:29)
rewrite <- Case1 in goal at 2(rank:29)
=================================================
Progress: 1455


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case3 at 0
rewrite <- Case3 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case3 in goal at 1
case if string_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->string_eq (string1) (string3) = false->if string_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "lvz", string2: "jxn", string3: "klj"
Model : string1: "lzd", string2: "fae", string3: "vdl"
Model : string1: "xrd", string2: "rsy", string3: "qnv"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.007661 seconds
Result : true
=================================================
Progress: 1456


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : string_eq (string1) (string3) = false
Case4 : if string_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1457


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = string_eq (string2) (string3)

5 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 22)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case3 : if string_eq (string3) (string1) then false else true = true
Case4 : string1 = string3
---------------------------------------
true = false

5 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- Case1 in goal at 0
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
case if any_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case4 at 0
rewrite Case1 in goal at 0
advanced_generalize done
=================================================
Progress: 1458


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 27)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank:12)
=================================================
Progress: 1459


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string2) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Case1 in goal at 0(rank:28)
rewrite Case1 in goal at 1(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 1460


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 1461


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1462


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 1
rewrite Case1 in goal at 0(rank:12)
=================================================
Progress: 1463


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string2) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:12)
=================================================
Progress: 1464


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
string_eq (string1) (string3) = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case1 in goal at 0
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
case if any_eq (string3) (string1) then false else true
rewrite Case1 in goal at 0
reflexivity
rewrite Case1 in goal at 0
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string3:string), string_eq (string1) (string3) = false->if any_eq (string3) (string1) then false else true = false -> string_eq (string1) (string3) = true
Model : string1: "gjn", string3: "bwb"
Model : string1: "ton", string3: "xgf"
Model : string1: "qhs", string3: "bjk"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.001825 seconds
Result : true
=================================================
Progress: 1465


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 27)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank:12)
=================================================
Progress: 1466


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string2) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string2) (string3) else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 1(rank:20)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case1 in goal at 2(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
rewrite <- Case2 in goal at 1(rank:20)
rewrite <- Case2 in goal at 2(rank:28)
=================================================
Progress: 1467


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12)
=================================================
Progress: 1468


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = false
---------------------------------------
false = true

3 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 1469


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 1470


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string2) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 1471


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
false = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 1(rank : 20)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite <- Case1 in goal at 0(rank:28)
=================================================
Progress: 1472


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case2 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 1473


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case2 in goal at 0(rank:29)
rewrite <- Case2 in goal at 1(rank:29)
rewrite <- Case2 in goal at 2(rank:29)
=================================================
Progress: 1474


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1475


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string2) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case1 in goal at 2
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
rewrite <- Case1 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case2 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string2) (string3) = string_eq (string1) (string3)
Model : string1: "ren", string2: "exg", string3: "atp"
Model : string1: "fpm", string2: "xxe", string3: "dpt"
Model : string1: "wtf", string2: "epi", string3: "frf"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.004045 seconds
Result : true
=================================================
Progress: 1476


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:29)
rewrite <- Case1 in goal at 1(rank:29)
rewrite <- Case1 in goal at 2(rank:29)
=================================================
Progress: 1477


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string2) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
case if string_eq (string3) (string2) then false else true
rewrite <- Case2 in goal at 0
rewrite string_refl in goal at 0
reflexivity
reflexivity
rewrite <- Case1 in goal at 2
case if string_eq (string3) (string2) then string_eq (string2) (string3) else true
rewrite <- Case2 in goal at 1
case if any_eq (string3) (string1) then false else true
rewrite <- Case1 in goal at 0
advanced_generalize done
Lemma : forall (string1:string) (string2:string) (string3:string), list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true->string_eq (string2) (string3) = false->string_eq (string1) (string3) = false->if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true->if any_eq (string3) (string1) then false else true = true -> string_eq (string1) (string3) = string_eq (string2) (string3)
Model : string1: "vyr", string2: "uvb", string3: "bth"
Model : string1: "oio", string2: "pce", string3: "ylq"
Model : string1: "nvm", string2: "viz", string3: "ngx"
Substituting variables...
Simplifying conditions and property...
Simplifying took 0.008483 seconds
Result : true
=================================================
Progress: 1478


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string2) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = string_eq (string1) (string3)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 1479


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
false = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 27)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string1) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then string_eq (string1) (string3) else true(rank:12)
=================================================
Progress: 1480


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
string_eq (string1) (string3) = list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then string_eq (string1) (string3) else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> case if string_eq (string3) (string2) then string_eq (string1) (string3) else true(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
case if any_eq (string3) (string1) then false else true(rank:13)
rewrite Case2 in goal at 0(rank:28)
rewrite Case2 in goal at 1(rank:28)
rewrite <- Case1 in goal at 0(rank:28)
rewrite <- Case2 in goal at 0(rank:28)
=================================================
Progress: 1481


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
---------------------------------------
string_eq (string1) (string3) = list_eq (if if any_eq (string3) (string1) then false else true then (string3::filter (aux (string1)) ((Nil))) else filter (aux (string1)) ((Nil))) ((Nil))

3 goal(s) more...

3 conjecture(s) more...
>>> case if any_eq (string3) (string1) then false else true(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case2 in goal at 0(rank:21)
rewrite <- Case1 in goal at 0(rank:21)
rewrite <- Case2 in goal at 0(rank:21)
=================================================
Progress: 1482


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
string_eq (string1) (string3) = false

4 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil)) = true -> sub_check_ta1 (lambda1) ((string2::(string1::(Nil)))) = list_eq (filter (aux (string1)) (filter (aux (string2)) (getStn (lambda1)))) ((Nil))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Cond1 : list_eq (filter (aux (string1)) (if if string_eq (string3) (string2) then false else true then (string3::filter (aux (string2)) ((Nil))) else filter (aux (string2)) ((Nil)))) ((Nil)) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
Case3 : if string_eq (string3) (string2) then string_eq (string1) (string3) else true = true
Case4 : if any_eq (string3) (string1) then false else true = true
---------------------------------------
false = false

4 goal(s) more...

3 conjecture(s) more...
