Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (l:lambda), check_ta1 (l) = check (l)(rank : 0.)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:3.)
=================================================
Progress: 2


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3.)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) ((Nil)) = sub_check (lambda1) ((Nil))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:5.)
=================================================
Progress: 3


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) ((Nil)) = sub_check (lambda1) ((Nil))

0 goal(s) more...

0 conjecture(s) more...
>>> induction lambda1(rank : 5.)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
sub_check_ta1 (V (string1)) ((Nil)) = sub_check (V (string1)) ((Nil))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:4.)
=================================================
Progress: 4


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
sub_check_ta1 (V (string1)) ((Nil)) = sub_check (V (string1)) ((Nil))

2 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 4.)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = sub_check (lambda2) ((Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (P (string1) (lambda2)) ((Nil)) = sub_check (P (string1) (lambda2)) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:4.)
=================================================
Progress: 5


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = sub_check (lambda2) ((Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (P (string1) (lambda2)) ((Nil)) = sub_check (P (string1) (lambda2)) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 4.)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = sub_check (lambda2) ((Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = sub_check (lambda2) ((string1::(Nil)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
parent
(string1::(Nil))
lower
Cons(_, Nil())
upper
sub_check_ta1(lambda2, _)
remove upper
Nil()
remove lower
Nil()
remove upper
Cons(string1, Nil())
remove lower
Cons(string1, Nil())
remove upper
Cons(string2, Cons(string1, Nil()))
remove lower
Cons(string2, Cons(string1, Nil()))
remove upper
Cons(string3, Cons(string2, Cons(string1, Nil())))
remove lower
Cons(string3, Cons(string2, Cons(string1, Nil())))
parent
(string1::(Nil))
lower
Cons(_, Nil())
upper
sub_check(lambda2, _)
remove upper
Nil()
remove lower
Nil()
remove upper
Cons(string1, Nil())
remove lower
Cons(string1, Nil())
Prop: sub_check_ta1 (C (V ("rux")) (V ("rwi"))) (("swi"::(Nil))) = sub_check (C (V ("rux")) (V ("rwi"))) (("swi"::(Nil)))
Prop: sub_check_ta1 (V ("bnx")) (("zlz"::(Nil))) = sub_check (V ("bnx")) (("zlz"::(Nil)))
Prop: sub_check_ta1 (V ("kxk")) ((Nil)) = sub_check (V ("kxk")) ((Nil))
Lemma List
forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
End of Lemma List


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = sub_check (lambda2) ((Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = sub_check (lambda2) ((string1::(Nil)))

1 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 6


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = sub_check (lambda2) ((Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = sub_check (lambda2) ((string1::(Nil)))

1 goal(s) more...

0 conjecture(s) more...
>>> assert forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)(rank : 0.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)

---------------------------------------
forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:7.)
=================================================
Progress: 7


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)

---------------------------------------
forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)

0 goal(s) more...

1 conjecture(s) more...
>>> induction lambda1(rank : 7.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (V (string1)) (string_list1) = sub_check (V (string1)) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 8


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (V (string1)) (string_list1) = sub_check (V (string1)) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
forall (string_list1:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction string_list1(rank:8.)
=================================================
Progress: 9


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
forall (string_list1:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
>>> induction string_list1(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
Base2 : string_list1 = (Nil)
---------------------------------------
is_mem_ta1 ((Nil)) (string1) = mem (string1) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 10


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
Base2 : string_list1 = (Nil)
---------------------------------------
is_mem_ta1 ((Nil)) (string1) = mem (string1) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = mem (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
is_mem_ta1 ((string2::string_list2)) (string1) = mem (string1) ((string2::string_list2))

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 11


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = mem (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
is_mem_ta1 ((string2::string_list2)) (string1) = mem (string1) ((string2::string_list2))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = mem (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = if string_eq (string2) (string1) then true else mem (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string1)(rank:8.)
=================================================
Progress: 12


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = mem (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = if string_eq (string2) (string1) then true else mem (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = mem (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = true
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 13


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = mem (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = true
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = mem (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
is_mem_ta1 (string_list2) (string1) = mem (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite IH1 in goal at 0(rank:15.)
rewrite <- IH1 in goal at 0(rank:15.)
=================================================
Progress: 14


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = mem (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
is_mem_ta1 (string_list2) (string1) = mem (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 15.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = mem (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
mem (string1) (string_list2) = mem (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:6.)
=================================================
Progress: 15


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = mem (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
mem (string1) (string_list2) = mem (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 6.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (P (string1) (lambda2)) (string_list1) = sub_check (P (string1) (lambda2)) (string_list1)

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 1
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 16


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (P (string1) (lambda2)) (string_list1) = sub_check (P (string1) (lambda2)) (string_list1)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (lambda2) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:6.)
=================================================
Progress: 17


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (lambda2) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1))

1 goal(s) more...

1 conjecture(s) more...
>>> intro string_list1(rank : 6.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
---------------------------------------
sub_check_ta1 (lambda2) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case mem (string1) (string_list1)(rank:7.)
rewrite IH1 in goal at 0(rank:22.)
rewrite <- IH1 in goal at 0(rank:22.)
rewrite <- IH1 in goal at 1(rank:22.)
rewrite <- IH1 in goal at 2(rank:22.)
=================================================
Progress: 18


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
---------------------------------------
sub_check_ta1 (lambda2) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1))

1 goal(s) more...

1 conjecture(s) more...
>>> case mem (string1) (string_list1)(rank : 7.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:15.)
rewrite <- IH1 in goal at 0(rank:15.)
=================================================
Progress: 19


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 15.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 2(rank:7.)
=================================================
Progress: 20


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 7.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string2) (string1)
reflexivity
rewrite IH1 in goal at 0
reflexivity
simpl in goal
intro string_list1
case mem (string1) (string_list1)
rewrite IH1 in goal at 0
rewrite <- IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: sub_check (V ("jvo")) (("dun"::(Nil))) = sub_check_ta1 (V ("jvo")) ((Nil))
Prop: sub_check (V ("mhz")) (("tgt"::(Nil))) = sub_check_ta1 (V ("mhz")) ((Nil))
Prop: sub_check (V ("bxw")) (("ike"::(Nil))) = sub_check_ta1 (V ("bxw")) ((Nil))
previous tactics
simpl in goal
case string_eq (string2) (string1)
reflexivity
rewrite IH1 in goal at 0
reflexivity
simpl in goal
intro string_list1
case mem (string1) (string_list1)
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: sub_check (V ("smi")) (("rya"::(Nil))) = sub_check (V ("smi")) ((Nil))
Prop: sub_check (C (C (V ("lbn")) (C (V ("qdq")) (V ("mzj")))) (V ("bli"))) (("cda"::(Nil))) = sub_check (C (C (V ("lbn")) (C (V ("qdq")) (V ("mzj")))) (V ("bli"))) ((Nil))
Prop: sub_check (V ("otp")) (("mvl"::(Nil))) = sub_check (V ("otp")) ((Nil))
previous tactics
simpl in goal
case string_eq (string2) (string1)
reflexivity
rewrite IH1 in goal at 0
reflexivity
simpl in goal
intro string_list1
case mem (string1) (string_list1)
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("tje")) (("gcq"::(Nil))) = sub_check (V ("tje")) ((Nil))
Prop: sub_check_ta1 (P ("xiz") (V ("yen"))) (("wlo"::("bzv"::(Nil)))) = sub_check (P ("xiz") (V ("yen"))) (("bzv"::(Nil)))
Prop: sub_check_ta1 (V ("sjv")) (("pmw"::(Nil))) = sub_check (V ("sjv")) ((Nil))
Lemma List
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
End of Lemma List


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
End of Lemma List


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
End of Lemma List


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 21


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7.)
=================================================
Progress: 22


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7.)
=================================================
Progress: 23


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7.)
=================================================
Progress: 24


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:7.)
=================================================
Progress: 25


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:7.)
=================================================
Progress: 26


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:7.)
=================================================
Progress: 27


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string_list1(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 28


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string_list1(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 29


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string_list1(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 30


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:9.)
=================================================
Progress: 31


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
---------------------------------------
forall (lambda1:lambda), sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:9.)
=================================================
Progress: 32


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
---------------------------------------
forall (lambda1:lambda), sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:9.)
=================================================
Progress: 33


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
sub_check_ta1 (V (string2)) ((string1::string_list1)) = sub_check (V (string2)) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 34


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
---------------------------------------
forall (lambda1:lambda), sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
sub_check (V (string2)) ((string1::string_list1)) = sub_check (V (string2)) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 35


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
---------------------------------------
forall (lambda1:lambda), sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
sub_check (V (string2)) ((string1::string_list1)) = sub_check_ta1 (V (string2)) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 36


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
sub_check_ta1 (V (string2)) ((string1::string_list1)) = sub_check (V (string2)) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = mem (string2) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case string_eq (string1) (string2)(rank:10.)
rewrite <- Cond1 in goal at 0(rank:25.)
=================================================
Progress: 37


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
sub_check (V (string2)) ((string1::string_list1)) = sub_check (V (string2)) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
if string_eq (string1) (string2) then true else mem (string2) (string_list1) = mem (string2) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case string_eq (string1) (string2)(rank:10.)
rewrite <- Cond1 in goal at 0(rank:25.)
=================================================
Progress: 38


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
sub_check (V (string2)) ((string1::string_list1)) = sub_check_ta1 (V (string2)) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
if string_eq (string1) (string2) then true else mem (string2) (string_list1) = is_mem_ta1 (string_list1) (string2)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case string_eq (string1) (string2)(rank:10.)
rewrite <- Cond1 in goal at 0(rank:25.)
=================================================
Progress: 39


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = mem (string2) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = mem (string2) (string_list1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 1(rank:10.)
=================================================
Progress: 40


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
if string_eq (string1) (string2) then true else mem (string2) (string_list1) = mem (string2) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = mem (string2) (string_list1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 1(rank:10.)
=================================================
Progress: 41


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
if string_eq (string1) (string2) then true else mem (string2) (string_list1) = is_mem_ta1 (string_list1) (string2)

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 1(rank:10.)
=================================================
Progress: 42


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = mem (string2) (string_list1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 1(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = mem (string2) (string_list1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:10.)
rewrite <- Cond1 in goal at 0(rank:18.)
=================================================
Progress: 43


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = mem (string2) (string_list1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 1(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = mem (string2) (string_list1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:10.)
rewrite <- Cond1 in goal at 0(rank:18.)
=================================================
Progress: 44


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 1(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:10.)
rewrite <- Cond1 in goal at 0(rank:18.)
=================================================
Progress: 45


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = mem (string2) (string_list1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = mem (string1) (string_list1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite Cond1 in goal at 0(rank:18.)
rewrite <- Cond1 in goal at 0(rank:18.)
=================================================
Progress: 46


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = mem (string2) (string_list1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = mem (string1) (string_list1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite Cond1 in goal at 0(rank:18.)
rewrite <- Cond1 in goal at 0(rank:18.)
=================================================
Progress: 47


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = is_mem_ta1 (string_list1) (string1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- Cond1 in goal at 0(rank:10.)
=================================================
Progress: 48


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = is_mem_ta1 (string_list1) (string1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite <- Case1 in goal at 0
rewrite <- Cond1 in goal at 0
validate generalize_common_subterm_goal
Prop: mem ("jlw") ((Nil)) = is_mem_ta1 ((Nil)) ("jlw")
Prop: mem ("wno") ((Nil)) = is_mem_ta1 ((Nil)) ("wno")
Prop: mem ("lxl") ((Nil)) = is_mem_ta1 ((Nil)) ("lxl")
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: true = is_mem_ta1 ((Nil)) ("pcz")
Prop: true = is_mem_ta1 (("ehc"::(Nil))) ("tvs")
Prop: true = is_mem_ta1 (("vfw"::(Nil))) ("tpc")
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
validate generalize_common_subterm_goal
Prop: true = is_mem_ta1 (("psj"::(Nil))) ("gpt")
Prop: true = is_mem_ta1 ((Nil)) ("fms")
Prop: true = is_mem_ta1 (("qlz"::(Nil))) ("vks")
asdf
previous tactics
simpl in goal
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
Prop: true = is_mem_ta1 (("shr"::("huu"::(Nil)))) ("kzk")
Prop: true = is_mem_ta1 (("xpv"::(Nil))) ("jnc")
Prop: true = is_mem_ta1 ((Nil)) ("ztj")
asdf
Lemma List
forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = is_mem_ta1 (string_list1) (string1)

3 goal(s) more...

2 conjecture(s) more...
Lemma List
forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)

3 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 49


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = is_mem_ta1 (string_list1) (string1)

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)(rank : 0.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)

---------------------------------------
forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:9.)
=================================================
Progress: 50


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)(rank : 0.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)

---------------------------------------
forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:9.)
=================================================
Progress: 51


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)

---------------------------------------
forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 9.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
---------------------------------------
forall (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction string_list1(rank:10.)
=================================================
Progress: 52


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)

---------------------------------------
forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 9.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string1 : string
---------------------------------------
forall (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction string_list1(rank:10.)
=================================================
Progress: 53


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
---------------------------------------
forall (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> induction string_list1(rank : 10.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
mem (string1) ((Nil)) = true -> true = is_mem_ta1 ((Nil)) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:9.)
=================================================
Progress: 54


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
mem (string1) ((Nil)) = true -> true = is_mem_ta1 ((Nil)) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 9.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
mem (string1) ((string2::string_list2)) = true -> true = is_mem_ta1 ((string2::string_list2)) (string1)

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 55


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
mem (string1) ((string2::string_list2)) = true -> true = is_mem_ta1 ((string2::string_list2)) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else mem (string1) (string_list2) = true -> true = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 56


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else mem (string1) (string_list2) = true -> true = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : if string_eq (string2) (string1) then true else mem (string1) (string_list2) = true
---------------------------------------
true = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
case string_eq (string2) (string1)(rank:10.)
rewrite <- IH1 in goal at 1(rank:18.)
rewrite IH1 in goal at 1(rank:18.)
rewrite IH1 in goal at 2(rank:26.)
=================================================
Progress: 57


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string1 : string
---------------------------------------
forall (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> induction string_list1(rank : 10.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
mem (string1) ((Nil)) = true -> mem (string1) ((Nil)) = is_mem_ta1 ((Nil)) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 58


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
mem (string1) ((Nil)) = true -> mem (string1) ((Nil)) = is_mem_ta1 ((Nil)) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
mem (string1) ((string2::string_list2)) = true -> mem (string1) ((string2::string_list2)) = is_mem_ta1 ((string2::string_list2)) (string1)

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 59


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
mem (string1) ((string2::string_list2)) = true -> mem (string1) ((string2::string_list2)) = is_mem_ta1 ((string2::string_list2)) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else mem (string1) (string_list2) = true -> if string_eq (string2) (string1) then true else mem (string1) (string_list2) = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 60


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else mem (string1) (string_list2) = true -> if string_eq (string2) (string1) then true else mem (string1) (string_list2) = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : if string_eq (string2) (string1) then true else mem (string1) (string_list2) = true
---------------------------------------
if string_eq (string2) (string1) then true else mem (string1) (string_list2) = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string1)(rank:10.)
=================================================
Progress: 61


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : if string_eq (string2) (string1) then true else mem (string1) (string_list2) = true
---------------------------------------
true = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 10.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : true = true
Case1 : string_eq (string2) (string1) = true
---------------------------------------
true = true

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 62


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : true = true
Case1 : string_eq (string2) (string1) = true
---------------------------------------
true = true

1 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : mem (string1) (string_list2) = true
Case1 : string_eq (string2) (string1) = false
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 3
rewrite <- Cond1 in goal at 0(rank:17.)
rewrite IH1 in goal at 1(rank:18.)
rewrite <- IH1 in goal at 1(rank:18.)
=================================================
Progress: 63


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : if string_eq (string2) (string1) then true else mem (string1) (string_list2) = true
---------------------------------------
if string_eq (string2) (string1) then true else mem (string1) (string_list2) = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 10.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : true = true
Case1 : string_eq (string2) (string1) = true
---------------------------------------
true = true

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 64


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : true = true
Case1 : string_eq (string2) (string1) = true
---------------------------------------
true = true

1 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : mem (string1) (string_list2) = true
Case1 : string_eq (string2) (string1) = false
---------------------------------------
mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 3
rewrite IH1 in goal at 1(rank:18.)
rewrite Cond1 in goal at 0(rank:25.)
rewrite <- IH1 in goal at 1(rank:18.)
=================================================
Progress: 65


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 15.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string2) (string1)
reflexivity
rewrite IH1 in goal at 0
reflexivity
simpl in goal
intro string_list1
case mem (string1) (string_list1)
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (C (V ("djb")) (V ("sye"))) (("qlw"::("jsc"::(Nil)))) = sub_check_ta1 (C (V ("djb")) (V ("sye"))) (("jsc"::(Nil)))
Prop: sub_check_ta1 (V ("xec")) (("wot"::(Nil))) = sub_check_ta1 (V ("xec")) ((Nil))
Prop: sub_check_ta1 (V ("apn")) (("lnt"::("ksx"::(Nil)))) = sub_check_ta1 (V ("apn")) (("ksx"::(Nil)))
previous tactics
simpl in goal
case string_eq (string2) (string1)
reflexivity
rewrite IH1 in goal at 0
reflexivity
simpl in goal
intro string_list1
case mem (string1) (string_list1)
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (P ("zbc") (V ("tfi"))) (("ppa"::(Nil))) = sub_check (P ("zbc") (V ("tfi"))) ((Nil))
Prop: sub_check_ta1 (V ("ilu")) (("typ"::(Nil))) = sub_check (V ("ilu")) ((Nil))
Prop: sub_check_ta1 (P ("pjx") (V ("ifa"))) (("ylb"::(Nil))) = sub_check (P ("pjx") (V ("ifa"))) ((Nil))
Lemma List
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
End of Lemma List


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 66


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7.)
=================================================
Progress: 67


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:7.)
=================================================
Progress: 68


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string_list1(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 69


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:9.)
=================================================
Progress: 70


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
sub_check_ta1 (V (string2)) ((string1::string_list1)) = sub_check_ta1 (V (string2)) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 71


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
sub_check_ta1 (V (string2)) ((string1::string_list1)) = sub_check_ta1 (V (string2)) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case string_eq (string1) (string2)(rank:10.)
rewrite <- Cond1 in goal at 0(rank:25.)
=================================================
Progress: 72


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 1(rank:10.)
=================================================
Progress: 73


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 1(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:10.)
rewrite <- Cond1 in goal at 0(rank:18.)
=================================================
Progress: 74


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = is_mem_ta1 (string_list1) (string1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- Cond1 in goal at 0(rank:10.)
=================================================
Progress: 75


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = is_mem_ta1 (string_list1) (string1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite <- Case1 in goal at 0
rewrite <- Cond1 in goal at 0
validate generalize_common_subterm_goal
Prop: mem ("rfz") (("eiz"::(Nil))) = is_mem_ta1 (("eiz"::(Nil))) ("rfz")
Prop: mem ("fdu") (("mad"::(Nil))) = is_mem_ta1 (("mad"::(Nil))) ("fdu")
Prop: mem ("utn") ((Nil)) = is_mem_ta1 ((Nil)) ("utn")
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: true = is_mem_ta1 ((Nil)) ("dcg")
Prop: true = is_mem_ta1 (("mud"::(Nil))) ("ihk")
Prop: true = is_mem_ta1 ((Nil)) ("ezq")
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
validate generalize_common_subterm_goal
Prop: true = is_mem_ta1 ((Nil)) ("aaz")
Prop: true = is_mem_ta1 ((Nil)) ("kqw")
Prop: true = is_mem_ta1 ((Nil)) ("zft")
asdf
previous tactics
simpl in goal
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
Prop: true = is_mem_ta1 ((Nil)) ("fcd")
Prop: true = is_mem_ta1 (("cox"::(Nil))) ("ycc")
Prop: true = is_mem_ta1 ((Nil)) ("xsl")
asdf
Lemma List
forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = is_mem_ta1 (string_list1) (string1)

3 goal(s) more...

2 conjecture(s) more...
Lemma List
forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)

3 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 76


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = is_mem_ta1 (string_list1) (string1)

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)(rank : 0.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)

---------------------------------------
forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:9.)
=================================================
Progress: 77


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)(rank : 0.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)

---------------------------------------
forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:9.)
=================================================
Progress: 78


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)

---------------------------------------
forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 9.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
---------------------------------------
forall (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction string_list1(rank:10.)
=================================================
Progress: 79


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)

---------------------------------------
forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 9.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string1 : string
---------------------------------------
forall (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction string_list1(rank:10.)
=================================================
Progress: 80


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
---------------------------------------
forall (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> induction string_list1(rank : 10.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
mem (string1) ((Nil)) = true -> true = is_mem_ta1 ((Nil)) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:9.)
=================================================
Progress: 81


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
mem (string1) ((Nil)) = true -> true = is_mem_ta1 ((Nil)) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 9.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
mem (string1) ((string2::string_list2)) = true -> true = is_mem_ta1 ((string2::string_list2)) (string1)

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 82


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
mem (string1) ((string2::string_list2)) = true -> true = is_mem_ta1 ((string2::string_list2)) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else mem (string1) (string_list2) = true -> true = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 83


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else mem (string1) (string_list2) = true -> true = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : if string_eq (string2) (string1) then true else mem (string1) (string_list2) = true
---------------------------------------
true = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
case string_eq (string2) (string1)(rank:10.)
rewrite <- IH1 in goal at 1(rank:18.)
rewrite IH1 in goal at 1(rank:18.)
rewrite IH1 in goal at 2(rank:26.)
=================================================
Progress: 84


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string1 : string
---------------------------------------
forall (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> induction string_list1(rank : 10.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
mem (string1) ((Nil)) = true -> mem (string1) ((Nil)) = is_mem_ta1 ((Nil)) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 85


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
mem (string1) ((Nil)) = true -> mem (string1) ((Nil)) = is_mem_ta1 ((Nil)) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
mem (string1) ((string2::string_list2)) = true -> mem (string1) ((string2::string_list2)) = is_mem_ta1 ((string2::string_list2)) (string1)

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 86


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
mem (string1) ((string2::string_list2)) = true -> mem (string1) ((string2::string_list2)) = is_mem_ta1 ((string2::string_list2)) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else mem (string1) (string_list2) = true -> if string_eq (string2) (string1) then true else mem (string1) (string_list2) = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 87


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else mem (string1) (string_list2) = true -> if string_eq (string2) (string1) then true else mem (string1) (string_list2) = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : if string_eq (string2) (string1) then true else mem (string1) (string_list2) = true
---------------------------------------
if string_eq (string2) (string1) then true else mem (string1) (string_list2) = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string1)(rank:10.)
=================================================
Progress: 88


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : if string_eq (string2) (string1) then true else mem (string1) (string_list2) = true
---------------------------------------
true = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 10.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : true = true
Case1 : string_eq (string2) (string1) = true
---------------------------------------
true = true

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 89


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : true = true
Case1 : string_eq (string2) (string1) = true
---------------------------------------
true = true

1 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : mem (string1) (string_list2) = true
Case1 : string_eq (string2) (string1) = false
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 3
rewrite <- Cond1 in goal at 0(rank:17.)
rewrite IH1 in goal at 1(rank:18.)
rewrite <- IH1 in goal at 1(rank:18.)
=================================================
Progress: 90


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : if string_eq (string2) (string1) then true else mem (string1) (string_list2) = true
---------------------------------------
if string_eq (string2) (string1) then true else mem (string1) (string_list2) = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 10.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : true = true
Case1 : string_eq (string2) (string1) = true
---------------------------------------
true = true

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 91


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : true = true
Case1 : string_eq (string2) (string1) = true
---------------------------------------
true = true

1 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : mem (string1) (string_list2) = true
Case1 : string_eq (string2) (string1) = false
---------------------------------------
mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 3
rewrite IH1 in goal at 1(rank:18.)
rewrite Cond1 in goal at 0(rank:25.)
rewrite <- IH1 in goal at 1(rank:18.)
=================================================
Progress: 92


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : mem (string1) (string_list2) = true
Case1 : string_eq (string2) (string1) = false
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 17.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : mem (string1) (string_list2) = true
Case1 : string_eq (string2) (string1) = false
---------------------------------------
mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 1(rank:10.)
=================================================
Progress: 93


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : mem (string1) (string_list2) = true
Case1 : string_eq (string2) (string1) = false
---------------------------------------
mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 10.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : mem (string1) (string_list2) = true
Case1 : string_eq (string2) (string1) = false
---------------------------------------
mem (string1) (string_list2) = true

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string1)
reflexivity
rewrite <- Cond1 in goal at 0
rewrite <- IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: mem ("zfa") ((Nil)) = true
Prop: mem ("cmf") ((Nil)) = true
Prop: mem ("wlq") (("zcn"::(Nil))) = true
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string1)
reflexivity
rewrite <- Cond1 in goal at 0
validate generalize_common_subterm_goal
Prop: mem ("oxz") ((Nil)) = is_mem_ta1 ((Nil)) ("oxz")
Prop: mem ("jcg") ((Nil)) = is_mem_ta1 ((Nil)) ("jcg")
Prop: mem ("wde") (("aug"::(Nil))) = is_mem_ta1 (("aug"::(Nil))) ("wde")
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string1)
reflexivity
validate generalize_common_subterm_goal
Prop: true = is_mem_ta1 ((Nil)) ("tku")
Prop: true = is_mem_ta1 ((Nil)) ("qks")
Prop: true = is_mem_ta1 (("bvk"::(Nil))) ("ple")
Lemma List
forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
End of Lemma List


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : mem (string1) (string_list2) = true
Case1 : string_eq (string2) (string1) = false
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

3 conjecture(s) more...
Lemma List
forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
End of Lemma List


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : mem (string1) (string_list2) = true
Case1 : string_eq (string2) (string1) = false
---------------------------------------
mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

3 conjecture(s) more...
Lemma List
forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = true
End of Lemma List


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : mem (string1) (string_list2) = true
Case1 : string_eq (string2) (string1) = false
---------------------------------------
mem (string1) (string_list2) = true

1 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 94


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : mem (string1) (string_list2) = true
Case1 : string_eq (string2) (string1) = false
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)(rank : 0.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)

---------------------------------------
forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11.)
=================================================
Progress: 95


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : mem (string1) (string_list2) = true
Case1 : string_eq (string2) (string1) = false
---------------------------------------
mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)(rank : 0.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)

---------------------------------------
forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11.)
=================================================
Progress: 96


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : mem (string1) (string_list2) = true
Case1 : string_eq (string2) (string1) = false
---------------------------------------
mem (string1) (string_list2) = true

1 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = true(rank : 0.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = true

---------------------------------------
forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11.)
=================================================
Progress: 97


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)

---------------------------------------
forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
---------------------------------------
forall (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction string_list1(rank:12.)
=================================================
Progress: 98


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)

---------------------------------------
forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string1 : string
---------------------------------------
forall (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction string_list1(rank:12.)
=================================================
Progress: 99


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = true

---------------------------------------
forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = true
string1 : string
---------------------------------------
forall (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction string_list1(rank:12.)
=================================================
Progress: 100


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
---------------------------------------
forall (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> induction string_list1(rank : 12.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
mem (string1) ((Nil)) = true -> true = is_mem_ta1 ((Nil)) (string1)

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
discriminate(rank:11.)
=================================================
Progress: 101


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
mem (string1) ((Nil)) = true -> true = is_mem_ta1 ((Nil)) (string1)

1 goal(s) more...

4 conjecture(s) more...
>>> discriminate(rank : 11.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
mem (string1) ((string2::string_list2)) = true -> true = is_mem_ta1 ((string2::string_list2)) (string1)

0 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 102


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
mem (string1) ((string2::string_list2)) = true -> true = is_mem_ta1 ((string2::string_list2)) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else mem (string1) (string_list2) = true -> true = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11.)
=================================================
Progress: 103


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else mem (string1) (string_list2) = true -> true = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : if string_eq (string2) (string1) then true else mem (string1) (string_list2) = true
---------------------------------------
true = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 4
case string_eq (string2) (string1)(rank:12.)
rewrite <- IH1 in goal at 1(rank:20.)
rewrite IH1 in goal at 1(rank:20.)
rewrite IH1 in goal at 2(rank:28.)
=================================================
Progress: 104


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string1 : string
---------------------------------------
forall (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> induction string_list1(rank : 12.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
mem (string1) ((Nil)) = true -> mem (string1) ((Nil)) = is_mem_ta1 ((Nil)) (string1)

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 105


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
mem (string1) ((Nil)) = true -> mem (string1) ((Nil)) = is_mem_ta1 ((Nil)) (string1)

1 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
mem (string1) ((string2::string_list2)) = true -> mem (string1) ((string2::string_list2)) = is_mem_ta1 ((string2::string_list2)) (string1)

0 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 106


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
mem (string1) ((string2::string_list2)) = true -> mem (string1) ((string2::string_list2)) = is_mem_ta1 ((string2::string_list2)) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else mem (string1) (string_list2) = true -> if string_eq (string2) (string1) then true else mem (string1) (string_list2) = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11.)
=================================================
Progress: 107


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else mem (string1) (string_list2) = true -> if string_eq (string2) (string1) then true else mem (string1) (string_list2) = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : if string_eq (string2) (string1) then true else mem (string1) (string_list2) = true
---------------------------------------
if string_eq (string2) (string1) then true else mem (string1) (string_list2) = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string1)(rank:12.)
=================================================
Progress: 108


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = true
string1 : string
---------------------------------------
forall (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = true

0 goal(s) more...

4 conjecture(s) more...
>>> induction string_list1(rank : 12.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = true
string1 : string
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
mem (string1) ((Nil)) = true -> mem (string1) ((Nil)) = true

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
discriminate(rank:11.)
=================================================
Progress: 109


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = true
string1 : string
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
mem (string1) ((Nil)) = true -> mem (string1) ((Nil)) = true

1 goal(s) more...

4 conjecture(s) more...
>>> discriminate(rank : 11.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = true
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> mem (string1) (string_list2) = true
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
mem (string1) ((string2::string_list2)) = true -> mem (string1) ((string2::string_list2)) = true

0 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 110


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = true
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> mem (string1) (string_list2) = true
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
mem (string1) ((string2::string_list2)) = true -> mem (string1) ((string2::string_list2)) = true

0 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = true
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> mem (string1) (string_list2) = true
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else mem (string1) (string_list2) = true -> if string_eq (string2) (string1) then true else mem (string1) (string_list2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11.)
=================================================
Progress: 111


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = true
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> mem (string1) (string_list2) = true
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else mem (string1) (string_list2) = true -> if string_eq (string2) (string1) then true else mem (string1) (string_list2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = true
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> mem (string1) (string_list2) = true
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : if string_eq (string2) (string1) then true else mem (string1) (string_list2) = true
---------------------------------------
if string_eq (string2) (string1) then true else mem (string1) (string_list2) = true

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 5
case string_eq (string2) (string1)(rank:12.)
rewrite Cond1 in goal at 0(rank:19.)
rewrite IH1 in goal at 1(rank:20.)
rewrite <- IH1 in goal at 2(rank:20.)
rewrite <- IH1 in goal at 1(rank:28.)
=================================================
Progress: 112


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : if string_eq (string2) (string1) then true else mem (string1) (string_list2) = true
---------------------------------------
true = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 12.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : true = true
Case1 : string_eq (string2) (string1) = true
---------------------------------------
true = true

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 113


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : true = true
Case1 : string_eq (string2) (string1) = true
---------------------------------------
true = true

1 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : mem (string1) (string_list2) = true
Case1 : string_eq (string2) (string1) = false
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 3
rewrite <- Cond1 in goal at 0(rank:19.)
rewrite IH1 in goal at 1(rank:20.)
rewrite <- IH1 in goal at 1(rank:20.)
=================================================
Progress: 114


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : if string_eq (string2) (string1) then true else mem (string1) (string_list2) = true
---------------------------------------
if string_eq (string2) (string1) then true else mem (string1) (string_list2) = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 12.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : true = true
Case1 : string_eq (string2) (string1) = true
---------------------------------------
true = true

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 115


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : true = true
Case1 : string_eq (string2) (string1) = true
---------------------------------------
true = true

1 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : mem (string1) (string_list2) = true
Case1 : string_eq (string2) (string1) = false
---------------------------------------
mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 3
rewrite IH1 in goal at 1(rank:20.)
rewrite Cond1 in goal at 0(rank:27.)
rewrite <- IH1 in goal at 1(rank:20.)
=================================================
Progress: 116


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = true
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> mem (string1) (string_list2) = true
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : if string_eq (string2) (string1) then true else mem (string1) (string_list2) = true
---------------------------------------
if string_eq (string2) (string1) then true else mem (string1) (string_list2) = true

0 goal(s) more...

4 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 12.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = true
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> mem (string1) (string_list2) = true
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : true = true
Case1 : string_eq (string2) (string1) = true
---------------------------------------
true = true

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 117


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = true
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> mem (string1) (string_list2) = true
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : true = true
Case1 : string_eq (string2) (string1) = true
---------------------------------------
true = true

1 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = true
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> mem (string1) (string_list2) = true
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : mem (string1) (string_list2) = true
Case1 : string_eq (string2) (string1) = false
---------------------------------------
mem (string1) (string_list2) = true

0 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 4
rewrite Cond1 in goal at 0(rank:19.)
rewrite IH1 in goal at 1(rank:20.)
rewrite <- Cond1 in goal at 0(rank:19.)
rewrite <- IH1 in goal at 1(rank:20.)
=================================================
Progress: 118


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : mem (string1) (string_list2) = true
Case1 : string_eq (string2) (string1) = false
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 17.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : mem (string1) (string_list2) = true
Case1 : string_eq (string2) (string1) = false
---------------------------------------
mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 1(rank:10.)
=================================================
Progress: 119


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : mem (string1) (string_list2) = true
Case1 : string_eq (string2) (string1) = false
---------------------------------------
mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 10.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : mem (string1) (string_list2) = true
Case1 : string_eq (string2) (string1) = false
---------------------------------------
mem (string1) (string_list2) = true

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string1)
reflexivity
rewrite <- Cond1 in goal at 0
rewrite <- IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: mem ("rrz") (("che"::("htl"::(Nil)))) = true
Prop: mem ("ljl") ((Nil)) = true
Prop: mem ("cet") ((Nil)) = true
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string1)
reflexivity
rewrite <- Cond1 in goal at 0
validate generalize_common_subterm_goal
Prop: mem ("kya") ((Nil)) = is_mem_ta1 ((Nil)) ("kya")
Prop: mem ("axs") ((Nil)) = is_mem_ta1 ((Nil)) ("axs")
Prop: mem ("tpm") ((Nil)) = is_mem_ta1 ((Nil)) ("tpm")
previous tactics
simpl in goal
intro Cond1
case string_eq (string2) (string1)
reflexivity
validate generalize_common_subterm_goal
Prop: true = is_mem_ta1 ((Nil)) ("wwe")
Prop: true = is_mem_ta1 ((Nil)) ("kbc")
Prop: true = is_mem_ta1 ((Nil)) ("kdb")
=================================================
Progress: 120


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = mem (string2) (string_list1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 18.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string1) (string_list1) = mem (string2) (string_list1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:10.)
=================================================
Progress: 121


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string1) (string_list1) = mem (string2) (string_list1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string2) (string_list1) = mem (string2) (string_list1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 122


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string2) (string_list1) = mem (string2) (string_list1)

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
is_mem_ta1 (string_list1) (string2) = mem (string2) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 2
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite <- Cond1 in goal at 0
rewrite Case1 in goal at 0
reflexivity
validate generalize_common_subterm_goal
Prop: is_mem_ta1 ((Nil)) ("psw") = mem ("psw") ((Nil))
Prop: is_mem_ta1 (("kci"::(Nil))) ("hut") = mem ("hut") (("kci"::(Nil)))
Prop: is_mem_ta1 (("faf"::(Nil))) ("vad") = mem ("vad") (("faf"::(Nil)))
Lemma List
forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
is_mem_ta1 (string_list1) (string2) = mem (string2) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 123


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
is_mem_ta1 (string_list1) (string2) = mem (string2) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)(rank : 0.)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)

---------------------------------------
forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction string_list1(rank:10.)
=================================================
Progress: 124


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)

---------------------------------------
forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)

0 goal(s) more...

3 conjecture(s) more...
>>> induction string_list1(rank : 10.)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
forall (string1:string), is_mem_ta1 ((Nil)) (string1) = mem (string1) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 125


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
forall (string1:string), is_mem_ta1 ((Nil)) (string1) = mem (string1) ((Nil))

1 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (string1:string), is_mem_ta1 (string_list2) (string1) = mem (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
forall (string1:string), is_mem_ta1 ((string2::string_list2)) (string1) = mem (string1) ((string2::string_list2))

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 126


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (string1:string), is_mem_ta1 (string_list2) (string1) = mem (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
forall (string1:string), is_mem_ta1 ((string2::string_list2)) (string1) = mem (string1) ((string2::string_list2))

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (string1:string), is_mem_ta1 (string_list2) (string1) = mem (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
forall (string1:string), if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = if string_eq (string2) (string1) then true else mem (string1) (string_list2)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:9.)
=================================================
Progress: 127


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (string1:string), is_mem_ta1 (string_list2) (string1) = mem (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
forall (string1:string), if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = if string_eq (string2) (string1) then true else mem (string1) (string_list2)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 9.)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (string1:string), is_mem_ta1 (string_list2) (string1) = mem (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
string1 : string
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = if string_eq (string2) (string1) then true else mem (string1) (string_list2)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string1)(rank:10.)
=================================================
Progress: 128


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (string1:string), is_mem_ta1 (string_list2) (string1) = mem (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
string1 : string
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = if string_eq (string2) (string1) then true else mem (string1) (string_list2)

0 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 10.)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (string1:string), is_mem_ta1 (string_list2) (string1) = mem (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
string1 : string
Case1 : string_eq (string2) (string1) = true
---------------------------------------
true = true

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 129


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (string1:string), is_mem_ta1 (string_list2) (string1) = mem (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
string1 : string
Case1 : string_eq (string2) (string1) = true
---------------------------------------
true = true

1 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (string1:string), is_mem_ta1 (string_list2) (string1) = mem (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
string1 : string
Case1 : string_eq (string2) (string1) = false
---------------------------------------
is_mem_ta1 (string_list2) (string1) = mem (string1) (string_list2)

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite IH1 in goal at 0(rank:17.)
rewrite <- IH1 in goal at 0(rank:17.)
=================================================
Progress: 130


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (string1:string), is_mem_ta1 (string_list2) (string1) = mem (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
string1 : string
Case1 : string_eq (string2) (string1) = false
---------------------------------------
is_mem_ta1 (string_list2) (string1) = mem (string1) (string_list2)

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 17.)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (string1:string), is_mem_ta1 (string_list2) (string1) = mem (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
string1 : string
Case1 : string_eq (string2) (string1) = false
---------------------------------------
mem (string1) (string_list2) = mem (string1) (string_list2)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 131


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (string1:string), is_mem_ta1 (string_list2) (string1) = mem (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
string1 : string
Case1 : string_eq (string2) (string1) = false
---------------------------------------
mem (string1) (string_list2) = mem (string1) (string_list2)

0 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
is_mem_ta1 (string_list1) (string2) = mem (string2) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
original goal
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
lemma
forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)
tactics
assert forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)
induction string_list1
reflexivity
simpl in goal
intro string1
case string_eq (string2) (string1)
reflexivity
rewrite IH1 in goal at 0
reflexivity
Deduplication: 1
Tactic List : 2
rewrite lemma3 in goal at 0(rank:17.)
rewrite <- lemma3 in goal at 0(rank:17.)
=================================================
Progress: 132


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
is_mem_ta1 (string_list1) (string2) = mem (string2) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
mem (string2) (string_list1) = mem (string2) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8.)
=================================================
Progress: 133


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
mem (string2) (string_list1) = mem (string2) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
sub_check_ta1 (P (string2) (lambda2)) ((string1::string_list1)) = sub_check (P (string2) (lambda2)) (string_list1)

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 2
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 134


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
sub_check_ta1 (P (string2) (lambda2)) ((string1::string_list1)) = sub_check (P (string2) (lambda2)) (string_list1)

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
case mem (string2) (string_list1)(rank:9.)
rewrite <- IH1 in goal at 0(rank:24.)
rewrite <- lemma3 in goal at 0(rank:24.)
=================================================
Progress: 135


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

1 goal(s) more...

2 conjecture(s) more...
>>> case mem (string2) (string_list1)(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check (lambda2) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:9.)
=================================================
Progress: 136


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check (lambda2) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string1::string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
case string_eq (string2) (string1)
reflexivity
rewrite IH1 in goal at 0
reflexivity
rewrite lemma3 in goal at 0
reflexivity
simpl in goal
case mem (string2) (string_list1)
rewrite <- IH1 in goal at 0
Prop: sub_check_ta1 (V ("pcp")) (("wuv"::("ohr"::("wsl"::(Nil))))) = sub_check_ta1 (V ("pcp")) (("ohr"::("wsl"::(Nil))))
Prop: sub_check_ta1 (V ("vqv")) (("jgk"::(Nil))) = sub_check_ta1 (V ("vqv")) ((Nil))
Prop: sub_check_ta1 (V ("jjc")) (("gpp"::(Nil))) = sub_check_ta1 (V ("jjc")) ((Nil))
previous tactics
simpl in goal
intro string1
case string_eq (string2) (string1)
reflexivity
rewrite IH1 in goal at 0
reflexivity
rewrite lemma3 in goal at 0
reflexivity
simpl in goal
case mem (string2) (string_list1)
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (C (V ("ecx")) (V ("hzw"))) (("ftg"::("lhv"::(Nil)))) = sub_check (C (V ("ecx")) (V ("hzw"))) ((Nil))
Prop: sub_check_ta1 (C (V ("abm")) (P ("rag") (V ("sgg")))) (("gqw"::("gol"::(Nil)))) = sub_check (C (V ("abm")) (P ("rag") (V ("sgg")))) ((Nil))
Prop: sub_check_ta1 (V ("owy")) (("pqv"::("fzh"::("xfl"::("dpn"::(Nil)))))) = sub_check (V ("owy")) (("xfl"::("dpn"::(Nil))))
Lemma List
forall (string_list1:string list) (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string1::string_list1))

2 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 137


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string1::string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string_list1:string list) (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)(rank : 0.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)

---------------------------------------
forall (string_list1:string list) (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:11.)
=================================================
Progress: 138


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)

---------------------------------------
forall (string_list1:string list) (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)

0 goal(s) more...

3 conjecture(s) more...
>>> induction lambda1(rank : 11.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string_list1:string list) (string1:string), sub_check_ta1 (V (string2)) ((string1::string_list1)) = sub_check_ta1 (V (string2)) (string_list1)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 139


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string_list1:string list) (string1:string), sub_check_ta1 (V (string2)) ((string1::string_list1)) = sub_check_ta1 (V (string2)) (string_list1)

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string_list1:string list) (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:11.)
=================================================
Progress: 140


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string_list1:string list) (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)

2 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 11.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
forall (string_list1:string list), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
case string_eq (string1) (string2)(rank:12.)
rewrite lemma3 in goal at 2(rank:27.)
rewrite lemma3 in goal at 0(rank:27.)
rewrite lemma3 in goal at 1(rank:27.)
=================================================
Progress: 141


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
forall (string_list1:string list), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 12.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string_eq (string1) (string2) = true
---------------------------------------
forall (string_list1:string list), true = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 1(rank:12.)
=================================================
Progress: 142


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string_eq (string1) (string2) = true
---------------------------------------
forall (string_list1:string list), true = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 1(rank : 12.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
---------------------------------------
forall (string_list1:string list), true = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:12.)
rewrite lemma3 in goal at 0(rank:20.)
induction string_list1(rank:21.)
=================================================
Progress: 143


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
---------------------------------------
forall (string_list1:string list), true = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
---------------------------------------
forall (string_list1:string list), true = is_mem_ta1 (string_list1) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite lemma3 in goal at 0(rank:20.)
induction string_list1(rank:21.)
=================================================
Progress: 144


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = mem (string2) (string_list1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 18.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string1) (string_list1) = mem (string2) (string_list1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:10.)
=================================================
Progress: 145


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string1) (string_list1) = mem (string2) (string_list1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string2) (string_list1) = mem (string2) (string_list1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 146


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string2) (string_list1) = mem (string2) (string_list1)

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
mem (string2) (string_list1) = mem (string2) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 2
Tactic List : 1
reflexivity(rank:8.)
=================================================
Progress: 147


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
mem (string2) (string_list1) = mem (string2) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
sub_check (P (string2) (lambda2)) ((string1::string_list1)) = sub_check (P (string2) (lambda2)) (string_list1)

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 1
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 148


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
sub_check (P (string2) (lambda2)) ((string1::string_list1)) = sub_check (P (string2) (lambda2)) (string_list1)

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
if if string_eq (string1) (string2) then true else mem (string2) (string_list1) then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::(string1::string_list1))) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
case string_eq (string1) (string2)(rank:9.)
rewrite <- IH1 in goal at 0(rank:16.)
case mem (string2) (string_list1)(rank:9.)
rewrite IH1 in goal at 0(rank:16.)
rewrite <- Cond1 in goal at 0(rank:24.)
=================================================
Progress: 149


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
if if string_eq (string1) (string2) then true else mem (string2) (string_list1) then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::(string1::string_list1))) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

1 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 1(rank:9.)
=================================================
Progress: 150


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
if if string_eq (string1) (string2) then true else mem (string2) (string_list1) then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::(string1::string_list1))) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

1 goal(s) more...

2 conjecture(s) more...
>>> case mem (string2) (string_list1)(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else true then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::(string1::string_list1))) = sub_check (lambda2) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 9
case string_eq (string1) (string2)(rank:10.)
rewrite IH1 in goal at 0(rank:17.)
rewrite <- IH1 in goal at 0(rank:17.)
rewrite <- Case1 in goal at 1(rank:25.)
rewrite <- Case1 in goal at 2(rank:25.)
rewrite <- Cond1 in goal at 0(rank:25.)
rewrite <- Cond1 in goal at 1(rank:25.)
rewrite <- Cond1 in goal at 2(rank:25.)
rewrite <- Case1 in goal at 0(rank:25.)
=================================================
Progress: 151


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 7
rewrite <- Case1 in goal at 0(rank:9.)
rewrite <- Case1 in goal at 2(rank:9.)
rewrite <- IH1 in goal at 0(rank:25.)
case mem (string2) (string_list1)(rank:10.)
rewrite Case1 in goal at 0(rank:17.)
rewrite IH1 in goal at 0(rank:25.)
rewrite <- Case1 in goal at 1(rank:9.)
=================================================
Progress: 152


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
rewrite Cond1 in goal at 0(rank:17.)
rewrite IH1 in goal at 2(rank:17.)
rewrite IH1 in goal at 1(rank:25.)
rewrite <- IH1 in goal at 0(rank:25.)
rewrite IH1 in goal at 0(rank:25.)
=================================================
Progress: 153


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:17.)
rewrite IH1 in goal at 0(rank:25.)
rewrite <- IH1 in goal at 0(rank:25.)
=================================================
Progress: 154


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
case mem (string2) (string_list1)(rank:10.)
rewrite IH1 in goal at 2(rank:17.)
rewrite <- IH1 in goal at 0(rank:25.)
rewrite IH1 in goal at 0(rank:25.)
rewrite IH1 in goal at 1(rank:25.)
=================================================
Progress: 155


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else true then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::(string1::string_list1))) = sub_check (lambda2) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
Case2 : string_eq (string1) (string2) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 1(rank:10.)
=================================================
Progress: 156


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> case mem (string2) (string_list1)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:18.)
rewrite Case1 in goal at 0(rank:26.)
rewrite <- IH1 in goal at 0(rank:18.)
=================================================
Progress: 157


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> case mem (string2) (string_list1)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:18.)
rewrite Case1 in goal at 0(rank:26.)
rewrite <- IH1 in goal at 0(rank:18.)
=================================================
Progress: 158


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
Case2 : string_eq (string1) (string2) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 1(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
Case2 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:18.)
rewrite Case2 in goal at 0(rank:26.)
rewrite <- IH1 in goal at 0(rank:18.)
=================================================
Progress: 159


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
if if string_eq (string1) (string2) then true else mem (string2) (string_list1) then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::(string1::string_list1))) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 16.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
if if string_eq (string1) (string2) then true else mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::(string1::string_list1))) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
case string_eq (string1) (string2)(rank:9.)
rewrite <- Cond1 in goal at 0(rank:24.)
case mem (string2) (string_list1)(rank:9.)
=================================================
Progress: 160


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
if if string_eq (string1) (string2) then true else mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::(string1::string_list1))) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

1 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
sub_check (lambda2) (string_list1) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 1(rank:9.)
=================================================
Progress: 161


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
if if string_eq (string1) (string2) then true else mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::(string1::string_list1))) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

1 goal(s) more...

2 conjecture(s) more...
>>> case mem (string2) (string_list1)(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else true then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::(string1::string_list1))) = sub_check (lambda2) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 10
case string_eq (string1) (string2)(rank:10.)
rewrite <- Case1 in goal at 0(rank:25.)
rewrite <- Case1 in goal at 2(rank:25.)
rewrite <- Cond1 in goal at 1(rank:25.)
rewrite <- Cond1 in goal at 2(rank:25.)
rewrite <- IH1 in goal at 0(rank:25.)
rewrite <- IH1 in goal at 1(rank:25.)
rewrite <- Cond1 in goal at 0(rank:25.)
rewrite <- Case1 in goal at 1(rank:25.)
rewrite <- IH1 in goal at 2(rank:17.)
=================================================
Progress: 162


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
sub_check (lambda2) (string_list1) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 7
rewrite <- Case1 in goal at 0(rank:9.)
rewrite <- Case1 in goal at 2(rank:9.)
rewrite <- IH1 in goal at 0(rank:25.)
case mem (string2) (string_list1)(rank:10.)
rewrite <- IH1 in goal at 1(rank:17.)
rewrite <- IH1 in goal at 2(rank:25.)
rewrite <- Case1 in goal at 1(rank:9.)
=================================================
Progress: 163


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
rewrite Cond1 in goal at 0(rank:17.)
rewrite <- IH1 in goal at 1(rank:17.)
rewrite <- IH1 in goal at 0(rank:25.)
rewrite <- IH1 in goal at 2(rank:25.)
rewrite IH1 in goal at 0(rank:17.)
=================================================
Progress: 164


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite Cond1 in goal at 0(rank:17.)
rewrite <- IH1 in goal at 0(rank:25.)
rewrite <- IH1 in goal at 1(rank:17.)
rewrite <- IH1 in goal at 2(rank:25.)
=================================================
Progress: 165


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
case mem (string2) (string_list1)(rank:10.)
rewrite IH1 in goal at 0(rank:17.)
rewrite <- IH1 in goal at 0(rank:25.)
rewrite <- IH1 in goal at 1(rank:17.)
rewrite <- IH1 in goal at 2(rank:25.)
=================================================
Progress: 166


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else true then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::(string1::string_list1))) = sub_check (lambda2) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
Case2 : string_eq (string1) (string2) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 167


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
Case2 : string_eq (string1) (string2) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
Case2 : string_eq (string1) (string2) = false
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
reflexivity(rank:8.)
=================================================
Progress: 168


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
Case2 : string_eq (string1) (string2) = false
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = false
---------------------------------------
if if string_eq (string1) (string2) then true else false then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::(string1::string_list1))) = sub_check (lambda2) ((string2::string_list1))

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 9
Tactic List : 4
case string_eq (string1) (string2)(rank:9.)
rewrite <- IH1 in goal at 0(rank:24.)
rewrite <- Case1 in goal at 0(rank:24.)
rewrite <- Cond1 in goal at 0(rank:24.)
=================================================
Progress: 169


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = false
---------------------------------------
if if string_eq (string1) (string2) then true else false then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::(string1::string_list1))) = sub_check (lambda2) ((string2::string_list1))

1 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 1(rank:9.)
=================================================
Progress: 170


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = false
Case2 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:9.)
rewrite <- IH1 in goal at 0(rank:17.)
=================================================
Progress: 171


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = false
Case2 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = false
Case2 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:17.)
rewrite <- IH1 in goal at 0(rank:17.)
=================================================
Progress: 172


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> case mem (string2) (string_list1)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 173


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:9.)
rewrite <- IH1 in goal at 0(rank:17.)
=================================================
Progress: 174


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:17.)
rewrite <- IH1 in goal at 0(rank:17.)
=================================================
Progress: 175


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> case mem (string2) (string_list1)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- IH1 in goal at 0(rank:26.)
rewrite <- IH1 in goal at 1(rank:26.)
rewrite <- IH1 in goal at 2(rank:26.)
=================================================
Progress: 176


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
if if string_eq (string1) (string2) then true else mem (string2) (string_list1) then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::(string1::string_list1))) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 16.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
if if string_eq (string1) (string2) then true else mem (string2) (string_list1) then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::(string1::string_list1))) = if mem (string2) (string_list1) then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::string_list1))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case string_eq (string1) (string2)(rank:9.)
rewrite <- Cond1 in goal at 0(rank:24.)
=================================================
Progress: 177


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
if if string_eq (string1) (string2) then true else mem (string2) (string_list1) then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::(string1::string_list1))) = if mem (string2) (string_list1) then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::string_list1))

1 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string2) (string_list1) then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 1(rank:9.)
=================================================
Progress: 178


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string2) (string_list1) then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string2) (string_list1) then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 10
rewrite <- Case1 in goal at 0(rank:9.)
rewrite IH1 in goal at 2(rank:17.)
rewrite Case1 in goal at 0(rank:25.)
rewrite Case1 in goal at 1(rank:25.)
rewrite Case1 in goal at 2(rank:25.)
rewrite IH1 in goal at 0(rank:25.)
rewrite IH1 in goal at 1(rank:25.)
rewrite <- Case1 in goal at 1(rank:9.)
rewrite <- Case1 in goal at 2(rank:9.)
case mem (string2) (string_list1)(rank:10.)
=================================================
Progress: 179


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string2) (string_list1) then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8.)
=================================================
Progress: 180


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::(string1::string_list1))) = if mem (string2) (string_list1) then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::string_list1))

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 9
Tactic List : 1
case mem (string2) (string_list1)(rank:9.)
=================================================
Progress: 181


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::(string1::string_list1))) = if mem (string2) (string_list1) then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::string_list1))

1 goal(s) more...

2 conjecture(s) more...
>>> case mem (string2) (string_list1)(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = false
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8.)
=================================================
Progress: 182


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = false
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = false
Case2 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) ((string2::(string1::string_list1))) = sub_check (lambda2) ((string2::string_list1))

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite <- Case1 in goal at 0
reflexivity
case mem (string2) (string_list1)
reflexivity
validate generalize_common_subterm_goal
Prop: sub_check (V ("pfs")) (("oui"::("kck"::(Nil)))) = sub_check (V ("pfs")) (("oui"::(Nil)))
Prop: sub_check (V ("vvt")) (("cib"::("zqk"::(Nil)))) = sub_check (V ("vvt")) (("cib"::(Nil)))
Prop: sub_check (P ("nbq") (V ("rcf"))) (("qhj"::("zcq"::(Nil)))) = sub_check (P ("nbq") (V ("rcf"))) (("qhj"::(Nil)))
Lemma List
forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string_eq (string1) (string2) = false -> mem (string2) (string_list1) = false -> sub_check (lambda1) ((string2::(string1::string_list1))) = sub_check (lambda1) ((string2::string_list1))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = false
Case2 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) ((string2::(string1::string_list1))) = sub_check (lambda2) ((string2::string_list1))

1 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 183


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = false
Case2 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) ((string2::(string1::string_list1))) = sub_check (lambda2) ((string2::string_list1))

1 goal(s) more...

2 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string_eq (string1) (string2) = false -> mem (string2) (string_list1) = false -> sub_check (lambda1) ((string2::(string1::string_list1))) = sub_check (lambda1) ((string2::string_list1))(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string_eq (string1) (string2) = false -> mem (string2) (string_list1) = false -> sub_check (lambda1) ((string2::(string1::string_list1))) = sub_check (lambda1) ((string2::string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string_eq (string1) (string2) = false -> mem (string2) (string_list1) = false -> sub_check (lambda1) ((string2::(string1::string_list1))) = sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:17.)
=================================================
Progress: 184


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else true then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::(string1::string_list1))) = sub_check (lambda2) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else true then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::(string1::string_list1))) = sub_check (lambda2) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 7
case string_eq (string1) (string2)(rank:10.)
rewrite <- Case1 in goal at 0(rank:25.)
rewrite <- Case1 in goal at 1(rank:25.)
rewrite <- Case1 in goal at 2(rank:25.)
rewrite <- Cond1 in goal at 0(rank:25.)
rewrite <- Cond1 in goal at 1(rank:25.)
rewrite <- Cond1 in goal at 2(rank:25.)
=================================================
Progress: 185


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else true then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::(string1::string_list1))) = sub_check (lambda2) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
Case2 : string_eq (string1) (string2) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 186


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
Case2 : string_eq (string1) (string2) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
Case2 : string_eq (string1) (string2) = false
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 3
rewrite <- IH1 in goal at 0(rank:25.)
rewrite <- IH1 in goal at 1(rank:25.)
rewrite <- IH1 in goal at 2(rank:25.)
=================================================
Progress: 187


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else true then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::(string1::string_list1))) = sub_check (lambda2) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else true then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::(string1::string_list1))) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 7
case string_eq (string1) (string2)(rank:10.)
rewrite <- Case1 in goal at 0(rank:25.)
rewrite <- Case1 in goal at 1(rank:25.)
rewrite <- Case1 in goal at 2(rank:25.)
rewrite <- Cond1 in goal at 0(rank:25.)
rewrite <- Cond1 in goal at 1(rank:25.)
rewrite <- Cond1 in goal at 2(rank:25.)
=================================================
Progress: 188


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else true then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::(string1::string_list1))) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
Case2 : string_eq (string1) (string2) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 1(rank:10.)
=================================================
Progress: 189


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
Case2 : string_eq (string1) (string2) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 1(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
Case2 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
rewrite Case2 in goal at 0(rank:26.)
rewrite Case2 in goal at 2(rank:26.)
rewrite IH1 in goal at 0(rank:26.)
rewrite IH1 in goal at 1(rank:26.)
rewrite IH1 in goal at 2(rank:26.)
rewrite Case2 in goal at 1(rank:26.)
=================================================
Progress: 190


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case mem (string2) (string_list1)(rank:10.)
rewrite <- IH1 in goal at 0(rank:25.)
=================================================
Progress: 191


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> case mem (string2) (string_list1)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) (string_list1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:10.)
rewrite <- IH1 in goal at 0(rank:18.)
=================================================
Progress: 192


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) (string_list1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:18.)
rewrite <- IH1 in goal at 0(rank:18.)
=================================================
Progress: 193


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if true then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 194


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if true then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:17.)
rewrite Case1 in goal at 0(rank:25.)
rewrite <- IH1 in goal at 0(rank:17.)
=================================================
Progress: 195


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite <- Case1 in goal at 0
rewrite IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: sub_check (C (P ("hzw") (V ("jzg"))) (V ("dom"))) (("mjt"::(Nil))) = if mem ("mjt") ((Nil)) then sub_check (C (P ("hzw") (V ("jzg"))) (V ("dom"))) ((Nil)) else sub_check (C (P ("hzw") (V ("jzg"))) (V ("dom"))) ((Nil))
Prop: sub_check (V ("qtn")) (("ykt"::(Nil))) = if mem ("ykt") ((Nil)) then sub_check (V ("qtn")) ((Nil)) else sub_check (V ("qtn")) ((Nil))
Prop: sub_check (P ("cmj") (V ("ugn"))) (("gdy"::("bgz"::("eyi"::(Nil))))) = if mem ("gdy") (("bgz"::("eyi"::(Nil)))) then sub_check (P ("cmj") (V ("ugn"))) (("bgz"::("eyi"::(Nil)))) else sub_check (P ("cmj") (V ("ugn"))) (("bgz"::("eyi"::(Nil))))
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite <- Case1 in goal at 0
Prop: sub_check (P ("lwg") (V ("jvp"))) ((Nil)) = if mem ("flg") ((Nil)) then sub_check (P ("lwg") (V ("jvp"))) ((Nil)) else sub_check (P ("lwg") (V ("jvp"))) ((Nil))
Prop: sub_check (C (P ("rvx") (V ("riu"))) (V ("ist"))) (("zls"::("ipv"::(Nil)))) = if mem ("hmm") ((Nil)) then sub_check (C (P ("rvx") (V ("riu"))) (V ("ist"))) ((Nil)) else sub_check (C (P ("rvx") (V ("riu"))) (V ("ist"))) (("zls"::("ipv"::(Nil))))
Prop: sub_check (V ("rmc")) ((Nil)) = if mem ("uqn") ((Nil)) then sub_check (V ("rmc")) ((Nil)) else sub_check (V ("rmc")) ((Nil))
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
validate generalize_common_subterm_goal
Prop: sub_check (V ("fgd")) (("ufz"::(Nil))) = if mem ("cgc") ((Nil)) then sub_check (V ("fgd")) ((Nil)) else sub_check (V ("fgd")) (("cgc"::(Nil)))
Prop: sub_check (V ("sha")) (("slf"::("ojb"::("azq"::("gkn"::(Nil)))))) = if mem ("htz") (("ojb"::("azq"::("gkn"::(Nil))))) then sub_check (V ("sha")) (("ojb"::("azq"::("gkn"::(Nil))))) else sub_check (V ("sha")) (("htz"::("ojb"::("azq"::("gkn"::(Nil))))))
Prop: sub_check (V ("nkr")) (("ion"::(Nil))) = if mem ("ern") ((Nil)) then sub_check (V ("nkr")) ((Nil)) else sub_check (V ("nkr")) (("ern"::(Nil)))
previous tactics
simpl in goal
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
Prop: sub_check (V ("brd")) (("pzj"::(Nil))) = if mem ("tga") ((Nil)) then sub_check (V ("brd")) ((Nil)) else sub_check (V ("brd")) (("tga"::(Nil)))
Prop: sub_check (C (P ("tdp") (V ("kyj"))) (V ("dae"))) (("ysw"::("ylm"::(Nil)))) = if mem ("nxr") (("ylm"::(Nil))) then sub_check (C (P ("tdp") (V ("kyj"))) (V ("dae"))) (("ylm"::(Nil))) else sub_check (C (P ("tdp") (V ("kyj"))) (V ("dae"))) (("nxr"::("ylm"::(Nil))))
Prop: sub_check (C (V ("tzc")) (V ("kei"))) (("jgh"::("shg"::("eep"::(Nil))))) = if mem ("aoc") (("shg"::("eep"::(Nil)))) then sub_check (C (V ("tzc")) (V ("kei"))) (("shg"::("eep"::(Nil)))) else sub_check (C (V ("tzc")) (V ("kei"))) (("aoc"::("shg"::("eep"::(Nil)))))
Lemma List
forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 196


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)(rank : 0.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)

---------------------------------------
forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:9.)
=================================================
Progress: 197


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)

---------------------------------------
forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 9.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
string1 : string
---------------------------------------
forall (string_list1:string list) (lambda1:lambda) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:9.)
=================================================
Progress: 198


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
string1 : string
---------------------------------------
forall (string_list1:string list) (lambda1:lambda) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string_list1(rank : 9.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string_list2(rank:9.)
=================================================
Progress: 199


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string_list2(rank : 9.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
string_list2 : string list
---------------------------------------
forall (lambda1:lambda), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case mem (string1) (string_list2)(rank:10.)
=================================================
Progress: 200


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
string_list2 : string list
---------------------------------------
forall (lambda1:lambda), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)

0 goal(s) more...

3 conjecture(s) more...
>>> case mem (string1) (string_list2)(rank : 10.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
string_list2 : string list
Case1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda), sub_check (lambda1) (string_list1) = sub_check (lambda1) (string_list2)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:12.)
=================================================
Progress: 201


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
string_list2 : string list
Case1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda), sub_check (lambda1) (string_list1) = sub_check (lambda1) (string_list2)

1 goal(s) more...

3 conjecture(s) more...
>>> induction lambda1(rank : 12.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
string_list2 : string list
Case1 : mem (string1) (string_list2) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
sub_check (V (string2)) (string_list1) = sub_check (V (string2)) (string_list2)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 202


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
string_list2 : string list
Case1 : mem (string1) (string_list2) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
sub_check (V (string2)) (string_list1) = sub_check (V (string2)) (string_list2)

3 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
string_list2 : string list
Case1 : mem (string1) (string_list2) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
mem (string2) (string_list1) = mem (string2) (string_list2)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: mem ("dpr") (("ovg"::(Nil))) = mem ("dpr") ((Nil))
Prop: mem ("xuu") ((Nil)) = mem ("xuu") ((Nil))
Prop: mem ("ekp") ((Nil)) = mem ("ekp") ((Nil))
Lemma List
forall (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list1) = mem (string1) (string_list2)
End of Lemma List


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
string_list2 : string list
Case1 : mem (string1) (string_list2) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
mem (string2) (string_list1) = mem (string2) (string_list2)

3 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 203


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
string_list2 : string list
Case1 : mem (string1) (string_list2) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
mem (string2) (string_list1) = mem (string2) (string_list2)

3 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list1) = mem (string1) (string_list2)(rank : 0.)


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list1) = mem (string1) (string_list2)

---------------------------------------
forall (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list1) = mem (string1) (string_list2)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction string_list1(rank:12.)
=================================================
Progress: 204


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list1) = mem (string1) (string_list2)

---------------------------------------
forall (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list1) = mem (string1) (string_list2)

0 goal(s) more...

4 conjecture(s) more...
>>> induction string_list1(rank : 12.)


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list1) = mem (string1) (string_list2)
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
forall (string1:string) (string_list2:string list), mem (string1) ((Nil)) = mem (string1) (string_list2)

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 205


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list1) = mem (string1) (string_list2)
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
forall (string1:string) (string_list2:string list), mem (string1) ((Nil)) = mem (string1) (string_list2)

1 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list1) = mem (string1) (string_list2)
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
forall (string1:string) (string_list2:string list), false = mem (string1) (string_list2)

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction string_list2(rank:13.)
=================================================
Progress: 206


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list1) = mem (string1) (string_list2)
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
forall (string1:string) (string_list2:string list), false = mem (string1) (string_list2)

1 goal(s) more...

4 conjecture(s) more...
>>> induction string_list2(rank : 13.)


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list1) = mem (string1) (string_list2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
Base2 : string_list2 = (Nil)
---------------------------------------
forall (string1:string), false = mem (string1) ((Nil))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12.)
=================================================
Progress: 207


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list1) = mem (string1) (string_list2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
Base2 : string_list2 = (Nil)
---------------------------------------
forall (string1:string), false = mem (string1) ((Nil))

2 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 12.)


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list1) = mem (string1) (string_list2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = mem (string1) (string_list3)
Inductive1 : string_list2 = (string2::string_list3)
---------------------------------------
forall (string1:string), false = mem (string1) ((string2::string_list3))

1 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 208


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list1) = mem (string1) (string_list2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = mem (string1) (string_list3)
Inductive1 : string_list2 = (string2::string_list3)
---------------------------------------
forall (string1:string), false = mem (string1) ((string2::string_list3))

1 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list1) = mem (string1) (string_list2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = mem (string1) (string_list3)
Inductive1 : string_list2 = (string2::string_list3)
---------------------------------------
forall (string1:string), false = if string_eq (string2) (string1) then true else mem (string1) (string_list3)

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:12.)
=================================================
Progress: 209


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list1) = mem (string1) (string_list2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = mem (string1) (string_list3)
Inductive1 : string_list2 = (string2::string_list3)
---------------------------------------
forall (string1:string), false = if string_eq (string2) (string1) then true else mem (string1) (string_list3)

1 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 12.)


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list1) = mem (string1) (string_list2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = mem (string1) (string_list3)
Inductive1 : string_list2 = (string2::string_list3)
string1 : string
---------------------------------------
false = if string_eq (string2) (string1) then true else mem (string1) (string_list3)

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
case string_eq (string2) (string1)(rank:13.)
rewrite <- IH1 in goal at 0(rank:20.)
=================================================
Progress: 210


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list1) = mem (string1) (string_list2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = mem (string1) (string_list3)
Inductive1 : string_list2 = (string2::string_list3)
string1 : string
---------------------------------------
false = if string_eq (string2) (string1) then true else mem (string1) (string_list3)

1 goal(s) more...

4 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 13.)


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list1) = mem (string1) (string_list2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = mem (string1) (string_list3)
Inductive1 : string_list2 = (string2::string_list3)
string1 : string
Case1 : string_eq (string2) (string1) = true
---------------------------------------
false = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 1(rank:13.)
=================================================
Progress: 211


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list1) = mem (string1) (string_list2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = mem (string1) (string_list3)
Inductive1 : string_list2 = (string2::string_list3)
string1 : string
Case1 : string_eq (string2) (string1) = true
---------------------------------------
false = true

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 1(rank : 13.)


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list1) = mem (string1) (string_list2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = mem (string1) (string_list3)
Inductive1 : string_list2 = (string2::string_list3)
string1 : string
Case1 : string2 = string1
---------------------------------------
false = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 212


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if true then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:25.)
rewrite <- IH1 in goal at 0(rank:25.)
=================================================
Progress: 213


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case mem (string2) (string_list1)(rank:10.)
=================================================
Progress: 214


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
>>> case mem (string2) (string_list1)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:18.)
rewrite Case1 in goal at 0(rank:26.)
rewrite <- IH1 in goal at 0(rank:18.)
=================================================
Progress: 215


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case mem (string2) (string_list1)(rank:10.)
rewrite Case1 in goal at 0(rank:17.)
=================================================
Progress: 216


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> case mem (string2) (string_list1)(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:18.)
rewrite Case1 in goal at 0(rank:26.)
rewrite <- IH1 in goal at 0(rank:18.)
=================================================
Progress: 217


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = if true then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 218


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = if true then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- IH1 in goal at 0(rank:25.)
rewrite <- IH1 in goal at 1(rank:25.)
rewrite <- IH1 in goal at 2(rank:25.)
=================================================
Progress: 219


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite <- Case1 in goal at 0
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: sub_check (V ("xkt")) ((Nil)) = if mem ("vyg") ((Nil)) then sub_check (V ("xkt")) ((Nil)) else sub_check (V ("xkt")) ((Nil))
Prop: sub_check (C (V ("yry")) (V ("lns"))) ((Nil)) = if mem ("uip") ((Nil)) then sub_check (C (V ("yry")) (V ("lns"))) ((Nil)) else sub_check (C (V ("yry")) (V ("lns"))) ((Nil))
Prop: sub_check (C (P ("lom") (V ("cmx"))) (V ("byv"))) ((Nil)) = if mem ("kht") ((Nil)) then sub_check (C (P ("lom") (V ("cmx"))) (V ("byv"))) ((Nil)) else sub_check (C (P ("lom") (V ("cmx"))) (V ("byv"))) ((Nil))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: sub_check (V ("wqs")) ((Nil)) = if mem ("ocn") ((Nil)) then sub_check (V ("wqs")) ((Nil)) else sub_check (V ("wqs")) (("ocn"::(Nil)))
Prop: sub_check (P ("zyu") (V ("nnp"))) ((Nil)) = if mem ("rwc") ((Nil)) then sub_check (P ("zyu") (V ("nnp"))) ((Nil)) else sub_check (P ("zyu") (V ("nnp"))) (("rwc"::(Nil)))
Prop: sub_check (V ("tmt")) (("lhn"::(Nil))) = if mem ("rrr") (("lhn"::(Nil))) then sub_check (V ("tmt")) (("lhn"::(Nil))) else sub_check (V ("tmt")) (("rrr"::("lhn"::(Nil))))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
validate generalize_common_subterm_goal
Prop: sub_check (V ("ler")) ((Nil)) = if mem ("znv") ((Nil)) then sub_check (V ("ler")) ((Nil)) else sub_check (V ("ler")) (("znv"::(Nil)))
Prop: sub_check (V ("zvx")) ((Nil)) = if mem ("egy") ((Nil)) then sub_check (V ("zvx")) ((Nil)) else sub_check (V ("zvx")) (("egy"::(Nil)))
Prop: sub_check (V ("lkg")) ((Nil)) = if mem ("var") ((Nil)) then sub_check (V ("lkg")) ((Nil)) else sub_check (V ("lkg")) (("var"::(Nil)))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
Prop: sub_check (V ("lru")) (("bfd"::(Nil))) = if mem ("mop") (("bfd"::(Nil))) then sub_check (V ("lru")) (("bfd"::(Nil))) else sub_check (V ("lru")) (("mop"::("bfd"::(Nil))))
Prop: sub_check (P ("asi") (V ("wqw"))) ((Nil)) = if mem ("fff") ((Nil)) then sub_check (P ("asi") (V ("wqw"))) ((Nil)) else sub_check (P ("asi") (V ("wqw"))) (("fff"::(Nil)))
Prop: sub_check (P ("lsv") (V ("wph"))) ((Nil)) = if mem ("ejg") ((Nil)) then sub_check (P ("lsv") (V ("wph"))) ((Nil)) else sub_check (P ("lsv") (V ("wph"))) (("ejg"::(Nil)))
Lemma List
forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string1::string_list1))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
sub_check (lambda2) (string_list1) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
Lemma List
forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string1::string_list1))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
Lemma List
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string1::string_list1))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

2 conjecture(s) more...
Lemma List
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) (string_list1)
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 220


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
sub_check (lambda2) (string_list1) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string1::string_list1))(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string1::string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:9.)
=================================================
Progress: 221


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string1::string_list1))(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string1::string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:9.)
=================================================
Progress: 222


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string1::string_list1))(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string1::string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:9.)
=================================================
Progress: 223


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) (string_list1)(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) (string_list1)

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) (string_list1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 224


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string1::string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string1::string_list1))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:9.)
=================================================
Progress: 225


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string1::string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string1::string_list1))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:9.)
=================================================
Progress: 226


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string1::string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string1::string_list1))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:9.)
=================================================
Progress: 227


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) (string_list1)

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) (string_list1)

0 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
original goal
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
lemma
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) (string_list1)
tactics
assert forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) (string_list1)
reflexivity
Deduplication: 0
Tactic List : 1
reflexivity(rank:8.)
=================================================
Progress: 228


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::(string1::string_list1))) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 29
Tactic List : 1
case mem (string2) (string_list1)(rank:9.)
=================================================
Progress: 229


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::(string1::string_list1))) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

1 goal(s) more...

2 conjecture(s) more...
>>> case mem (string2) (string_list1)(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = false
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8.)
=================================================
Progress: 230


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = false
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = false
Case2 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) ((string2::(string1::string_list1))) = sub_check (lambda2) ((string2::string_list1))

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 1
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite <- Case1 in goal at 0
rewrite IH1 in goal at 0
assert forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) (string_list1)
reflexivity
reflexivity
case mem (string2) (string_list1)
reflexivity
validate generalize_common_subterm_goal
Prop: sub_check (V ("kdp")) (("bdv"::("koa"::(Nil)))) = sub_check (V ("kdp")) (("bdv"::(Nil)))
Prop: sub_check (V ("vme")) (("mgc"::("lsh"::("vjq"::(Nil))))) = sub_check (V ("vme")) (("mgc"::("vjq"::(Nil))))
Prop: sub_check (V ("slu")) (("ziv"::("fmy"::("qyy"::("wvn"::(Nil)))))) = sub_check (V ("slu")) (("ziv"::("qyy"::("wvn"::(Nil)))))
=================================================
Progress: 231


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = false
Case2 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = false
Case2 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:9.)
=================================================
Progress: 232


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = false
Case2 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = false
Case2 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8.)
=================================================
Progress: 233


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = false
Case2 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
sub_check (lambda2) ((string2::(string1::string_list1))) = sub_check (lambda2) ((string2::string_list1))

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 2
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case mem (string2) (string_list1)
case string_eq (string1) (string2)
reflexivity
reflexivity
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 1
rewrite <- IH1 in goal at 0
rewrite Case2 in goal at 0
reflexivity
validate generalize_common_subterm_goal
Prop: sub_check (V ("gvl")) (("hrn"::("rwz"::(Nil)))) = sub_check (V ("gvl")) (("hrn"::(Nil)))
Prop: sub_check (V ("jor")) (("uop"::("ioz"::(Nil)))) = sub_check (V ("jor")) (("uop"::(Nil)))
Prop: sub_check (P ("vmi") (P ("tqr") (V ("tic")))) (("ynz"::("lym"::(Nil)))) = sub_check (P ("vmi") (P ("tqr") (V ("tic")))) (("ynz"::(Nil)))
Lemma List
forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::(string1::string_list1))) = sub_check (lambda1) ((string2::string_list1))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
sub_check (lambda2) ((string2::(string1::string_list1))) = sub_check (lambda2) ((string2::string_list1))

1 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 234


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
sub_check (lambda2) ((string2::(string1::string_list1))) = sub_check (lambda2) ((string2::string_list1))

1 goal(s) more...

2 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::(string1::string_list1))) = sub_check (lambda1) ((string2::string_list1))(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::(string1::string_list1))) = sub_check (lambda1) ((string2::string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::(string1::string_list1))) = sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:17.)
=================================================
Progress: 235


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite <- Case1 in goal at 0
rewrite Cond1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: sub_check (P ("nsu") (V ("ujk"))) (("nrm"::(Nil))) = sub_check (P ("nsu") (V ("ujk"))) ((Nil))
Prop: sub_check (V ("uva")) (("xyy"::(Nil))) = sub_check (V ("uva")) ((Nil))
Prop: sub_check (P ("ebj") (V ("ket"))) (("jrr"::(Nil))) = sub_check (P ("ebj") (V ("ket"))) ((Nil))
Lemma List
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 236


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:9.)
=================================================
Progress: 237


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:9.)
=================================================
Progress: 238


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string_list1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 239


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
---------------------------------------
forall (lambda1:lambda), sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:11.)
=================================================
Progress: 240


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
---------------------------------------
forall (lambda1:lambda), sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

0 goal(s) more...

3 conjecture(s) more...
>>> induction lambda1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
sub_check (V (string2)) ((string1::string_list1)) = sub_check (V (string2)) (string_list1)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 241


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
sub_check (V (string2)) ((string1::string_list1)) = sub_check (V (string2)) (string_list1)

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
if string_eq (string1) (string2) then true else mem (string2) (string_list1) = mem (string2) (string_list1)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case string_eq (string1) (string2)(rank:12.)
rewrite <- Cond1 in goal at 0(rank:27.)
=================================================
Progress: 242


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
if string_eq (string1) (string2) then true else mem (string2) (string_list1) = mem (string2) (string_list1)

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = mem (string2) (string_list1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 1(rank:12.)
=================================================
Progress: 243


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = mem (string2) (string_list1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 1(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = mem (string2) (string_list1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:12.)
rewrite <- Cond1 in goal at 0(rank:20.)
=================================================
Progress: 244


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = mem (string2) (string_list1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = mem (string1) (string_list1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite Cond1 in goal at 0(rank:20.)
rewrite <- Cond1 in goal at 0(rank:20.)
=================================================
Progress: 245


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:25.)
rewrite Case1 in goal at 1(rank:25.)
rewrite Case1 in goal at 2(rank:25.)
=================================================
Progress: 246


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::(string1::string_list1))) = sub_check (lambda1) ((string2::string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::(string1::string_list1))) = sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::(string1::string_list1))) = sub_check (lambda1) ((string2::string_list1))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::(string1::string_list1))) = sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string2(rank:17.)
=================================================
Progress: 247


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::(string1::string_list1))) = sub_check (lambda1) ((string2::string_list1))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::(string1::string_list1))) = sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::(string1::string_list1))) = sub_check (lambda1) ((string2::string_list1))
string1 : string
string2 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::(string1::string_list1))) = sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:17.)
=================================================
Progress: 248


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::(string1::string_list1))) = sub_check (lambda1) ((string2::string_list1))
string1 : string
string2 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::(string1::string_list1))) = sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string_list1(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::(string1::string_list1))) = sub_check (lambda1) ((string2::string_list1))
string1 : string
string2 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda), mem (string1) (string_list1) = true -> mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::(string1::string_list1))) = sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:17.)
=================================================
Progress: 249


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::(string1::string_list1))) = sub_check (lambda1) ((string2::string_list1))
string1 : string
string2 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda), mem (string1) (string_list1) = true -> mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::(string1::string_list1))) = sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::(string1::string_list1))) = sub_check (lambda1) ((string2::string_list1))
string1 : string
string2 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
---------------------------------------
forall (lambda1:lambda), mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::(string1::string_list1))) = sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:17.)
=================================================
Progress: 250


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::(string1::string_list1))) = sub_check (lambda1) ((string2::string_list1))
string1 : string
string2 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
---------------------------------------
forall (lambda1:lambda), mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::(string1::string_list1))) = sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::(string1::string_list1))) = sub_check (lambda1) ((string2::string_list1))
string1 : string
string2 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
Cond2 : mem (string2) (string_list1) = false
---------------------------------------
forall (lambda1:lambda), string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::(string1::string_list1))) = sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:17.)
=================================================
Progress: 251


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::(string1::string_list1))) = sub_check (lambda1) ((string2::string_list1))
string1 : string
string2 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
Cond2 : mem (string2) (string_list1) = false
---------------------------------------
forall (lambda1:lambda), string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::(string1::string_list1))) = sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond3(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::(string1::string_list1))) = sub_check (lambda1) ((string2::string_list1))
string1 : string
string2 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
Cond2 : mem (string2) (string_list1) = false
Cond3 : string_eq (string1) (string2) = false
---------------------------------------
forall (lambda1:lambda), sub_check (lambda1) ((string2::(string1::string_list1))) = sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:19.)
=================================================
Progress: 252


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 18.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:10.)
=================================================
Progress: 253


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string2) (string_list1) = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite <- Cond1 in goal at 0
rewrite Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: mem ("dcx") ((Nil)) = is_mem_ta1 ((Nil)) ("dcx")
Prop: mem ("zvd") ((Nil)) = is_mem_ta1 ((Nil)) ("zvd")
Prop: mem ("eay") ((Nil)) = is_mem_ta1 ((Nil)) ("eay")
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite <- Cond1 in goal at 0
validate generalize_common_subterm_goal
Prop: mem ("jcx") (("mli"::(Nil))) = is_mem_ta1 (("mli"::(Nil))) ("aaq")
Prop: mem ("erq") (("jkr"::(Nil))) = is_mem_ta1 (("jkr"::(Nil))) ("dzu")
Prop: mem ("izr") ((Nil)) = is_mem_ta1 ((Nil)) ("bxn")
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
validate generalize_common_subterm_goal
Prop: true = is_mem_ta1 ((Nil)) ("bnw")
Prop: true = is_mem_ta1 ((Nil)) ("bag")
Prop: true = is_mem_ta1 ((Nil)) ("fnv")
asdf
previous tactics
simpl in goal
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
Prop: true = is_mem_ta1 ((Nil)) ("mfr")
Prop: true = is_mem_ta1 ((Nil)) ("bfh")
Prop: true = is_mem_ta1 ((Nil)) ("sxn")
asdf
Lemma List
forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

2 conjecture(s) more...
Lemma List
forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string2) (string_list1) = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 254


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:13.)
=================================================
Progress: 255


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string2) (string_list1) = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)(rank : 0.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)

---------------------------------------
forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction string_list1(rank:10.)
=================================================
Progress: 256


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)

---------------------------------------
forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> induction string_list1(rank : 10.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
forall (string1:string), mem (string1) ((Nil)) = is_mem_ta1 ((Nil)) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 257


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
forall (string1:string), mem (string1) ((Nil)) = is_mem_ta1 ((Nil)) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (string1:string), mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
forall (string1:string), mem (string1) ((string2::string_list2)) = is_mem_ta1 ((string2::string_list2)) (string1)

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 258


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (string1:string), mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
forall (string1:string), mem (string1) ((string2::string_list2)) = is_mem_ta1 ((string2::string_list2)) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (string1:string), mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
forall (string1:string), if string_eq (string2) (string1) then true else mem (string1) (string_list2) = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:9.)
=================================================
Progress: 259


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (string1:string), mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
forall (string1:string), if string_eq (string2) (string1) then true else mem (string1) (string_list2) = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 9.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (string1:string), mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
string1 : string
---------------------------------------
if string_eq (string2) (string1) then true else mem (string1) (string_list2) = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string1)(rank:10.)
=================================================
Progress: 260


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (string1:string), mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
string1 : string
---------------------------------------
if string_eq (string2) (string1) then true else mem (string1) (string_list2) = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 10.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (string1:string), mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
string1 : string
Case1 : string_eq (string2) (string1) = true
---------------------------------------
true = true

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 261


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (string1:string), mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
string1 : string
Case1 : string_eq (string2) (string1) = true
---------------------------------------
true = true

1 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (string1:string), mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
string1 : string
Case1 : string_eq (string2) (string1) = false
---------------------------------------
mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite IH1 in goal at 0(rank:17.)
rewrite <- IH1 in goal at 0(rank:17.)
=================================================
Progress: 262


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 13.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string2(rank:13.)
=================================================
Progress: 263


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 13.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction string_list1(rank:14.)
=================================================
Progress: 264


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

3 conjecture(s) more...
>>> induction string_list1(rank : 14.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
mem (string1) ((Nil)) = true -> string1 = string2 -> mem (string1) ((Nil)) = is_mem_ta1 ((Nil)) (string2)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13.)
=================================================
Progress: 265


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
mem (string1) ((Nil)) = true -> string1 = string2 -> mem (string1) ((Nil)) = is_mem_ta1 ((Nil)) (string2)

1 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 13.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> string1 = string2 -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = (string3::string_list2)
---------------------------------------
mem (string1) ((string3::string_list2)) = true -> string1 = string2 -> mem (string1) ((string3::string_list2)) = is_mem_ta1 ((string3::string_list2)) (string2)

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 266


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> string1 = string2 -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = (string3::string_list2)
---------------------------------------
mem (string1) ((string3::string_list2)) = true -> string1 = string2 -> mem (string1) ((string3::string_list2)) = is_mem_ta1 ((string3::string_list2)) (string2)

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> string1 = string2 -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = (string3::string_list2)
---------------------------------------
if string_eq (string3) (string1) then true else mem (string1) (string_list2) = true -> string1 = string2 -> if string_eq (string3) (string1) then true else mem (string1) (string_list2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:13.)
=================================================
Progress: 267


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> string1 = string2 -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = (string3::string_list2)
---------------------------------------
if string_eq (string3) (string1) then true else mem (string1) (string_list2) = true -> string1 = string2 -> if string_eq (string3) (string1) then true else mem (string1) (string_list2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 13.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> string1 = string2 -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = (string3::string_list2)
Cond1 : if string_eq (string3) (string1) then true else mem (string1) (string_list2) = true
---------------------------------------
string1 = string2 -> if string_eq (string3) (string1) then true else mem (string1) (string_list2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:13.)
=================================================
Progress: 268


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> string1 = string2 -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = (string3::string_list2)
Cond1 : if string_eq (string3) (string1) then true else mem (string1) (string_list2) = true
---------------------------------------
string1 = string2 -> if string_eq (string3) (string1) then true else mem (string1) (string_list2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 13.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> string1 = string2 -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = (string3::string_list2)
Cond1 : if string_eq (string3) (string1) then true else mem (string1) (string_list2) = true
Cond2 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else mem (string1) (string_list2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 11
case string_eq (string3) (string2)(rank:14.)
rewrite <- IH1 in goal at 1(rank:23.)
case string_eq (string3) (string1)(rank:14.)
rewrite Cond2 in goal at 0(rank:21.)
rewrite Cond2 in goal at 1(rank:21.)
rewrite <- Cond2 in goal at 1(rank:21.)
rewrite <- Cond2 in goal at 2(rank:29.)
rewrite IH1 in goal at 1(rank:23.)
rewrite <- Cond2 in goal at 0(rank:29.)
rewrite Cond2 in goal at 2(rank:21.)
rewrite Cond1 in goal at 0(rank:29.)
=================================================
Progress: 269


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> string1 = string2 -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = (string3::string_list2)
Cond1 : if string_eq (string3) (string1) then true else mem (string1) (string_list2) = true
Cond2 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else mem (string1) (string_list2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 14.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> string1 = string2 -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = (string3::string_list2)
Cond1 : if string_eq (string3) (string1) then true else mem (string1) (string_list2) = true
Cond2 : string1 = string2
Case1 : string_eq (string3) (string2) = true
---------------------------------------
if string_eq (string3) (string1) then true else mem (string1) (string_list2) = true

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 1(rank:14.)
=================================================
Progress: 270


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> string1 = string2 -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = (string3::string_list2)
Cond1 : if string_eq (string3) (string1) then true else mem (string1) (string_list2) = true
Cond2 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else mem (string1) (string_list2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string3) (string1)(rank : 14.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> string1 = string2 -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = (string3::string_list2)
Cond1 : true = true
Cond2 : string1 = string2
Case1 : string_eq (string3) (string1) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 1(rank:14.)
=================================================
Progress: 271


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> string1 = string2 -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = (string3::string_list2)
Cond1 : if string_eq (string3) (string1) then true else mem (string1) (string_list2) = true
Cond2 : string1 = string2
Case1 : string_eq (string3) (string2) = true
---------------------------------------
if string_eq (string3) (string1) then true else mem (string1) (string_list2) = true

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 1(rank : 14.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> string1 = string2 -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = (string3::string_list2)
Cond1 : if string_eq (string3) (string1) then true else mem (string1) (string_list2) = true
Cond2 : string1 = string2
Case1 : string3 = string2
---------------------------------------
if string_eq (string3) (string1) then true else mem (string1) (string_list2) = true

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
case string_eq (string3) (string1)(rank:15.)
rewrite Cond1 in goal at 0(rank:22.)
rewrite Case1 in goal at 0(rank:30.)
rewrite Cond2 in goal at 0(rank:30.)
rewrite Cond2 in goal at 1(rank:30.)
rewrite Cond2 in goal at 2(rank:30.)
rewrite IH1 in goal at 1(rank:32.)
=================================================
Progress: 272


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> string1 = string2 -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = (string3::string_list2)
Cond1 : true = true
Cond2 : string1 = string2
Case1 : string_eq (string3) (string1) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 1(rank : 14.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> string1 = string2 -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = (string3::string_list2)
Cond1 : true = true
Cond2 : string1 = string2
Case1 : string3 = string1
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case string_eq (string3) (string2)(rank:15.)
rewrite Case1 in goal at 0(rank:30.)
rewrite <- Cond2 in goal at 0(rank:30.)
rewrite <- Cond2 in goal at 1(rank:30.)
rewrite <- Cond2 in goal at 2(rank:30.)
rewrite <- IH1 in goal at 1(rank:24.)
=================================================
Progress: 273


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> string1 = string2 -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = (string3::string_list2)
Cond1 : if string_eq (string3) (string1) then true else mem (string1) (string_list2) = true
Cond2 : string1 = string2
Case1 : string3 = string2
---------------------------------------
if string_eq (string3) (string1) then true else mem (string1) (string_list2) = true

1 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string3) (string1)(rank : 15.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> string1 = string2 -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = (string3::string_list2)
Cond1 : true = true
Cond2 : string1 = string2
Case1 : string3 = string2
Case2 : string_eq (string3) (string1) = true
---------------------------------------
true = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:14.)
=================================================
Progress: 274


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> string1 = string2 -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = (string3::string_list2)
Cond1 : true = true
Cond2 : string1 = string2
Case1 : string3 = string2
Case2 : string_eq (string3) (string1) = true
---------------------------------------
true = true

2 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 14.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> string1 = string2 -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = (string3::string_list2)
Cond1 : mem (string1) (string_list2) = true
Cond2 : string1 = string2
Case1 : string3 = string2
Case2 : string_eq (string3) (string1) = false
---------------------------------------
mem (string1) (string_list2) = true

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 4
rewrite Cond1 in goal at 0(rank:22.)
rewrite Cond2 in goal at 0(rank:30.)
rewrite <- Cond1 in goal at 0(rank:22.)
rewrite IH1 in goal at 1(rank:32.)
=================================================
Progress: 275


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> string1 = string2 -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = (string3::string_list2)
Cond1 : true = true
Cond2 : string1 = string2
Case1 : string3 = string1
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

1 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 15.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> string1 = string2 -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = (string3::string_list2)
Cond1 : true = true
Cond2 : string1 = string2
Case1 : string3 = string1
Case2 : string_eq (string3) (string2) = true
---------------------------------------
true = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:14.)
=================================================
Progress: 276


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> string1 = string2 -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = (string3::string_list2)
Cond1 : true = true
Cond2 : string1 = string2
Case1 : string3 = string1
Case2 : string_eq (string3) (string2) = true
---------------------------------------
true = true

2 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 14.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> string1 = string2 -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = (string3::string_list2)
Cond1 : true = true
Cond2 : string1 = string2
Case1 : string3 = string1
Case2 : string_eq (string3) (string2) = false
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- IH1 in goal at 1(rank:24.)
rewrite <- Cond2 in goal at 0(rank:30.)
=================================================
Progress: 277


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (string1:string), mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
string1 : string
Case1 : string_eq (string2) (string1) = false
---------------------------------------
mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 17.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (string1:string), mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
string1 : string
Case1 : string_eq (string2) (string1) = false
---------------------------------------
is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 278


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (string1:string), mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
string1 : string
Case1 : string_eq (string2) (string1) = false
---------------------------------------
is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string2) (string_list1) = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

2 conjecture(s) more...
original goal
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
lemma
forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
tactics
assert forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
induction string_list1
reflexivity
simpl in goal
intro string1
case string_eq (string2) (string1)
reflexivity
rewrite IH1 in goal at 0
reflexivity
Deduplication: 1
Tactic List : 2
rewrite lemma3 in goal at 0(rank:18.)
rewrite <- lemma3 in goal at 0(rank:18.)
=================================================
Progress: 279


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : if string_eq (string2) (string1) then true else mem (string1) (string_list2) = true
---------------------------------------
true = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH1 in goal at 1(rank : 18.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : if string_eq (string2) (string1) then true else mem (string1) (string_list2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string1)(rank:11.)
=================================================
Progress: 280


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : if string_eq (string2) (string1) then true else mem (string1) (string_list2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 11.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : true = true
Case1 : string_eq (string2) (string1) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 1(rank:11.)
=================================================
Progress: 281


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : true = true
Case1 : string_eq (string2) (string1) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 1(rank : 11.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : true = true
Case1 : string2 = string1
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:11.)
rewrite IH1 in goal at 1(rank:20.)
rewrite <- IH1 in goal at 1(rank:20.)
=================================================
Progress: 282


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : true = true
Case1 : string2 = string1
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 11.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : true = true
Case1 : string2 = string1
---------------------------------------
is_mem_ta1 (string_list2) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 1(rank:12.)
=================================================
Progress: 283


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : true = true
Case1 : string2 = string1
---------------------------------------
is_mem_ta1 (string_list2) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH1 in goal at 1(rank : 12.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : true = true
Case1 : string2 = string1
---------------------------------------
is_mem_ta1 (string_list2) (string2) = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
rewrite IH1 in goal at 1
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 1
rewrite <- Case1 in goal at 0
rewrite IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: is_mem_ta1 ((Nil)) ("hbe") = is_mem_ta1 ((Nil)) ("pnp")
Prop: is_mem_ta1 ((Nil)) ("lsi") = is_mem_ta1 ((Nil)) ("dxa")
Prop: is_mem_ta1 (("rch"::(Nil))) ("erh") = is_mem_ta1 (("rch"::(Nil))) ("ayg")
previous tactics
simpl in goal
intro Cond1
rewrite IH1 in goal at 1
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 1
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: is_mem_ta1 ((Nil)) ("cla") = true
Prop: is_mem_ta1 ((Nil)) ("qck") = true
Prop: is_mem_ta1 ((Nil)) ("glf") = true
asdf
previous tactics
simpl in goal
intro Cond1
rewrite IH1 in goal at 1
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 1
parent
is_mem_ta1 (string_list2) (string1)
lower
is_mem_ta1(_, string1)
upper
_
remove upper
true()
remove lower
true()
remove upper
is_mem_ta1(string_list2, string1)
remove lower
is_mem_ta1(string_list2, string1)
remove upper
_
validate generalize_common_subterm_goal
Prop: is_mem_ta1 ((Nil)) ("qqq") = true
Prop: is_mem_ta1 ((Nil)) ("tit") = true
Prop: is_mem_ta1 (("dik"::(Nil))) ("ocz") = true
asdf
previous tactics
simpl in goal
intro Cond1
rewrite IH1 in goal at 1
case string_eq (string2) (string1)
parent
is_mem_ta1 (string_list2) (string1)
lower
is_mem_ta1(_, string1)
upper
_
remove upper
true()
remove lower
true()
remove upper
is_mem_ta1(string_list2, string1)
remove lower
is_mem_ta1(string_list2, string1)
remove upper
_
validate generalize_common_subterm_goal
Prop: is_mem_ta1 ((Nil)) ("ysk") = true
Prop: is_mem_ta1 ((Nil)) ("cao") = true
Prop: is_mem_ta1 ((Nil)) ("evn") = true
asdf
Lemma List
forall (string1:string) (string2:string) (string_list1:string list), true = true -> string2 = string1 -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string1)
End of Lemma List


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : true = true
Case1 : string2 = string1
---------------------------------------
is_mem_ta1 (string_list2) (string2) = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 284


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : true = true
Case1 : string2 = string1
---------------------------------------
is_mem_ta1 (string_list2) (string2) = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string_list1:string list), true = true -> string2 = string1 -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string1)(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), true = true -> string2 = string1 -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string1)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), true = true -> string2 = string1 -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:15.)
=================================================
Progress: 285


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), true = true -> string2 = string1 -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string1)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), true = true -> string2 = string1 -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 15.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), true = true -> string2 = string1 -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), true = true -> string2 = string1 -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:15.)
=================================================
Progress: 286


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), true = true -> string2 = string1 -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), true = true -> string2 = string1 -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 15.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), true = true -> string2 = string1 -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), true = true -> string2 = string1 -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:15.)
=================================================
Progress: 287


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), true = true -> string2 = string1 -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), true = true -> string2 = string1 -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 15.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), true = true -> string2 = string1 -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
Cond1 : true = true
---------------------------------------
forall (string_list1:string list), string2 = string1 -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:15.)
=================================================
Progress: 288


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), true = true -> string2 = string1 -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
Cond1 : true = true
---------------------------------------
forall (string_list1:string list), string2 = string1 -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 15.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), true = true -> string2 = string1 -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
Cond1 : true = true
Cond2 : string2 = string1
---------------------------------------
forall (string_list1:string list), is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
rewrite Cond2 in goal at 0(rank:23.)
induction string_list1(rank:24.)
rewrite <- Cond2 in goal at 0(rank:23.)
=================================================
Progress: 289


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : if string_eq (string2) (string1) then true else mem (string1) (string_list2) = true
---------------------------------------
true = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 18.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : if string_eq (string2) (string1) then true else mem (string1) (string_list2) = true
---------------------------------------
true = if string_eq (string2) (string1) then true else true

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 290


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : if string_eq (string2) (string1) then true else mem (string1) (string_list2) = true
---------------------------------------
true = if string_eq (string2) (string1) then true else true

1 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : if string_eq (string2) (string1) then true else mem (string1) (string_list2) = true
---------------------------------------
mem (string1) (string_list2) = true

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 5
Tactic List : 1
rewrite IH1 in goal at 1(rank:10.)
=================================================
Progress: 291


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : if string_eq (string2) (string1) then true else mem (string1) (string_list2) = true
---------------------------------------
mem (string1) (string_list2) = true

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH1 in goal at 1(rank : 10.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : if string_eq (string2) (string1) then true else mem (string1) (string_list2) = true
---------------------------------------
mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
rewrite <- IH1 in goal at 1
reflexivity
rewrite IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: mem ("rzl") ((Nil)) = is_mem_ta1 ((Nil)) ("rzl")
Prop: mem ("pro") ((Nil)) = is_mem_ta1 ((Nil)) ("pro")
Prop: mem ("ers") ((Nil)) = is_mem_ta1 ((Nil)) ("ers")
previous tactics
simpl in goal
intro Cond1
rewrite <- IH1 in goal at 1
reflexivity
validate generalize_common_subterm_goal
Prop: mem ("ntl") ((Nil)) = true
Prop: mem ("cwf") (("qjg"::(Nil))) = true
Prop: mem ("fas") ((Nil)) = true
asdf
t is here


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : if string_eq (string2) (string1) then true else mem (string1) (string_list2) = true
---------------------------------------
mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
duplicated tactic
assert forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
induction string_list1
reflexivity
simpl in goal
intro string1
case string_eq (string2) (string1)
reflexivity
rewrite IH1 in goal at 0
reflexivity


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : if string_eq (string2) (string1) then true else mem (string1) (string_list2) = true
---------------------------------------
mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 292


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : if string_eq (string2) (string1) then true else mem (string1) (string_list2) = true
---------------------------------------
mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : -1.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : if string_eq (string2) (string1) then true else mem (string1) (string_list2) = true
---------------------------------------
mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite lemma3 in goal at 0(rank:18.)
rewrite <- IH1 in goal at 1(rank:27.)
rewrite <- lemma3 in goal at 0(rank:18.)
=================================================
Progress: 293


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : mem (string1) (string_list2) = true
Case1 : string_eq (string2) (string1) = false
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH1 in goal at 1(rank : 18.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : mem (string1) (string_list2) = true
Case1 : string_eq (string2) (string1) = false
---------------------------------------
is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 294


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : mem (string1) (string_list2) = true
Case1 : string_eq (string2) (string1) = false
---------------------------------------
is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : mem (string1) (string_list2) = true
Case1 : string_eq (string2) (string1) = false
---------------------------------------
mem (string1) (string_list2) = true

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 8
Tactic List : 3
rewrite Cond1 in goal at 0(rank:17.)
rewrite IH1 in goal at 1(rank:18.)
rewrite <- Cond1 in goal at 0(rank:17.)
=================================================
Progress: 295


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : mem (string1) (string_list2) = true
Case1 : string_eq (string2) (string1) = false
---------------------------------------
mem (string1) (string_list2) = true

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 17.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : mem (string1) (string_list2) = true
Case1 : string_eq (string2) (string1) = false
---------------------------------------
true = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 296


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : mem (string1) (string_list2) = true
Case1 : string_eq (string2) (string1) = false
---------------------------------------
true = true

0 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = is_mem_ta1 (string_list1) (string1)

3 goal(s) more...

2 conjecture(s) more...
original goal
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
lemma
forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
tactics
assert forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
intro string1
induction string_list1
discriminate
simpl in goal
intro Cond1
case string_eq (string2) (string1)
reflexivity
rewrite IH1 in goal at 1
reflexivity
rewrite Cond1 in goal at 0
reflexivity
Deduplication: 16
Tactic List : 2
rewrite <- Cond1 in goal at 0(rank:18.)
rewrite <- lemma3 in goal at 1(rank:19.)
=================================================
Progress: 297


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : mem (string1) (string_list2) = true
Case1 : string_eq (string2) (string1) = false
---------------------------------------
mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH1 in goal at 1(rank : 18.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : mem (string1) (string_list2) = true
Case1 : string_eq (string2) (string1) = false
---------------------------------------
is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 298


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : mem (string1) (string_list2) = true
Case1 : string_eq (string2) (string1) = false
---------------------------------------
is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : mem (string1) (string_list2) = true
Case1 : string_eq (string2) (string1) = false
---------------------------------------
mem (string1) (string_list2) = true

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 3
rewrite Cond1 in goal at 0(rank:17.)
rewrite IH1 in goal at 1(rank:26.)
rewrite <- Cond1 in goal at 0(rank:17.)
=================================================
Progress: 299


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : mem (string1) (string_list2) = true
Case1 : string_eq (string2) (string1) = false
---------------------------------------
mem (string1) (string_list2) = true

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 17.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : mem (string1) (string_list2) = true
Case1 : string_eq (string2) (string1) = false
---------------------------------------
true = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 300


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : mem (string1) (string_list2) = true
Case1 : string_eq (string2) (string1) = false
---------------------------------------
true = true

0 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)

3 goal(s) more...

2 conjecture(s) more...
original goal
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
lemma
forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
tactics
assert forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
intro string1
induction string_list1
reflexivity
simpl in goal
intro Cond1
case string_eq (string2) (string1)
reflexivity
rewrite IH1 in goal at 1
reflexivity
rewrite Cond1 in goal at 0
reflexivity
Deduplication: 4
Tactic List : 2
rewrite lemma3 in goal at 1(rank:19.)
rewrite <- lemma3 in goal at 1(rank:19.)
=================================================
Progress: 301


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 18.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:10.)
=================================================
Progress: 302


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string2) (string_list1) = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite <- Cond1 in goal at 0
rewrite Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: mem ("yjo") ((Nil)) = is_mem_ta1 ((Nil)) ("yjo")
Prop: mem ("azg") ((Nil)) = is_mem_ta1 ((Nil)) ("azg")
Prop: mem ("evk") ((Nil)) = is_mem_ta1 ((Nil)) ("evk")
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite <- Cond1 in goal at 0
validate generalize_common_subterm_goal
Prop: mem ("osy") (("voy"::(Nil))) = is_mem_ta1 (("voy"::(Nil))) ("pof")
Prop: mem ("tqs") ((Nil)) = is_mem_ta1 ((Nil)) ("oek")
Prop: mem ("fco") ((Nil)) = is_mem_ta1 ((Nil)) ("fer")
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
validate generalize_common_subterm_goal
Prop: true = is_mem_ta1 ((Nil)) ("utm")
Prop: true = is_mem_ta1 (("pul"::(Nil))) ("yzk")
Prop: true = is_mem_ta1 ((Nil)) ("ckc")
asdf
previous tactics
simpl in goal
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
Prop: true = is_mem_ta1 (("yrf"::("bth"::("piu"::("obj"::(Nil)))))) ("axv")
Prop: true = is_mem_ta1 (("ahy"::(Nil))) ("lrj")
Prop: true = is_mem_ta1 ((Nil)) ("kdx")
asdf
t is here


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string2) (string_list1) = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

2 conjecture(s) more...
duplicated tactic
assert forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
induction string_list1
reflexivity
simpl in goal
intro string1
case string_eq (string2) (string1)
reflexivity
rewrite IH1 in goal at 0
reflexivity
Lemma List
forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

2 conjecture(s) more...


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string2) (string_list1) = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 303


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string2) (string_list1) = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : -1.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string2) (string_list1) = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
rewrite <- Case1 in goal at 0(rank:10.)
rewrite <- Case1 in goal at 1(rank:10.)
rewrite <- Case1 in goal at 2(rank:10.)
rewrite <- lemma3 in goal at 0(rank:18.)
rewrite lemma3 in goal at 0(rank:18.)
=================================================
Progress: 304


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:13.)
=================================================
Progress: 305


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string2) (string_list1) = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite lemma3 in goal at 0(rank:18.)
rewrite Cond1 in goal at 0(rank:26.)
rewrite <- lemma3 in goal at 0(rank:18.)
=================================================
Progress: 306


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string2) (string_list1) = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite lemma3 in goal at 0(rank:18.)
rewrite Cond1 in goal at 0(rank:26.)
rewrite <- lemma3 in goal at 0(rank:18.)
=================================================
Progress: 307


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string2) (string_list1) = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string2) (string_list1) = is_mem_ta1 (string_list1) (string1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite lemma3 in goal at 0(rank:18.)
rewrite <- lemma3 in goal at 0(rank:18.)
=================================================
Progress: 308


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 13.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string2(rank:13.)
=================================================
Progress: 309


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 13.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction string_list1(rank:14.)
=================================================
Progress: 310


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

3 conjecture(s) more...
>>> induction string_list1(rank : 14.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
mem (string1) ((Nil)) = true -> string1 = string2 -> mem (string1) ((Nil)) = is_mem_ta1 ((Nil)) (string2)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13.)
=================================================
Progress: 311


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
mem (string1) ((Nil)) = true -> string1 = string2 -> mem (string1) ((Nil)) = is_mem_ta1 ((Nil)) (string2)

1 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 13.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> string1 = string2 -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = (string3::string_list2)
---------------------------------------
mem (string1) ((string3::string_list2)) = true -> string1 = string2 -> mem (string1) ((string3::string_list2)) = is_mem_ta1 ((string3::string_list2)) (string2)

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 312


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> string1 = string2 -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = (string3::string_list2)
---------------------------------------
mem (string1) ((string3::string_list2)) = true -> string1 = string2 -> mem (string1) ((string3::string_list2)) = is_mem_ta1 ((string3::string_list2)) (string2)

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> string1 = string2 -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = (string3::string_list2)
---------------------------------------
if string_eq (string3) (string1) then true else mem (string1) (string_list2) = true -> string1 = string2 -> if string_eq (string3) (string1) then true else mem (string1) (string_list2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:13.)
=================================================
Progress: 313


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> string1 = string2 -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = (string3::string_list2)
---------------------------------------
if string_eq (string3) (string1) then true else mem (string1) (string_list2) = true -> string1 = string2 -> if string_eq (string3) (string1) then true else mem (string1) (string_list2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 13.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> string1 = string2 -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = (string3::string_list2)
Cond1 : if string_eq (string3) (string1) then true else mem (string1) (string_list2) = true
---------------------------------------
string1 = string2 -> if string_eq (string3) (string1) then true else mem (string1) (string_list2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:13.)
=================================================
Progress: 314


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> string1 = string2 -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = (string3::string_list2)
Cond1 : if string_eq (string3) (string1) then true else mem (string1) (string_list2) = true
---------------------------------------
string1 = string2 -> if string_eq (string3) (string1) then true else mem (string1) (string_list2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 13.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> string1 = string2 -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = (string3::string_list2)
Cond1 : if string_eq (string3) (string1) then true else mem (string1) (string_list2) = true
Cond2 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else mem (string1) (string_list2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 11
case string_eq (string3) (string2)(rank:14.)
rewrite <- IH1 in goal at 1(rank:23.)
case string_eq (string3) (string1)(rank:14.)
rewrite Cond2 in goal at 0(rank:21.)
rewrite Cond2 in goal at 1(rank:21.)
rewrite <- Cond2 in goal at 1(rank:21.)
rewrite <- Cond2 in goal at 2(rank:29.)
rewrite IH1 in goal at 1(rank:23.)
rewrite <- Cond2 in goal at 0(rank:29.)
rewrite Cond2 in goal at 2(rank:21.)
rewrite Cond1 in goal at 0(rank:29.)
=================================================
Progress: 315


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> string1 = string2 -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = (string3::string_list2)
Cond1 : if string_eq (string3) (string1) then true else mem (string1) (string_list2) = true
Cond2 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else mem (string1) (string_list2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 14.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> string1 = string2 -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = (string3::string_list2)
Cond1 : if string_eq (string3) (string1) then true else mem (string1) (string_list2) = true
Cond2 : string1 = string2
Case1 : string_eq (string3) (string2) = true
---------------------------------------
if string_eq (string3) (string1) then true else mem (string1) (string_list2) = true

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 1(rank:14.)
=================================================
Progress: 316


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> string1 = string2 -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = (string3::string_list2)
Cond1 : if string_eq (string3) (string1) then true else mem (string1) (string_list2) = true
Cond2 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else mem (string1) (string_list2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string3) (string1)(rank : 14.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> string1 = string2 -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = (string3::string_list2)
Cond1 : true = true
Cond2 : string1 = string2
Case1 : string_eq (string3) (string1) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 1(rank:14.)
=================================================
Progress: 317


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> string1 = string2 -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = (string3::string_list2)
Cond1 : if string_eq (string3) (string1) then true else mem (string1) (string_list2) = true
Cond2 : string1 = string2
Case1 : string_eq (string3) (string2) = true
---------------------------------------
if string_eq (string3) (string1) then true else mem (string1) (string_list2) = true

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 1(rank : 14.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> string1 = string2 -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = (string3::string_list2)
Cond1 : if string_eq (string3) (string1) then true else mem (string1) (string_list2) = true
Cond2 : string1 = string2
Case1 : string3 = string2
---------------------------------------
if string_eq (string3) (string1) then true else mem (string1) (string_list2) = true

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
case string_eq (string3) (string1)(rank:15.)
rewrite Cond1 in goal at 0(rank:22.)
rewrite Case1 in goal at 0(rank:30.)
rewrite Cond2 in goal at 0(rank:30.)
rewrite Cond2 in goal at 1(rank:30.)
rewrite Cond2 in goal at 2(rank:30.)
rewrite IH1 in goal at 1(rank:32.)
=================================================
Progress: 318


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> string1 = string2 -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = (string3::string_list2)
Cond1 : true = true
Cond2 : string1 = string2
Case1 : string_eq (string3) (string1) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 1(rank : 14.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> string1 = string2 -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = (string3::string_list2)
Cond1 : true = true
Cond2 : string1 = string2
Case1 : string3 = string1
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case string_eq (string3) (string2)(rank:15.)
rewrite Case1 in goal at 0(rank:30.)
rewrite <- Cond2 in goal at 0(rank:30.)
rewrite <- Cond2 in goal at 1(rank:30.)
rewrite <- Cond2 in goal at 2(rank:30.)
rewrite <- IH1 in goal at 1(rank:24.)
=================================================
Progress: 319


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> string1 = string2 -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = (string3::string_list2)
Cond1 : if string_eq (string3) (string1) then true else mem (string1) (string_list2) = true
Cond2 : string1 = string2
Case1 : string3 = string2
---------------------------------------
if string_eq (string3) (string1) then true else mem (string1) (string_list2) = true

1 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string3) (string1)(rank : 15.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> string1 = string2 -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = (string3::string_list2)
Cond1 : true = true
Cond2 : string1 = string2
Case1 : string3 = string2
Case2 : string_eq (string3) (string1) = true
---------------------------------------
true = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:14.)
=================================================
Progress: 320


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> string1 = string2 -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = (string3::string_list2)
Cond1 : true = true
Cond2 : string1 = string2
Case1 : string3 = string2
Case2 : string_eq (string3) (string1) = true
---------------------------------------
true = true

2 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 14.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> string1 = string2 -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = (string3::string_list2)
Cond1 : mem (string1) (string_list2) = true
Cond2 : string1 = string2
Case1 : string3 = string2
Case2 : string_eq (string3) (string1) = false
---------------------------------------
mem (string1) (string_list2) = true

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 4
rewrite Cond1 in goal at 0(rank:22.)
rewrite Cond2 in goal at 0(rank:30.)
rewrite <- Cond1 in goal at 0(rank:22.)
rewrite IH1 in goal at 1(rank:32.)
=================================================
Progress: 321


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> string1 = string2 -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = (string3::string_list2)
Cond1 : true = true
Cond2 : string1 = string2
Case1 : string3 = string1
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

1 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 15.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> string1 = string2 -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = (string3::string_list2)
Cond1 : true = true
Cond2 : string1 = string2
Case1 : string3 = string1
Case2 : string_eq (string3) (string2) = true
---------------------------------------
true = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:14.)
=================================================
Progress: 322


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> string1 = string2 -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = (string3::string_list2)
Cond1 : true = true
Cond2 : string1 = string2
Case1 : string3 = string1
Case2 : string_eq (string3) (string2) = true
---------------------------------------
true = true

2 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 14.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> string1 = string2 -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = (string3::string_list2)
Cond1 : true = true
Cond2 : string1 = string2
Case1 : string3 = string1
Case2 : string_eq (string3) (string2) = false
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- IH1 in goal at 1(rank:24.)
rewrite <- Cond2 in goal at 0(rank:30.)
=================================================
Progress: 323


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : if string_eq (string2) (string1) then true else mem (string1) (string_list2) = true
---------------------------------------
true = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH1 in goal at 1(rank : 18.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : if string_eq (string2) (string1) then true else mem (string1) (string_list2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string1)(rank:11.)
=================================================
Progress: 324


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : if string_eq (string2) (string1) then true else mem (string1) (string_list2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 11.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : true = true
Case1 : string_eq (string2) (string1) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 1(rank:11.)
=================================================
Progress: 325


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : true = true
Case1 : string_eq (string2) (string1) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 1(rank : 11.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : true = true
Case1 : string2 = string1
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:11.)
rewrite IH1 in goal at 1(rank:20.)
rewrite <- IH1 in goal at 1(rank:20.)
=================================================
Progress: 326


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : true = true
Case1 : string2 = string1
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 11.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : true = true
Case1 : string2 = string1
---------------------------------------
is_mem_ta1 (string_list2) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 1(rank:12.)
=================================================
Progress: 327


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : true = true
Case1 : string2 = string1
---------------------------------------
is_mem_ta1 (string_list2) (string2) = true

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH1 in goal at 1(rank : 12.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : true = true
Case1 : string2 = string1
---------------------------------------
is_mem_ta1 (string_list2) (string2) = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
rewrite IH1 in goal at 1
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 1
rewrite <- Case1 in goal at 0
rewrite IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: is_mem_ta1 ((Nil)) ("odx") = is_mem_ta1 ((Nil)) ("gml")
Prop: is_mem_ta1 ((Nil)) ("kga") = is_mem_ta1 ((Nil)) ("oht")
Prop: is_mem_ta1 (("rnh"::(Nil))) ("khv") = is_mem_ta1 (("rnh"::(Nil))) ("ipy")
previous tactics
simpl in goal
intro Cond1
rewrite IH1 in goal at 1
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 1
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: is_mem_ta1 (("phx"::(Nil))) ("klc") = true
Prop: is_mem_ta1 ((Nil)) ("jwk") = true
Prop: is_mem_ta1 ((Nil)) ("rsq") = true
asdf
previous tactics
simpl in goal
intro Cond1
rewrite IH1 in goal at 1
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 1
parent
is_mem_ta1 (string_list2) (string1)
lower
is_mem_ta1(_, string1)
upper
_
remove upper
true()
remove lower
true()
remove upper
is_mem_ta1(string_list2, string1)
remove lower
is_mem_ta1(string_list2, string1)
remove upper
_
validate generalize_common_subterm_goal
Prop: is_mem_ta1 (("gwe"::(Nil))) ("ccb") = true
Prop: is_mem_ta1 (("dko"::(Nil))) ("xgc") = true
Prop: is_mem_ta1 (("bxe"::(Nil))) ("zfg") = true
asdf
previous tactics
simpl in goal
intro Cond1
rewrite IH1 in goal at 1
case string_eq (string2) (string1)
parent
is_mem_ta1 (string_list2) (string1)
lower
is_mem_ta1(_, string1)
upper
_
remove upper
true()
remove lower
true()
remove upper
is_mem_ta1(string_list2, string1)
remove lower
is_mem_ta1(string_list2, string1)
remove upper
_
validate generalize_common_subterm_goal
Prop: is_mem_ta1 ((Nil)) ("uzm") = true
Prop: is_mem_ta1 (("pmz"::(Nil))) ("lwt") = true
Prop: is_mem_ta1 ((Nil)) ("arg") = true
asdf
=================================================
Progress: 328


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : if string_eq (string2) (string1) then true else mem (string1) (string_list2) = true
---------------------------------------
true = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 18.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : if string_eq (string2) (string1) then true else mem (string1) (string_list2) = true
---------------------------------------
true = if string_eq (string2) (string1) then true else true

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 329


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : if string_eq (string2) (string1) then true else mem (string1) (string_list2) = true
---------------------------------------
true = if string_eq (string2) (string1) then true else true

1 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : if string_eq (string2) (string1) then true else mem (string1) (string_list2) = true
---------------------------------------
mem (string1) (string_list2) = true

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 1
rewrite IH1 in goal at 1(rank:10.)
=================================================
Progress: 330


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : if string_eq (string2) (string1) then true else mem (string1) (string_list2) = true
---------------------------------------
mem (string1) (string_list2) = true

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH1 in goal at 1(rank : 10.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : if string_eq (string2) (string1) then true else mem (string1) (string_list2) = true
---------------------------------------
mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
rewrite <- IH1 in goal at 1
reflexivity
rewrite IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: mem ("foo") (("rrf"::(Nil))) = is_mem_ta1 (("rrf"::(Nil))) ("foo")
Prop: mem ("izi") ((Nil)) = is_mem_ta1 ((Nil)) ("izi")
Prop: mem ("pac") ((Nil)) = is_mem_ta1 ((Nil)) ("pac")
previous tactics
simpl in goal
intro Cond1
rewrite <- IH1 in goal at 1
reflexivity
validate generalize_common_subterm_goal
Prop: mem ("pkl") ((Nil)) = true
Prop: mem ("faq") ((Nil)) = true
Prop: mem ("zlt") ((Nil)) = true
asdf
t is here


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : if string_eq (string2) (string1) then true else mem (string1) (string_list2) = true
---------------------------------------
mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
duplicated tactic
assert forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
induction string_list1
reflexivity
simpl in goal
intro string1
case string_eq (string2) (string1)
reflexivity
rewrite IH1 in goal at 0
reflexivity


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : if string_eq (string2) (string1) then true else mem (string1) (string_list2) = true
---------------------------------------
mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 331


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : if string_eq (string2) (string1) then true else mem (string1) (string_list2) = true
---------------------------------------
mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : -1.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : if string_eq (string2) (string1) then true else mem (string1) (string_list2) = true
---------------------------------------
mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite lemma3 in goal at 0(rank:18.)
rewrite <- IH1 in goal at 1(rank:27.)
rewrite <- lemma3 in goal at 0(rank:18.)
=================================================
Progress: 332


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : mem (string1) (string_list2) = true
Case1 : string_eq (string2) (string1) = false
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH1 in goal at 1(rank : 18.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : mem (string1) (string_list2) = true
Case1 : string_eq (string2) (string1) = false
---------------------------------------
is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 333


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : mem (string1) (string_list2) = true
Case1 : string_eq (string2) (string1) = false
---------------------------------------
is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : mem (string1) (string_list2) = true
Case1 : string_eq (string2) (string1) = false
---------------------------------------
mem (string1) (string_list2) = true

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 3
rewrite Cond1 in goal at 0(rank:17.)
rewrite IH1 in goal at 1(rank:18.)
rewrite <- Cond1 in goal at 0(rank:17.)
=================================================
Progress: 334


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : mem (string1) (string_list2) = true
Case1 : string_eq (string2) (string1) = false
---------------------------------------
mem (string1) (string_list2) = true

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 17.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : mem (string1) (string_list2) = true
Case1 : string_eq (string2) (string1) = false
---------------------------------------
true = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 335


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : mem (string1) (string_list2) = true
Case1 : string_eq (string2) (string1) = false
---------------------------------------
true = true

0 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = is_mem_ta1 (string_list1) (string1)

3 goal(s) more...

2 conjecture(s) more...
original goal
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
lemma
forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
tactics
assert forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> true = is_mem_ta1 (string_list1) (string1)
intro string1
induction string_list1
discriminate
simpl in goal
intro Cond1
case string_eq (string2) (string1)
reflexivity
rewrite IH1 in goal at 1
reflexivity
rewrite Cond1 in goal at 0
reflexivity
Deduplication: 7
Tactic List : 2
rewrite <- Cond1 in goal at 0(rank:18.)
rewrite <- lemma3 in goal at 1(rank:19.)
=================================================
Progress: 336


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : mem (string1) (string_list2) = true
Case1 : string_eq (string2) (string1) = false
---------------------------------------
mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH1 in goal at 1(rank : 18.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : mem (string1) (string_list2) = true
Case1 : string_eq (string2) (string1) = false
---------------------------------------
is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 337


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : mem (string1) (string_list2) = true
Case1 : string_eq (string2) (string1) = false
---------------------------------------
is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : mem (string1) (string_list2) = true
Case1 : string_eq (string2) (string1) = false
---------------------------------------
mem (string1) (string_list2) = true

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 3
rewrite Cond1 in goal at 0(rank:17.)
rewrite IH1 in goal at 1(rank:26.)
rewrite <- Cond1 in goal at 0(rank:17.)
=================================================
Progress: 338


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : mem (string1) (string_list2) = true
Case1 : string_eq (string2) (string1) = false
---------------------------------------
mem (string1) (string_list2) = true

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 17.)


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : mem (string1) (string_list2) = true
Case1 : string_eq (string2) (string1) = false
---------------------------------------
true = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 339


1st goal of : forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : mem (string1) (string_list2) = true -> mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = (string2::string_list2)
Cond1 : mem (string1) (string_list2) = true
Case1 : string_eq (string2) (string1) = false
---------------------------------------
true = true

0 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)

3 goal(s) more...

2 conjecture(s) more...
original goal
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
lemma
forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
tactics
assert forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
intro string1
induction string_list1
reflexivity
simpl in goal
intro Cond1
case string_eq (string2) (string1)
reflexivity
rewrite IH1 in goal at 1
reflexivity
rewrite Cond1 in goal at 0
reflexivity
Deduplication: 7
Tactic List : 2
rewrite lemma3 in goal at 1(rank:19.)
rewrite <- lemma3 in goal at 1(rank:19.)
=================================================
Progress: 340


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 18.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 341


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 2
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:9.)
rewrite Case1 in goal at 0(rank:17.)
rewrite IH1 in goal at 0(rank:25.)
=================================================
Progress: 342


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:25.)
rewrite IH1 in goal at 1(rank:25.)
rewrite IH1 in goal at 2(rank:25.)
=================================================
Progress: 343


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
case mem (string2) (string_list1)
rewrite IH1 in goal at 0
reflexivity
validate generalize_common_subterm_goal
Prop: sub_check (P ("gig") (V ("poq"))) (("swq"::(Nil))) = sub_check (P ("gig") (V ("poq"))) (("pwe"::(Nil)))
Prop: sub_check (V ("xue")) (("and"::(Nil))) = sub_check (V ("xue")) (("sae"::(Nil)))
Prop: sub_check (V ("ept")) (("yjb"::(Nil))) = sub_check (V ("ept")) (("yfd"::(Nil)))
Lemma List
forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = false -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) ((string2::string_list1))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 344


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = false -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) ((string2::string_list1))(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = false -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) ((string2::string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = false -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:17.)
=================================================
Progress: 345


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = false -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) ((string2::string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = false -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = false -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) ((string2::string_list1))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = false -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string2(rank:17.)
=================================================
Progress: 346


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = false -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) ((string2::string_list1))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = false -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = false -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) ((string2::string_list1))
string1 : string
string2 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = false -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:17.)
=================================================
Progress: 347


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = false -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) ((string2::string_list1))
string1 : string
string2 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = false -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string_list1(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = false -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) ((string2::string_list1))
string1 : string
string2 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = false -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:17.)
=================================================
Progress: 348


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = false -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) ((string2::string_list1))
string1 : string
string2 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = false -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = false -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) ((string2::string_list1))
string1 : string
string2 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
---------------------------------------
forall (lambda1:lambda), string1 = string2 -> mem (string2) (string_list1) = false -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:17.)
=================================================
Progress: 349


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = false -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) ((string2::string_list1))
string1 : string
string2 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
---------------------------------------
forall (lambda1:lambda), string1 = string2 -> mem (string2) (string_list1) = false -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = false -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) ((string2::string_list1))
string1 : string
string2 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
Cond2 : string1 = string2
---------------------------------------
forall (lambda1:lambda), mem (string2) (string_list1) = false -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:17.)
=================================================
Progress: 350


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = false -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) ((string2::string_list1))
string1 : string
string2 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
Cond2 : string1 = string2
---------------------------------------
forall (lambda1:lambda), mem (string2) (string_list1) = false -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond3(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = false -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) ((string2::string_list1))
string1 : string
string2 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
Cond2 : string1 = string2
Cond3 : mem (string2) (string_list1) = false
---------------------------------------
forall (lambda1:lambda), sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Cond2 in goal at 0(rank:25.)
induction lambda1(rank:27.)
rewrite <- Cond2 in goal at 0(rank:25.)
=================================================
Progress: 351


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 18.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite <- Case1 in goal at 2
case mem (string2) (string_list1)
validate generalize_common_subterm_goal
Prop: sub_check (P ("vgp") (V ("duv"))) (("mkf"::(Nil))) = sub_check (P ("vgp") (V ("duv"))) ((Nil))
Prop: sub_check (C (V ("ork")) (V ("mgm"))) (("neo"::(Nil))) = sub_check (C (V ("ork")) (V ("mgm"))) ((Nil))
Prop: sub_check (V ("lbk")) (("pvw"::(Nil))) = sub_check (V ("lbk")) ((Nil))
=================================================
Progress: 352


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:26.)
rewrite Case1 in goal at 1(rank:26.)
rewrite Case1 in goal at 2(rank:26.)
=================================================
Progress: 353


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
Case2 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 18.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
Case2 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case mem (string2) (string_list1)
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 1
validate generalize_common_subterm_goal
Prop: sub_check (V ("mgv")) (("ezl"::(Nil))) = sub_check (V ("mgv")) ((Nil))
Prop: sub_check (C (V ("fql")) (V ("mcu"))) (("bhr"::(Nil))) = sub_check (C (V ("fql")) (V ("mcu"))) ((Nil))
Prop: sub_check (V ("tng")) (("ror"::(Nil))) = sub_check (V ("tng")) ((Nil))
previous tactics
simpl in goal
case mem (string2) (string_list1)
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
Prop: sub_check (C (V ("knl")) (V ("zpk"))) (("ran"::(Nil))) = sub_check (C (V ("knl")) (V ("zpk"))) ((Nil))
Prop: sub_check (V ("ipj")) (("esl"::(Nil))) = sub_check (V ("ipj")) ((Nil))
Prop: sub_check (V ("cds")) (("qji"::(Nil))) = sub_check (V ("cds")) ((Nil))
=================================================
Progress: 354


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
Case2 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
Case2 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite Case2 in goal at 0(rank:26.)
rewrite Case2 in goal at 1(rank:26.)
rewrite Case2 in goal at 2(rank:26.)
=================================================
Progress: 355


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) (string_list1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string1::string_list1))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:10.)
=================================================
Progress: 356


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string1::string_list1))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string2::string_list1))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite Case1 in goal at 0
case mem (string2) (string_list1)
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: sub_check (V ("pwh")) (("uuu"::("nip"::(Nil)))) = sub_check (V ("pwh")) (("mzq"::("nip"::(Nil))))
Prop: sub_check (V ("gkp")) (("skf"::(Nil))) = sub_check (V ("gkp")) (("mqz"::(Nil)))
Prop: sub_check (V ("bkq")) (("tpo"::(Nil))) = sub_check (V ("bkq")) (("sdb"::(Nil)))
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite Case1 in goal at 0
case mem (string2) (string_list1)
validate generalize_common_subterm_goal
Prop: sub_check (C (V ("dyg")) (V ("yuy"))) (("ecc"::("bqz"::(Nil)))) = sub_check (C (V ("dyg")) (V ("yuy"))) (("bqz"::(Nil)))
Prop: sub_check (C (V ("xoz")) (V ("yuh"))) (("qsb"::(Nil))) = sub_check (C (V ("xoz")) (V ("yuh"))) ((Nil))
Prop: sub_check (V ("fws")) (("qrf"::("hhd"::("vip"::("czw"::(Nil)))))) = sub_check (V ("fws")) (("hhd"::("vip"::("czw"::(Nil)))))
Lemma List
forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = true -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string1::string_list1))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string1::string_list1))

3 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 357


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string1::string_list1))

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = true -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string1::string_list1))(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = true -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string1::string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = true -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:17.)
=================================================
Progress: 358


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = true -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string1::string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = true -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = true -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string1::string_list1))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = true -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string2(rank:17.)
=================================================
Progress: 359


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = true -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string1::string_list1))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = true -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = true -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string2 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = true -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:17.)
=================================================
Progress: 360


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = true -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string2 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = true -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string_list1(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = true -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string2 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = true -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:17.)
=================================================
Progress: 361


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = true -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string2 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = true -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = true -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string2 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
---------------------------------------
forall (lambda1:lambda), string1 = string2 -> mem (string2) (string_list1) = true -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:17.)
=================================================
Progress: 362


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = true -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string2 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
---------------------------------------
forall (lambda1:lambda), string1 = string2 -> mem (string2) (string_list1) = true -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = true -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string2 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
Cond2 : string1 = string2
---------------------------------------
forall (lambda1:lambda), mem (string2) (string_list1) = true -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:17.)
=================================================
Progress: 363


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = true -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string2 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
Cond2 : string1 = string2
---------------------------------------
forall (lambda1:lambda), mem (string2) (string_list1) = true -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond3(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = true -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string2 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
Cond2 : string1 = string2
Cond3 : mem (string2) (string_list1) = true
---------------------------------------
forall (lambda1:lambda), sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Cond2 in goal at 0(rank:25.)
induction lambda1(rank:27.)
rewrite <- Cond2 in goal at 0(rank:25.)
=================================================
Progress: 364


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 18.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite Case1 in goal at 0
case mem (string2) (string_list1)
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: sub_check (P ("wvl") (C (V ("kqg")) (V ("ysf")))) (("wio"::(Nil))) = sub_check (P ("wvl") (C (V ("kqg")) (V ("ysf")))) ((Nil))
Prop: sub_check (C (V ("lyt")) (V ("reg"))) (("qty"::(Nil))) = sub_check (C (V ("lyt")) (V ("reg"))) ((Nil))
Prop: sub_check (P ("hqo") (V ("fzg"))) (("uvl"::(Nil))) = sub_check (P ("hqo") (V ("fzg"))) ((Nil))
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite Case1 in goal at 0
case mem (string2) (string_list1)
validate generalize_common_subterm_goal
Prop: sub_check (V ("duu")) (("ouw"::(Nil))) = sub_check (V ("duu")) ((Nil))
Prop: sub_check (V ("oju")) (("zia"::(Nil))) = sub_check (V ("oju")) ((Nil))
Prop: sub_check (V ("zvm")) (("mzw"::(Nil))) = sub_check (V ("zvm")) ((Nil))
=================================================
Progress: 365


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite Case1 in goal at 0
case mem (string2) (string_list1)
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: sub_check (V ("dks")) (("ypx"::(Nil))) = sub_check (V ("dks")) ((Nil))
Prop: sub_check (P ("fsk") (V ("xuf"))) (("elv"::(Nil))) = sub_check (P ("fsk") (V ("xuf"))) ((Nil))
Prop: sub_check (V ("tto")) (("oon"::(Nil))) = sub_check (V ("tto")) ((Nil))
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite Case1 in goal at 0
case mem (string2) (string_list1)
validate generalize_common_subterm_goal
Prop: sub_check (V ("vvc")) (("sgm"::(Nil))) = sub_check (V ("vvc")) ((Nil))
Prop: sub_check (V ("lse")) (("jhr"::(Nil))) = sub_check (V ("lse")) ((Nil))
Prop: sub_check (V ("lvp")) (("ljl"::("sja"::(Nil)))) = sub_check (V ("lvp")) (("sja"::(Nil)))
=================================================
Progress: 366


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 18.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite <- Case1 in goal at 2
rewrite IH1 in goal at 2
case mem (string2) (string_list1)
validate generalize_common_subterm_goal
Prop: sub_check (V ("njd")) (("pgf"::("nnd"::(Nil)))) = sub_check (V ("njd")) (("nnd"::(Nil)))
Prop: sub_check (C (P ("jmn") (V ("wjh"))) (V ("sjp"))) (("xty"::(Nil))) = sub_check (C (P ("jmn") (V ("wjh"))) (V ("sjp"))) ((Nil))
Prop: sub_check (V ("vif")) (("kka"::(Nil))) = sub_check (V ("vif")) ((Nil))
=================================================
Progress: 367


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:26.)
rewrite Case1 in goal at 1(rank:26.)
rewrite Case1 in goal at 2(rank:26.)
=================================================
Progress: 368


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string2) (string_list1) = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 18.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 369


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
mem (string2) (string_list1) = is_mem_ta1 (string_list1) (string2)

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 31
Tactic List : 2
rewrite lemma3 in goal at 0(rank:17.)
rewrite <- lemma3 in goal at 0(rank:17.)
=================================================
Progress: 370


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
mem (string2) (string_list1) = is_mem_ta1 (string_list1) (string2)

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8.)
=================================================
Progress: 371


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)

2 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
sub_check (P (string2) (lambda2)) ((string1::string_list1)) = sub_check_ta1 (P (string2) (lambda2)) (string_list1)

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 2
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 372


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
sub_check (P (string2) (lambda2)) ((string1::string_list1)) = sub_check_ta1 (P (string2) (lambda2)) (string_list1)

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
if if string_eq (string1) (string2) then true else mem (string2) (string_list1) then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
case string_eq (string1) (string2)(rank:9.)
rewrite <- Cond1 in goal at 0(rank:24.)
rewrite IH1 in goal at 0(rank:16.)
rewrite lemma3 in goal at 0(rank:24.)
=================================================
Progress: 373


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
if if string_eq (string1) (string2) then true else mem (string2) (string_list1) then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))

1 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 1(rank:9.)
=================================================
Progress: 374


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:9.)
rewrite Case1 in goal at 0(rank:17.)
rewrite IH1 in goal at 0(rank:25.)
=================================================
Progress: 375


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) ((string1::string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:9.)
=================================================
Progress: 376


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) ((string1::string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check_ta1 (lambda2) (string_list1) = sub_check_ta1 (lambda2) ((string1::string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
case string_eq (string2) (string1)
reflexivity
rewrite IH1 in goal at 0
reflexivity
rewrite lemma3 in goal at 0
reflexivity
rewrite lemma3 in goal at 0
reflexivity
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite <- Case1 in goal at 0
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (C (V ("myn")) (C (V ("sgv")) (V ("yrn")))) ((Nil)) = sub_check_ta1 (C (V ("myn")) (C (V ("sgv")) (V ("yrn")))) (("aex"::(Nil)))
Prop: sub_check_ta1 (V ("ocn")) ((Nil)) = sub_check_ta1 (V ("ocn")) (("ghu"::(Nil)))
Prop: sub_check_ta1 (V ("xno")) ((Nil)) = sub_check_ta1 (V ("xno")) (("tul"::(Nil)))
previous tactics
simpl in goal
intro string1
case string_eq (string2) (string1)
reflexivity
rewrite IH1 in goal at 0
reflexivity
rewrite lemma3 in goal at 0
reflexivity
rewrite lemma3 in goal at 0
reflexivity
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite <- Case1 in goal at 0
Prop: sub_check (V ("veo")) ((Nil)) = sub_check_ta1 (V ("veo")) ((Nil))
Prop: sub_check (V ("don")) ((Nil)) = sub_check_ta1 (V ("don")) ((Nil))
Prop: sub_check (V ("rlt")) ((Nil)) = sub_check_ta1 (V ("rlt")) ((Nil))
previous tactics
simpl in goal
intro string1
case string_eq (string2) (string1)
reflexivity
rewrite IH1 in goal at 0
reflexivity
rewrite lemma3 in goal at 0
reflexivity
rewrite lemma3 in goal at 0
reflexivity
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
validate generalize_common_subterm_goal
Prop: sub_check (V ("xrl")) (("ike"::(Nil))) = sub_check_ta1 (V ("xrl")) (("qjk"::(Nil)))
Prop: sub_check (C (V ("pkd")) (P ("qyy") (V ("vjz")))) (("dzn"::("pus"::(Nil)))) = sub_check_ta1 (C (V ("pkd")) (P ("qyy") (V ("vjz")))) (("brj"::("pus"::(Nil))))
Prop: sub_check (V ("wbv")) (("rmf"::(Nil))) = sub_check_ta1 (V ("wbv")) (("jcb"::(Nil)))
previous tactics
simpl in goal
intro string1
case string_eq (string2) (string1)
reflexivity
rewrite IH1 in goal at 0
reflexivity
rewrite lemma3 in goal at 0
reflexivity
rewrite lemma3 in goal at 0
reflexivity
simpl in goal
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
Prop: sub_check (V ("nyc")) (("xrb"::(Nil))) = sub_check_ta1 (V ("nyc")) (("ufj"::(Nil)))
Prop: sub_check (V ("qwz")) (("bwr"::("qhb"::("gwu"::(Nil))))) = sub_check_ta1 (V ("qwz")) (("vkc"::("qhb"::("gwu"::(Nil)))))
Prop: sub_check (V ("dyo")) (("uuf"::(Nil))) = sub_check_ta1 (V ("dyo")) (("vas"::(Nil)))
Lemma List
forall (string_list1:string list) (lambda1:lambda), sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) (string_list1)
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) ((string1::string_list1))

2 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 377


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) ((string1::string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string_list1:string list) (lambda1:lambda), sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) (string_list1)(rank : 0.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) (string_list1)

---------------------------------------
forall (string_list1:string list) (lambda1:lambda), sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) (string_list1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:11.)
=================================================
Progress: 378


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) (string_list1)

---------------------------------------
forall (string_list1:string list) (lambda1:lambda), sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) (string_list1)

0 goal(s) more...

3 conjecture(s) more...
>>> induction lambda1(rank : 11.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
forall (string_list1:string list), sub_check (V (string1)) (string_list1) = sub_check_ta1 (V (string1)) (string_list1)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 379


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
forall (string_list1:string list), sub_check (V (string1)) (string_list1) = sub_check_ta1 (V (string1)) (string_list1)

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
forall (string_list1:string list), mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite lemma3 in goal at 0(rank:19.)
induction string_list1(rank:20.)
rewrite <- lemma3 in goal at 0(rank:19.)
=================================================
Progress: 380


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
if if string_eq (string1) (string2) then true else mem (string2) (string_list1) then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 16.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
if if string_eq (string1) (string2) then true else mem (string2) (string_list1) then sub_check_ta1 (lambda2) (string_list1) else sub_check (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
case string_eq (string1) (string2)(rank:9.)
rewrite lemma3 in goal at 0(rank:24.)
rewrite <- Cond1 in goal at 0(rank:24.)
=================================================
Progress: 381


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
if if string_eq (string1) (string2) then true else mem (string2) (string_list1) then sub_check_ta1 (lambda2) (string_list1) else sub_check (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))

1 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
sub_check_ta1 (lambda2) (string_list1) = sub_check_ta1 (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 1(rank:9.)
=================================================
Progress: 382


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
sub_check_ta1 (lambda2) (string_list1) = sub_check_ta1 (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check_ta1 (lambda2) (string_list1) = sub_check_ta1 (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:9.)
rewrite <- IH1 in goal at 0(rank:17.)
=================================================
Progress: 383


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check_ta1 (lambda2) (string_list1) = sub_check_ta1 (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check_ta1 (lambda2) (string_list1) = sub_check_ta1 (lambda2) ((string1::string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:9.)
=================================================
Progress: 384


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check_ta1 (lambda2) (string_list1) = sub_check_ta1 (lambda2) ((string1::string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) ((string1::string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
case string_eq (string2) (string1)
reflexivity
rewrite IH1 in goal at 0
reflexivity
rewrite lemma3 in goal at 0
reflexivity
rewrite lemma3 in goal at 0
reflexivity
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite <- Case1 in goal at 0
rewrite <- IH1 in goal at 0
Prop: sub_check (C (V ("etk")) (V ("pgw"))) (("qdw"::("giw"::(Nil)))) = sub_check_ta1 (C (V ("etk")) (V ("pgw"))) (("qdw"::("giw"::(Nil))))
Prop: sub_check (V ("rel")) (("qkq"::(Nil))) = sub_check_ta1 (V ("rel")) (("qkq"::(Nil)))
Prop: sub_check (V ("qnj")) (("dnd"::(Nil))) = sub_check_ta1 (V ("qnj")) (("dnd"::(Nil)))
previous tactics
simpl in goal
intro string1
case string_eq (string2) (string1)
reflexivity
rewrite IH1 in goal at 0
reflexivity
rewrite lemma3 in goal at 0
reflexivity
rewrite lemma3 in goal at 0
reflexivity
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("owx")) ((Nil)) = sub_check_ta1 (V ("owx")) (("btb"::(Nil)))
Prop: sub_check_ta1 (V ("wso")) ((Nil)) = sub_check_ta1 (V ("wso")) (("ycw"::(Nil)))
Prop: sub_check_ta1 (C (C (V ("kbz")) (V ("uqw"))) (P ("oqm") (V ("pel")))) ((Nil)) = sub_check_ta1 (C (C (V ("kbz")) (V ("uqw"))) (P ("oqm") (V ("pel")))) (("rxt"::(Nil)))
previous tactics
simpl in goal
intro string1
case string_eq (string2) (string1)
reflexivity
rewrite IH1 in goal at 0
reflexivity
rewrite lemma3 in goal at 0
reflexivity
rewrite lemma3 in goal at 0
reflexivity
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (P ("rzu") (V ("hzr"))) ((Nil)) = sub_check_ta1 (P ("rzu") (V ("hzr"))) (("nob"::(Nil)))
Prop: sub_check_ta1 (V ("tii")) ((Nil)) = sub_check_ta1 (V ("tii")) (("tvg"::(Nil)))
Prop: sub_check_ta1 (P ("qnj") (V ("dde"))) ((Nil)) = sub_check_ta1 (P ("qnj") (V ("dde"))) (("uki"::(Nil)))
previous tactics
simpl in goal
intro string1
case string_eq (string2) (string1)
reflexivity
rewrite IH1 in goal at 0
reflexivity
rewrite lemma3 in goal at 0
reflexivity
rewrite lemma3 in goal at 0
reflexivity
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (C (V ("mfm")) (P ("xie") (V ("kok")))) ((Nil)) = sub_check_ta1 (C (V ("mfm")) (P ("xie") (V ("kok")))) (("smt"::(Nil)))
Prop: sub_check_ta1 (V ("xjq")) (("ihv"::(Nil))) = sub_check_ta1 (V ("xjq")) (("lkx"::("ihv"::(Nil))))
Prop: sub_check_ta1 (C (C (V ("zmk")) (C (V ("yvk")) (V ("lan")))) (V ("fvs"))) ((Nil)) = sub_check_ta1 (C (C (V ("zmk")) (C (V ("yvk")) (V ("lan")))) (V ("fvs"))) (("hcr"::(Nil)))
=================================================
Progress: 385


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = sub_check_ta1 (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
case string_eq (string2) (string1)
reflexivity
rewrite IH1 in goal at 0
reflexivity
rewrite lemma3 in goal at 0
reflexivity
rewrite lemma3 in goal at 0
reflexivity
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite Case1 in goal at 0
Prop: sub_check (V ("nlf")) (("haz"::(Nil))) = sub_check_ta1 (V ("nlf")) (("haz"::(Nil)))
Prop: sub_check (V ("now")) ((Nil)) = sub_check_ta1 (V ("now")) ((Nil))
Prop: sub_check (V ("hbq")) (("dbu"::("uvf"::(Nil)))) = sub_check_ta1 (V ("hbq")) (("dbu"::("uvf"::(Nil))))
previous tactics
simpl in goal
intro string1
case string_eq (string2) (string1)
reflexivity
rewrite IH1 in goal at 0
reflexivity
rewrite lemma3 in goal at 0
reflexivity
rewrite lemma3 in goal at 0
reflexivity
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
validate generalize_common_subterm_goal
Prop: sub_check (C (C (V ("wau")) (C (V ("rjf")) (C (V ("lju")) (V ("lwu"))))) (V ("lvn"))) (("fgh"::(Nil))) = sub_check_ta1 (C (C (V ("wau")) (C (V ("rjf")) (C (V ("lju")) (V ("lwu"))))) (V ("lvn"))) (("hgu"::(Nil)))
Prop: sub_check (V ("rgq")) (("lha"::("gzx"::(Nil)))) = sub_check_ta1 (V ("rgq")) (("sua"::("gzx"::(Nil))))
Prop: sub_check (V ("tgb")) (("xym"::("cvj"::(Nil)))) = sub_check_ta1 (V ("tgb")) (("yuk"::("cvj"::(Nil))))
previous tactics
simpl in goal
intro string1
case string_eq (string2) (string1)
reflexivity
rewrite IH1 in goal at 0
reflexivity
rewrite lemma3 in goal at 0
reflexivity
rewrite lemma3 in goal at 0
reflexivity
simpl in goal
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
Prop: sub_check (V ("khe")) (("qfv"::(Nil))) = sub_check_ta1 (V ("khe")) (("hvn"::(Nil)))
Prop: sub_check (V ("luq")) (("dwc"::("evr"::(Nil)))) = sub_check_ta1 (V ("luq")) (("qei"::("evr"::(Nil))))
Prop: sub_check (C (V ("mqm")) (V ("uus"))) (("hdb"::(Nil))) = sub_check_ta1 (C (V ("mqm")) (V ("uus"))) (("lki"::(Nil)))
=================================================
Progress: 386


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check_ta1 (lambda2) (string_list1) = sub_check_ta1 (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:9.)
=================================================
Progress: 387


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = sub_check_ta1 (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
case string_eq (string2) (string1)
reflexivity
rewrite IH1 in goal at 0
reflexivity
rewrite lemma3 in goal at 0
reflexivity
rewrite lemma3 in goal at 0
reflexivity
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite <- IH1 in goal at 0
rewrite Case1 in goal at 0
Prop: sub_check (V ("yeg")) ((Nil)) = sub_check_ta1 (V ("yeg")) ((Nil))
Prop: sub_check (P ("mqt") (V ("nct"))) (("iyj"::(Nil))) = sub_check_ta1 (P ("mqt") (V ("nct"))) (("iyj"::(Nil)))
Prop: sub_check (V ("tme")) ((Nil)) = sub_check_ta1 (V ("tme")) ((Nil))
previous tactics
simpl in goal
intro string1
case string_eq (string2) (string1)
reflexivity
rewrite IH1 in goal at 0
reflexivity
rewrite lemma3 in goal at 0
reflexivity
rewrite lemma3 in goal at 0
reflexivity
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: sub_check (V ("jqd")) (("epe"::(Nil))) = sub_check_ta1 (V ("jqd")) (("pwd"::(Nil)))
Prop: sub_check (V ("kee")) (("nau"::("prd"::(Nil)))) = sub_check_ta1 (V ("kee")) (("def"::("prd"::(Nil))))
Prop: sub_check (V ("owk")) (("ccl"::(Nil))) = sub_check_ta1 (V ("owk")) (("iaq"::(Nil)))
previous tactics
simpl in goal
intro string1
case string_eq (string2) (string1)
reflexivity
rewrite IH1 in goal at 0
reflexivity
rewrite lemma3 in goal at 0
reflexivity
rewrite lemma3 in goal at 0
reflexivity
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (P ("eoz") (V ("akw"))) ((Nil)) = sub_check_ta1 (P ("eoz") (V ("akw"))) (("aom"::(Nil)))
Prop: sub_check_ta1 (V ("kya")) (("uaq"::("tsk"::(Nil)))) = sub_check_ta1 (V ("kya")) (("tem"::("uaq"::("tsk"::(Nil)))))
Prop: sub_check_ta1 (P ("ucu") (V ("xmy"))) (("pga"::("sye"::(Nil)))) = sub_check_ta1 (P ("ucu") (V ("xmy"))) (("bwx"::("pga"::("sye"::(Nil)))))
previous tactics
simpl in goal
intro string1
case string_eq (string2) (string1)
reflexivity
rewrite IH1 in goal at 0
reflexivity
rewrite lemma3 in goal at 0
reflexivity
rewrite lemma3 in goal at 0
reflexivity
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (P ("rdt") (V ("osm"))) (("nrp"::(Nil))) = sub_check_ta1 (P ("rdt") (V ("osm"))) (("hwh"::("nrp"::(Nil))))
Prop: sub_check_ta1 (V ("oao")) ((Nil)) = sub_check_ta1 (V ("oao")) (("dmx"::(Nil)))
Prop: sub_check_ta1 (V ("jxx")) (("hhp"::("akg"::(Nil)))) = sub_check_ta1 (V ("jxx")) (("ydh"::("hhp"::("akg"::(Nil)))))
=================================================
Progress: 388


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string2) (string_list1) = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 18.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 389


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 36
Tactic List : 1
reflexivity(rank:8.)
=================================================
Progress: 390


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)

2 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
sub_check_ta1 (P (string2) (lambda2)) ((string1::string_list1)) = sub_check_ta1 (P (string2) (lambda2)) (string_list1)

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 1
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 391


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
sub_check_ta1 (P (string2) (lambda2)) ((string1::string_list1)) = sub_check_ta1 (P (string2) (lambda2)) (string_list1)

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
case string_eq (string2) (string1)
reflexivity
rewrite IH1 in goal at 0
reflexivity
simpl in goal
rewrite lemma3 in goal at 0
reflexivity
reflexivity
simpl in goal
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("ivs")) (("frd"::("qyf"::("djp"::(Nil))))) = sub_check_ta1 (V ("ivs")) (("frd"::("djp"::(Nil))))
Prop: sub_check_ta1 (V ("umm")) (("mwy"::("evb"::("gvm"::(Nil))))) = sub_check_ta1 (V ("umm")) (("mwy"::("gvm"::(Nil))))
Prop: sub_check_ta1 (V ("hhh")) (("uap"::("nky"::(Nil)))) = sub_check_ta1 (V ("hhh")) (("uap"::(Nil)))
Lemma List
forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))

1 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 392


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))

1 goal(s) more...

2 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:9.)
=================================================
Progress: 393


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:9.)
=================================================
Progress: 394


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))

0 goal(s) more...

3 conjecture(s) more...
>>> intro string_list1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda) (string2:string), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 395


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda) (string2:string), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
---------------------------------------
forall (lambda1:lambda) (string2:string), sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:11.)
=================================================
Progress: 396


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
---------------------------------------
forall (lambda1:lambda) (string2:string), sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))

0 goal(s) more...

3 conjecture(s) more...
>>> induction lambda1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), sub_check_ta1 (V (string3)) ((string2::(string1::string_list1))) = sub_check_ta1 (V (string3)) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 397


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), sub_check_ta1 (V (string3)) ((string2::(string1::string_list1))) = sub_check_ta1 (V (string3)) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::string_list1)) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string2(rank:11.)
=================================================
Progress: 398


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::string_list1)) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

2 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::string_list1)) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:12.)
=================================================
Progress: 399


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::string_list1)) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 400


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 (string_list1) (string3) = is_mem_ta1 (string_list1) (string3)

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 5
case string_eq (string1) (string3)(rank:12.)
rewrite <- Cond1 in goal at 0(rank:27.)
rewrite <- lemma3 in goal at 0(rank:27.)
rewrite <- lemma3 in goal at 1(rank:27.)
rewrite <- lemma3 in goal at 2(rank:27.)
=================================================
Progress: 401


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 (string_list1) (string3) = is_mem_ta1 (string_list1) (string3)

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string3)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 1(rank:12.)
=================================================
Progress: 402


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string3)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 1(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = is_mem_ta1 (string_list1) (string3)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- Case2 in goal at 0(rank:12.)
rewrite <- Cond1 in goal at 0(rank:20.)
rewrite <- lemma3 in goal at 0(rank:20.)
=================================================
Progress: 403


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = is_mem_ta1 (string_list1) (string3)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = is_mem_ta1 (string_list1) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Cond1 in goal at 0(rank:20.)
rewrite <- lemma3 in goal at 0(rank:20.)
=================================================
Progress: 404


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::(string1::string_list1))) = sub_check (lambda1) ((string2::string_list1))
string1 : string
string2 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
Cond2 : mem (string2) (string_list1) = false
Cond3 : string_eq (string1) (string2) = false
---------------------------------------
forall (lambda1:lambda), sub_check (lambda1) ((string2::(string1::string_list1))) = sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

3 conjecture(s) more...
>>> induction lambda1(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::(string1::string_list1))) = sub_check (lambda1) ((string2::string_list1))
string1 : string
string2 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
Cond2 : mem (string2) (string_list1) = false
Cond3 : string_eq (string1) (string2) = false
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
sub_check (V (string3)) ((string2::(string1::string_list1))) = sub_check (V (string3)) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:19.)
=================================================
Progress: 405


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
forall (string_list1:string list), mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 19.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
forall (string_list1:string list), is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string1)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 406


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
forall (string_list1:string list), is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string1)

2 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check (lambda2) (string_list1) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
forall (string_list1:string list), sub_check (P (string1) (lambda2)) (string_list1) = sub_check_ta1 (P (string1) (lambda2)) (string_list1)

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 407


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check (lambda2) (string_list1) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
forall (string_list1:string list), sub_check (P (string1) (lambda2)) (string_list1) = sub_check_ta1 (P (string1) (lambda2)) (string_list1)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check (lambda2) (string_list1) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
forall (string_list1:string list), if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) ((string1::string_list1))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:10.)
=================================================
Progress: 408


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check (lambda2) (string_list1) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
forall (string_list1:string list), if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) ((string1::string_list1))

1 goal(s) more...

3 conjecture(s) more...
>>> intro string_list1(rank : 10.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check (lambda2) (string_list1) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
---------------------------------------
if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) ((string1::string_list1))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case mem (string1) (string_list1)(rank:11.)
rewrite IH1 in goal at 0(rank:26.)
rewrite IH1 in goal at 1(rank:26.)
rewrite IH1 in goal at 2(rank:26.)
rewrite lemma3 in goal at 0(rank:26.)
rewrite <- IH1 in goal at 0(rank:26.)
=================================================
Progress: 409


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check (lambda2) (string_list1) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
---------------------------------------
if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) ((string1::string_list1))

1 goal(s) more...

3 conjecture(s) more...
>>> case mem (string1) (string_list1)(rank : 11.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check (lambda2) (string_list1) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check_ta1 (lambda2) ((string1::string_list1))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:19.)
rewrite <- IH1 in goal at 0(rank:19.)
=================================================
Progress: 410


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::(string1::string_list1))) = sub_check (lambda1) ((string2::string_list1))
string1 : string
string2 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
Cond2 : mem (string2) (string_list1) = false
Cond3 : string_eq (string1) (string2) = false
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
sub_check (V (string3)) ((string2::(string1::string_list1))) = sub_check (V (string3)) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::(string1::string_list1))) = sub_check (lambda1) ((string2::string_list1))
string1 : string
string2 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
Cond2 : mem (string2) (string_list1) = false
Cond3 : string_eq (string1) (string2) = false
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
if string_eq (string2) (string3) then true else mem (string3) ((string1::string_list1)) = if string_eq (string2) (string3) then true else mem (string3) (string_list1)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:20.)
=================================================
Progress: 411


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check (lambda2) (string_list1) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check_ta1 (lambda2) ((string1::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 19.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check (lambda2) (string_list1) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda2) (string_list1) = sub_check_ta1 (lambda2) ((string1::string_list1))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 2(rank:11.)
=================================================
Progress: 412


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check (lambda2) (string_list1) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda2) (string_list1) = sub_check_ta1 (lambda2) ((string1::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 11.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check (lambda2) (string_list1) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string_list1
case mem (string1) (string_list1)
rewrite IH1 in goal at 0
rewrite <- IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("sqp")) ((Nil)) = sub_check (V ("sqp")) (("kcw"::(Nil)))
Prop: sub_check_ta1 (V ("mwn")) (("dfm"::(Nil))) = sub_check (V ("mwn")) (("zey"::("dfm"::(Nil))))
Prop: sub_check_ta1 (V ("qcx")) ((Nil)) = sub_check (V ("qcx")) (("bas"::(Nil)))
previous tactics
simpl in goal
intro string_list1
case mem (string1) (string_list1)
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("rxr")) ((Nil)) = sub_check_ta1 (V ("rxr")) (("aky"::(Nil)))
Prop: sub_check_ta1 (V ("uwz")) (("gap"::(Nil))) = sub_check_ta1 (V ("uwz")) (("pgb"::("gap"::(Nil))))
Prop: sub_check_ta1 (C (P ("zpb") (V ("gqd"))) (V ("srw"))) ((Nil)) = sub_check_ta1 (C (P ("zpb") (V ("gqd"))) (V ("srw"))) (("mit"::(Nil)))
previous tactics
simpl in goal
intro string_list1
case mem (string1) (string_list1)
validate generalize_common_subterm_goal
Prop: sub_check (V ("myx")) ((Nil)) = sub_check_ta1 (V ("myx")) (("ois"::(Nil)))
Prop: sub_check (V ("hvv")) ((Nil)) = sub_check_ta1 (V ("hvv")) (("sjj"::(Nil)))
Prop: sub_check (P ("dns") (V ("umy"))) (("vof"::(Nil))) = sub_check_ta1 (P ("dns") (V ("umy"))) (("kvn"::("vof"::(Nil))))
Lemma List
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
End of Lemma List


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check (lambda2) (string_list1) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check_ta1 (lambda2) ((string1::string_list1))

2 goal(s) more...

3 conjecture(s) more...
Lemma List
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
End of Lemma List


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check (lambda2) (string_list1) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda2) (string_list1) = sub_check_ta1 (lambda2) ((string1::string_list1))

2 goal(s) more...

3 conjecture(s) more...
Lemma List
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
End of Lemma List


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check (lambda2) (string_list1) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 413


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check (lambda2) (string_list1) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check_ta1 (lambda2) ((string1::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11.)
=================================================
Progress: 414


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check (lambda2) (string_list1) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda2) (string_list1) = sub_check_ta1 (lambda2) ((string1::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11.)
=================================================
Progress: 415


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check (lambda2) (string_list1) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11.)
=================================================
Progress: 416


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:11.)
=================================================
Progress: 417


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:11.)
=================================================
Progress: 418


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:11.)
=================================================
Progress: 419


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))

0 goal(s) more...

4 conjecture(s) more...
>>> intro string_list1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11.)
=================================================
Progress: 420


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))

0 goal(s) more...

4 conjecture(s) more...
>>> intro string_list1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11.)
=================================================
Progress: 421


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

4 conjecture(s) more...
>>> intro string_list1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11.)
=================================================
Progress: 422


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
---------------------------------------
forall (lambda1:lambda), sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:13.)
=================================================
Progress: 423


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:13.)
=================================================
Progress: 424


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:13.)
=================================================
Progress: 425


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
---------------------------------------
forall (lambda1:lambda), sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))

0 goal(s) more...

4 conjecture(s) more...
>>> induction lambda1(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
sub_check (V (string2)) (string_list1) = sub_check_ta1 (V (string2)) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 426


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))

0 goal(s) more...

4 conjecture(s) more...
>>> induction lambda1(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
sub_check_ta1 (V (string2)) (string_list1) = sub_check_ta1 (V (string2)) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 427


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

4 conjecture(s) more...
>>> induction lambda1(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
sub_check_ta1 (V (string2)) (string_list1) = sub_check (V (string2)) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 428


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
sub_check (V (string2)) (string_list1) = sub_check_ta1 (V (string2)) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
mem (string2) (string_list1) = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 4
case string_eq (string1) (string2)(rank:14.)
rewrite <- lemma3 in goal at 0(rank:21.)
rewrite lemma3 in goal at 0(rank:21.)
rewrite <- Cond1 in goal at 0(rank:29.)
=================================================
Progress: 429


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
sub_check_ta1 (V (string2)) (string_list1) = sub_check_ta1 (V (string2)) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
is_mem_ta1 (string_list1) (string2) = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 5
case string_eq (string1) (string2)(rank:14.)
rewrite <- Cond1 in goal at 0(rank:29.)
rewrite <- lemma3 in goal at 0(rank:29.)
rewrite <- lemma3 in goal at 1(rank:29.)
rewrite <- lemma3 in goal at 2(rank:29.)
=================================================
Progress: 430


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
sub_check_ta1 (V (string2)) (string_list1) = sub_check (V (string2)) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
is_mem_ta1 (string_list1) (string2) = if string_eq (string1) (string2) then true else mem (string2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 4
case string_eq (string1) (string2)(rank:14.)
rewrite <- lemma3 in goal at 0(rank:21.)
rewrite lemma3 in goal at 0(rank:21.)
rewrite <- Cond1 in goal at 0(rank:29.)
=================================================
Progress: 431


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
mem (string2) (string_list1) = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)

2 goal(s) more...

4 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 14.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
mem (string2) (string_list1) = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 1(rank:14.)
=================================================
Progress: 432


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
is_mem_ta1 (string_list1) (string2) = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)

2 goal(s) more...

4 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 14.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list1) (string2) = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 1(rank:14.)
=================================================
Progress: 433


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
is_mem_ta1 (string_list1) (string2) = if string_eq (string1) (string2) then true else mem (string2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 14.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list1) (string2) = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 1(rank:14.)
=================================================
Progress: 434


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
mem (string2) (string_list1) = true

3 goal(s) more...

4 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 1(rank : 14.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string2) (string_list1) = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:14.)
rewrite lemma3 in goal at 0(rank:30.)
rewrite <- Cond1 in goal at 0(rank:22.)
=================================================
Progress: 435


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list1) (string2) = true

3 goal(s) more...

4 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 1(rank : 14.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string2) = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:14.)
rewrite <- Cond1 in goal at 0(rank:22.)
rewrite <- lemma3 in goal at 0(rank:22.)
=================================================
Progress: 436


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list1) (string2) = true

3 goal(s) more...

4 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 1(rank : 14.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string2) = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:14.)
rewrite <- Cond1 in goal at 0(rank:22.)
rewrite <- lemma3 in goal at 0(rank:22.)
=================================================
Progress: 437


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string2) (string_list1) = true

3 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 14.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string1) (string_list1) = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:22.)
rewrite lemma3 in goal at 0(rank:30.)
rewrite <- Cond1 in goal at 0(rank:22.)
=================================================
Progress: 438


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string2) = true

3 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 14.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string1) = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
rewrite <- Cond1 in goal at 0(rank:22.)
rewrite <- lemma3 in goal at 0(rank:22.)
=================================================
Progress: 439


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string2) = true

3 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 14.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string1) = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
rewrite <- Cond1 in goal at 0(rank:22.)
rewrite <- lemma3 in goal at 0(rank:22.)
=================================================
Progress: 440


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check (lambda2) (string_list1) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check_ta1 (lambda2) ((string1::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 19.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check (lambda2) (string_list1) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string_list1
case mem (string1) (string_list1)
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: sub_check (V ("ssw")) ((Nil)) = sub_check (V ("ssw")) (("xoa"::(Nil)))
Prop: sub_check (V ("cim")) ((Nil)) = sub_check (V ("cim")) (("rwn"::(Nil)))
Prop: sub_check (V ("inx")) ((Nil)) = sub_check (V ("inx")) (("vnu"::(Nil)))
previous tactics
simpl in goal
intro string_list1
case mem (string1) (string_list1)
validate generalize_common_subterm_goal
Prop: sub_check (C (V ("rnk")) (V ("rja"))) (("sfj"::(Nil))) = sub_check_ta1 (C (V ("rnk")) (V ("rja"))) (("xek"::("sfj"::(Nil))))
Prop: sub_check (V ("gkf")) ((Nil)) = sub_check_ta1 (V ("gkf")) (("vyt"::(Nil)))
Prop: sub_check (P ("zlb") (V ("ujb"))) (("jkd"::("ght"::(Nil)))) = sub_check_ta1 (P ("zlb") (V ("ujb"))) (("ydl"::("jkd"::("ght"::(Nil)))))
Lemma List
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
End of Lemma List


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check (lambda2) (string_list1) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 441


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check (lambda2) (string_list1) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11.)
=================================================
Progress: 442


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:11.)
=================================================
Progress: 443


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

4 conjecture(s) more...
>>> intro string_list1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11.)
=================================================
Progress: 444


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
---------------------------------------
forall (lambda1:lambda), sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:13.)
=================================================
Progress: 445


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
---------------------------------------
forall (lambda1:lambda), sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

4 conjecture(s) more...
>>> induction lambda1(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
sub_check (V (string2)) (string_list1) = sub_check (V (string2)) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 446


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
sub_check (V (string2)) (string_list1) = sub_check (V (string2)) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
mem (string2) (string_list1) = if string_eq (string1) (string2) then true else mem (string2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 5
case string_eq (string1) (string2)(rank:14.)
rewrite lemma3 in goal at 0(rank:29.)
rewrite lemma3 in goal at 1(rank:29.)
rewrite lemma3 in goal at 2(rank:29.)
rewrite <- Cond1 in goal at 0(rank:29.)
=================================================
Progress: 447


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
mem (string2) (string_list1) = if string_eq (string1) (string2) then true else mem (string2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 14.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
mem (string2) (string_list1) = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 1(rank:14.)
=================================================
Progress: 448


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
mem (string2) (string_list1) = true

3 goal(s) more...

4 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 1(rank : 14.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string2) (string_list1) = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:14.)
rewrite lemma3 in goal at 0(rank:30.)
rewrite <- Cond1 in goal at 0(rank:22.)
=================================================
Progress: 449


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string2) (string_list1) = true

3 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 14.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string1) (string_list1) = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:22.)
rewrite lemma3 in goal at 0(rank:30.)
rewrite <- Cond1 in goal at 0(rank:22.)
=================================================
Progress: 450


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
---------------------------------------
forall (string_list1:string list), true = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 20.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
---------------------------------------
forall (string_list1:string list), true = mem (string2) (string_list1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction string_list1(rank:13.)
=================================================
Progress: 451


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
---------------------------------------
forall (string_list1:string list), true = mem (string2) (string_list1)

3 goal(s) more...

3 conjecture(s) more...
>>> induction string_list1(rank : 13.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
Base2 : string_list1 = (Nil)
---------------------------------------
true = mem (string2) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 452


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
Base2 : string_list1 = (Nil)
---------------------------------------
true = mem (string2) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
Base2 : string_list1 = (Nil)
---------------------------------------
true = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 453


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
---------------------------------------
forall (string_list1:string list), true = is_mem_ta1 (string_list1) (string1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 20.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
---------------------------------------
forall (string_list1:string list), true = mem (string1) (string_list1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction string_list1(rank:13.)
=================================================
Progress: 454


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
---------------------------------------
forall (string_list1:string list), true = mem (string1) (string_list1)

3 goal(s) more...

3 conjecture(s) more...
>>> induction string_list1(rank : 13.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
Base2 : string_list1 = (Nil)
---------------------------------------
true = mem (string1) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 455


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
Base2 : string_list1 = (Nil)
---------------------------------------
true = mem (string1) ((Nil))

4 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
Base2 : string_list1 = (Nil)
---------------------------------------
true = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 456


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list1) = mem (string1) (string_list2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = mem (string1) (string_list3)
Inductive1 : string_list2 = (string2::string_list3)
string1 : string
---------------------------------------
false = if string_eq (string2) (string1) then true else mem (string1) (string_list3)

1 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 20.)


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list1) = mem (string1) (string_list2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = mem (string1) (string_list3)
Inductive1 : string_list2 = (string2::string_list3)
string1 : string
---------------------------------------
false = if string_eq (string2) (string1) then true else false

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string1)(rank:13.)
=================================================
Progress: 457


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list1) = mem (string1) (string_list2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = mem (string1) (string_list3)
Inductive1 : string_list2 = (string2::string_list3)
string1 : string
---------------------------------------
false = if string_eq (string2) (string1) then true else false

1 goal(s) more...

4 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 13.)


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list1) = mem (string1) (string_list2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = mem (string1) (string_list3)
Inductive1 : string_list2 = (string2::string_list3)
string1 : string
Case1 : string_eq (string2) (string1) = true
---------------------------------------
false = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 1(rank:13.)
=================================================
Progress: 458


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list1) = mem (string1) (string_list2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = mem (string1) (string_list3)
Inductive1 : string_list2 = (string2::string_list3)
string1 : string
Case1 : string_eq (string2) (string1) = true
---------------------------------------
false = true

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 1(rank : 13.)


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list1) = mem (string1) (string_list2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = mem (string1) (string_list3)
Inductive1 : string_list2 = (string2::string_list3)
string1 : string
Case1 : string2 = string1
---------------------------------------
false = true

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 459


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = mem (string2) (string_list1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string1) (string_list1) = mem (string2) (string_list1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:12.)
=================================================
Progress: 460


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string1) (string_list1) = mem (string2) (string_list1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string2) (string_list1) = mem (string2) (string_list1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 461


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string2) (string_list1) = mem (string2) (string_list1)

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
mem (string2) (string_list1) = mem (string2) (string_list1)

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 462


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
mem (string2) (string_list1) = mem (string2) (string_list1)

2 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
sub_check (P (string2) (lambda2)) ((string1::string_list1)) = sub_check (P (string2) (lambda2)) (string_list1)

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 1
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 463


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
sub_check (P (string2) (lambda2)) ((string1::string_list1)) = sub_check (P (string2) (lambda2)) (string_list1)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
if if string_eq (string1) (string2) then true else mem (string2) (string_list1) then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::(string1::string_list1))) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
case string_eq (string1) (string2)(rank:11.)
rewrite <- IH1 in goal at 0(rank:18.)
case mem (string2) (string_list1)(rank:11.)
rewrite IH1 in goal at 0(rank:18.)
rewrite <- Cond1 in goal at 0(rank:26.)
=================================================
Progress: 464


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
if if string_eq (string1) (string2) then true else mem (string2) (string_list1) then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::(string1::string_list1))) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

1 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 1(rank:11.)
=================================================
Progress: 465


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
if if string_eq (string1) (string2) then true else mem (string2) (string_list1) then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::(string1::string_list1))) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

1 goal(s) more...

3 conjecture(s) more...
>>> case mem (string2) (string_list1)(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else true then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::(string1::string_list1))) = sub_check (lambda2) (string_list1)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
case string_eq (string1) (string2)(rank:12.)
rewrite IH1 in goal at 0(rank:19.)
rewrite <- IH1 in goal at 0(rank:19.)
rewrite <- Case1 in goal at 1(rank:27.)
rewrite <- Case1 in goal at 2(rank:27.)
rewrite <- Cond1 in goal at 0(rank:27.)
rewrite <- Cond1 in goal at 1(rank:27.)
rewrite <- Cond1 in goal at 2(rank:27.)
rewrite <- Case1 in goal at 0(rank:27.)
=================================================
Progress: 466


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
rewrite <- Case1 in goal at 0(rank:11.)
rewrite <- Case1 in goal at 2(rank:11.)
rewrite <- IH1 in goal at 0(rank:27.)
case mem (string2) (string_list1)(rank:12.)
rewrite Case1 in goal at 0(rank:19.)
rewrite IH1 in goal at 0(rank:27.)
rewrite <- Case1 in goal at 1(rank:11.)
=================================================
Progress: 467


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
rewrite Cond1 in goal at 0(rank:19.)
rewrite IH1 in goal at 2(rank:19.)
rewrite IH1 in goal at 1(rank:27.)
rewrite <- IH1 in goal at 0(rank:27.)
rewrite IH1 in goal at 0(rank:27.)
=================================================
Progress: 468


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:19.)
rewrite IH1 in goal at 0(rank:27.)
rewrite <- IH1 in goal at 0(rank:27.)
=================================================
Progress: 469


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
case mem (string2) (string_list1)(rank:12.)
rewrite IH1 in goal at 2(rank:19.)
rewrite <- IH1 in goal at 0(rank:27.)
rewrite IH1 in goal at 0(rank:27.)
rewrite IH1 in goal at 1(rank:27.)
=================================================
Progress: 470


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else true then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::(string1::string_list1))) = sub_check (lambda2) (string_list1)

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
Case2 : string_eq (string1) (string2) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 1(rank:12.)
=================================================
Progress: 471


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> case mem (string2) (string_list1)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:20.)
rewrite Case1 in goal at 0(rank:28.)
rewrite <- IH1 in goal at 0(rank:20.)
=================================================
Progress: 472


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> case mem (string2) (string_list1)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:20.)
rewrite Case1 in goal at 0(rank:28.)
rewrite <- IH1 in goal at 0(rank:20.)
=================================================
Progress: 473


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
Case2 : string_eq (string1) (string2) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 1(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
Case2 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:20.)
rewrite Case2 in goal at 0(rank:28.)
rewrite <- IH1 in goal at 0(rank:20.)
=================================================
Progress: 474


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
if if string_eq (string1) (string2) then true else mem (string2) (string_list1) then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::(string1::string_list1))) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 18.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
if if string_eq (string1) (string2) then true else mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::(string1::string_list1))) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case string_eq (string1) (string2)(rank:11.)
rewrite <- Cond1 in goal at 0(rank:26.)
case mem (string2) (string_list1)(rank:11.)
=================================================
Progress: 475


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
if if string_eq (string1) (string2) then true else mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::(string1::string_list1))) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

1 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
sub_check (lambda2) (string_list1) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 1(rank:11.)
=================================================
Progress: 476


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
if if string_eq (string1) (string2) then true else mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::(string1::string_list1))) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

1 goal(s) more...

3 conjecture(s) more...
>>> case mem (string2) (string_list1)(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else true then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::(string1::string_list1))) = sub_check (lambda2) (string_list1)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
case string_eq (string1) (string2)(rank:12.)
rewrite <- Case1 in goal at 0(rank:27.)
rewrite <- Case1 in goal at 2(rank:27.)
rewrite <- Cond1 in goal at 1(rank:27.)
rewrite <- Cond1 in goal at 2(rank:27.)
rewrite <- IH1 in goal at 0(rank:27.)
rewrite <- IH1 in goal at 1(rank:27.)
rewrite <- Cond1 in goal at 0(rank:27.)
rewrite <- Case1 in goal at 1(rank:27.)
rewrite <- IH1 in goal at 2(rank:19.)
=================================================
Progress: 477


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
sub_check (lambda2) (string_list1) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
rewrite <- Case1 in goal at 0(rank:11.)
rewrite <- Case1 in goal at 2(rank:11.)
rewrite <- IH1 in goal at 0(rank:27.)
case mem (string2) (string_list1)(rank:12.)
rewrite <- IH1 in goal at 1(rank:19.)
rewrite <- IH1 in goal at 2(rank:27.)
rewrite <- Case1 in goal at 1(rank:11.)
=================================================
Progress: 478


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
rewrite Cond1 in goal at 0(rank:19.)
rewrite <- IH1 in goal at 1(rank:19.)
rewrite <- IH1 in goal at 0(rank:27.)
rewrite <- IH1 in goal at 2(rank:27.)
rewrite IH1 in goal at 0(rank:19.)
=================================================
Progress: 479


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite Cond1 in goal at 0(rank:19.)
rewrite <- IH1 in goal at 0(rank:27.)
rewrite <- IH1 in goal at 1(rank:19.)
rewrite <- IH1 in goal at 2(rank:27.)
=================================================
Progress: 480


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
case mem (string2) (string_list1)(rank:12.)
rewrite IH1 in goal at 0(rank:19.)
rewrite <- IH1 in goal at 0(rank:27.)
rewrite <- IH1 in goal at 1(rank:19.)
rewrite <- IH1 in goal at 2(rank:27.)
=================================================
Progress: 481


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else true then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::(string1::string_list1))) = sub_check (lambda2) (string_list1)

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
Case2 : string_eq (string1) (string2) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 482


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
Case2 : string_eq (string1) (string2) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
Case2 : string_eq (string1) (string2) = false
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 483


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
Case2 : string_eq (string1) (string2) = false
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

2 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = false
---------------------------------------
if if string_eq (string1) (string2) then true else false then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::(string1::string_list1))) = sub_check (lambda2) ((string2::string_list1))

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 9
Tactic List : 4
case string_eq (string1) (string2)(rank:11.)
rewrite <- IH1 in goal at 0(rank:26.)
rewrite <- Case1 in goal at 0(rank:26.)
rewrite <- Cond1 in goal at 0(rank:26.)
=================================================
Progress: 484


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = false
---------------------------------------
if if string_eq (string1) (string2) then true else false then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::(string1::string_list1))) = sub_check (lambda2) ((string2::string_list1))

1 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 1(rank:11.)
=================================================
Progress: 485


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = false
Case2 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:11.)
rewrite <- IH1 in goal at 0(rank:19.)
=================================================
Progress: 486


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = false
Case2 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = false
Case2 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:19.)
rewrite <- IH1 in goal at 0(rank:19.)
=================================================
Progress: 487


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> case mem (string2) (string_list1)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 488


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:11.)
rewrite <- IH1 in goal at 0(rank:19.)
=================================================
Progress: 489


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:19.)
rewrite <- IH1 in goal at 0(rank:19.)
=================================================
Progress: 490


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> case mem (string2) (string_list1)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- IH1 in goal at 0(rank:28.)
rewrite <- IH1 in goal at 1(rank:28.)
rewrite <- IH1 in goal at 2(rank:28.)
=================================================
Progress: 491


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
if if string_eq (string1) (string2) then true else mem (string2) (string_list1) then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::(string1::string_list1))) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
if if string_eq (string1) (string2) then true else mem (string2) (string_list1) then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::(string1::string_list1))) = if mem (string2) (string_list1) then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::string_list1))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case string_eq (string1) (string2)(rank:11.)
rewrite <- Cond1 in goal at 0(rank:26.)
=================================================
Progress: 492


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
if if string_eq (string1) (string2) then true else mem (string2) (string_list1) then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::(string1::string_list1))) = if mem (string2) (string_list1) then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::string_list1))

1 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string2) (string_list1) then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 1(rank:11.)
=================================================
Progress: 493


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string2) (string_list1) then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string2) (string_list1) then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite <- Case1 in goal at 0(rank:11.)
rewrite IH1 in goal at 2(rank:19.)
rewrite Case1 in goal at 0(rank:27.)
rewrite Case1 in goal at 1(rank:27.)
rewrite Case1 in goal at 2(rank:27.)
rewrite IH1 in goal at 0(rank:27.)
rewrite IH1 in goal at 1(rank:27.)
rewrite <- Case1 in goal at 1(rank:11.)
rewrite <- Case1 in goal at 2(rank:11.)
case mem (string2) (string_list1)(rank:12.)
=================================================
Progress: 494


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string2) (string_list1) then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 495


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::(string1::string_list1))) = if mem (string2) (string_list1) then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::string_list1))

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 9
Tactic List : 1
case mem (string2) (string_list1)(rank:11.)
=================================================
Progress: 496


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::(string1::string_list1))) = if mem (string2) (string_list1) then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::string_list1))

1 goal(s) more...

3 conjecture(s) more...
>>> case mem (string2) (string_list1)(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = false
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 497


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = false
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = false
Case2 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) ((string2::(string1::string_list1))) = sub_check (lambda2) ((string2::string_list1))

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite <- Case1 in goal at 0
reflexivity
case mem (string2) (string_list1)
reflexivity
validate generalize_common_subterm_goal
Prop: sub_check (V ("whb")) (("ewn"::("kqi"::(Nil)))) = sub_check (V ("whb")) (("ewn"::(Nil)))
Prop: sub_check (P ("cbp") (P ("rgj") (C (P ("twt") (V ("vzl"))) (V ("fic"))))) (("jgh"::("nzj"::(Nil)))) = sub_check (P ("cbp") (P ("rgj") (C (P ("twt") (V ("vzl"))) (V ("fic"))))) (("jgh"::(Nil)))
Prop: sub_check (C (V ("jgv")) (V ("caa"))) (("htl"::("wmg"::(Nil)))) = sub_check (C (V ("jgv")) (V ("caa"))) (("htl"::(Nil)))
=================================================
Progress: 498


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else true then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::(string1::string_list1))) = sub_check (lambda2) (string_list1)

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else true then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::(string1::string_list1))) = sub_check (lambda2) (string_list1)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
case string_eq (string1) (string2)(rank:12.)
rewrite <- Case1 in goal at 0(rank:27.)
rewrite <- Case1 in goal at 1(rank:27.)
rewrite <- Case1 in goal at 2(rank:27.)
rewrite <- Cond1 in goal at 0(rank:27.)
rewrite <- Cond1 in goal at 1(rank:27.)
rewrite <- Cond1 in goal at 2(rank:27.)
=================================================
Progress: 499


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else true then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::(string1::string_list1))) = sub_check (lambda2) (string_list1)

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
Case2 : string_eq (string1) (string2) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 500


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
Case2 : string_eq (string1) (string2) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
Case2 : string_eq (string1) (string2) = false
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 3
rewrite <- IH1 in goal at 0(rank:27.)
rewrite <- IH1 in goal at 1(rank:27.)
rewrite <- IH1 in goal at 2(rank:27.)
=================================================
Progress: 501


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else true then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::(string1::string_list1))) = sub_check (lambda2) (string_list1)

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else true then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::(string1::string_list1))) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
case string_eq (string1) (string2)(rank:12.)
rewrite <- Case1 in goal at 0(rank:27.)
rewrite <- Case1 in goal at 1(rank:27.)
rewrite <- Case1 in goal at 2(rank:27.)
rewrite <- Cond1 in goal at 0(rank:27.)
rewrite <- Cond1 in goal at 1(rank:27.)
rewrite <- Cond1 in goal at 2(rank:27.)
=================================================
Progress: 502


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else true then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::(string1::string_list1))) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
Case2 : string_eq (string1) (string2) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 1(rank:12.)
=================================================
Progress: 503


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
Case2 : string_eq (string1) (string2) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 1(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
Case2 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Case2 in goal at 0(rank:28.)
rewrite Case2 in goal at 2(rank:28.)
rewrite IH1 in goal at 0(rank:28.)
rewrite IH1 in goal at 1(rank:28.)
rewrite IH1 in goal at 2(rank:28.)
rewrite Case2 in goal at 1(rank:28.)
=================================================
Progress: 504


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case mem (string2) (string_list1)(rank:12.)
rewrite <- IH1 in goal at 0(rank:27.)
=================================================
Progress: 505


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> case mem (string2) (string_list1)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) (string_list1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:12.)
rewrite <- IH1 in goal at 0(rank:20.)
=================================================
Progress: 506


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) (string_list1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:20.)
rewrite <- IH1 in goal at 0(rank:20.)
=================================================
Progress: 507


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if true then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 508


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if true then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:19.)
rewrite Case1 in goal at 0(rank:27.)
rewrite <- IH1 in goal at 0(rank:19.)
=================================================
Progress: 509


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (string_list1)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite <- Case1 in goal at 0
rewrite IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: sub_check (P ("uzt") (V ("cxl"))) (("gjx"::(Nil))) = if mem ("gjx") ((Nil)) then sub_check (P ("uzt") (V ("cxl"))) ((Nil)) else sub_check (P ("uzt") (V ("cxl"))) ((Nil))
Prop: sub_check (V ("cck")) (("nfo"::("wfu"::("utt"::(Nil))))) = if mem ("nfo") (("wfu"::("utt"::(Nil)))) then sub_check (V ("cck")) (("wfu"::("utt"::(Nil)))) else sub_check (V ("cck")) (("wfu"::("utt"::(Nil))))
Prop: sub_check (C (C (C (C (V ("lqg")) (V ("olu"))) (V ("tey"))) (C (V ("fgo")) (V ("ikc")))) (V ("tco"))) (("yia"::(Nil))) = if mem ("yia") ((Nil)) then sub_check (C (C (C (C (V ("lqg")) (V ("olu"))) (V ("tey"))) (C (V ("fgo")) (V ("ikc")))) (V ("tco"))) ((Nil)) else sub_check (C (C (C (C (V ("lqg")) (V ("olu"))) (V ("tey"))) (C (V ("fgo")) (V ("ikc")))) (V ("tco"))) ((Nil))
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite <- Case1 in goal at 0
Prop: sub_check (C (V ("kvf")) (V ("oit"))) ((Nil)) = if mem ("yvr") ((Nil)) then sub_check (C (V ("kvf")) (V ("oit"))) ((Nil)) else sub_check (C (V ("kvf")) (V ("oit"))) ((Nil))
Prop: sub_check (V ("hyw")) ((Nil)) = if mem ("xel") ((Nil)) then sub_check (V ("hyw")) ((Nil)) else sub_check (V ("hyw")) ((Nil))
Prop: sub_check (V ("wkm")) (("wmu"::(Nil))) = if mem ("out") (("syb"::("snc"::("wjq"::(Nil))))) then sub_check (V ("wkm")) (("syb"::("snc"::("wjq"::(Nil))))) else sub_check (V ("wkm")) (("wmu"::(Nil)))
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
validate generalize_common_subterm_goal
Prop: sub_check (P ("vbf") (C (V ("wsc")) (V ("plv")))) (("ifm"::("dnm"::(Nil)))) = if mem ("evu") (("dnm"::(Nil))) then sub_check (P ("vbf") (C (V ("wsc")) (V ("plv")))) (("dnm"::(Nil))) else sub_check (P ("vbf") (C (V ("wsc")) (V ("plv")))) (("evu"::("dnm"::(Nil))))
Prop: sub_check (V ("fkd")) (("tyh"::(Nil))) = if mem ("rqi") ((Nil)) then sub_check (V ("fkd")) ((Nil)) else sub_check (V ("fkd")) (("rqi"::(Nil)))
Prop: sub_check (V ("jrs")) (("its"::("amq"::(Nil)))) = if mem ("hkz") (("amq"::(Nil))) then sub_check (V ("jrs")) (("amq"::(Nil))) else sub_check (V ("jrs")) (("hkz"::("amq"::(Nil))))
previous tactics
simpl in goal
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
Prop: sub_check (C (P ("zed") (V ("uyd"))) (V ("wai"))) (("fqx"::(Nil))) = if mem ("ady") ((Nil)) then sub_check (C (P ("zed") (V ("uyd"))) (V ("wai"))) ((Nil)) else sub_check (C (P ("zed") (V ("uyd"))) (V ("wai"))) (("ady"::(Nil)))
Prop: sub_check (V ("pzg")) (("bhj"::("hpu"::(Nil)))) = if mem ("vue") (("hpu"::(Nil))) then sub_check (V ("pzg")) (("hpu"::(Nil))) else sub_check (V ("pzg")) (("vue"::("hpu"::(Nil))))
Prop: sub_check (V ("sxn")) (("xnm"::(Nil))) = if mem ("uux") ((Nil)) then sub_check (V ("sxn")) ((Nil)) else sub_check (V ("sxn")) (("uux"::(Nil)))
=================================================
Progress: 510


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if true then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:27.)
rewrite <- IH1 in goal at 0(rank:27.)
=================================================
Progress: 511


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (string_list1)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case mem (string2) (string_list1)(rank:12.)
=================================================
Progress: 512


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (string_list1)

2 goal(s) more...

3 conjecture(s) more...
>>> case mem (string2) (string_list1)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:20.)
rewrite Case1 in goal at 0(rank:28.)
rewrite <- IH1 in goal at 0(rank:20.)
=================================================
Progress: 513


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case mem (string2) (string_list1)(rank:12.)
rewrite Case1 in goal at 0(rank:19.)
=================================================
Progress: 514


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> case mem (string2) (string_list1)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:20.)
rewrite Case1 in goal at 0(rank:28.)
rewrite <- IH1 in goal at 0(rank:20.)
=================================================
Progress: 515


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = if true then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 516


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = if true then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- IH1 in goal at 0(rank:27.)
rewrite <- IH1 in goal at 1(rank:27.)
rewrite <- IH1 in goal at 2(rank:27.)
=================================================
Progress: 517


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (string_list1)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite <- Case1 in goal at 0
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: sub_check (C (C (C (C (V ("mqg")) (P ("uho") (V ("fuu")))) (V ("ozz"))) (V ("nve"))) (V ("chy"))) (("ltl"::(Nil))) = if mem ("yxz") (("ltl"::(Nil))) then sub_check (C (C (C (C (V ("mqg")) (P ("uho") (V ("fuu")))) (V ("ozz"))) (V ("nve"))) (V ("chy"))) (("ltl"::(Nil))) else sub_check (C (C (C (C (V ("mqg")) (P ("uho") (V ("fuu")))) (V ("ozz"))) (V ("nve"))) (V ("chy"))) (("ltl"::(Nil)))
Prop: sub_check (C (V ("fxr")) (V ("dnh"))) ((Nil)) = if mem ("sgi") ((Nil)) then sub_check (C (V ("fxr")) (V ("dnh"))) ((Nil)) else sub_check (C (V ("fxr")) (V ("dnh"))) ((Nil))
Prop: sub_check (V ("bal")) ((Nil)) = if mem ("mpj") ((Nil)) then sub_check (V ("bal")) ((Nil)) else sub_check (V ("bal")) ((Nil))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: sub_check (V ("ukv")) ((Nil)) = if mem ("szm") ((Nil)) then sub_check (V ("ukv")) ((Nil)) else sub_check (V ("ukv")) (("szm"::(Nil)))
Prop: sub_check (V ("mfq")) ((Nil)) = if mem ("fdx") ((Nil)) then sub_check (V ("mfq")) ((Nil)) else sub_check (V ("mfq")) (("fdx"::(Nil)))
Prop: sub_check (V ("vvw")) ((Nil)) = if mem ("zgy") ((Nil)) then sub_check (V ("vvw")) ((Nil)) else sub_check (V ("vvw")) (("zgy"::(Nil)))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
validate generalize_common_subterm_goal
Prop: sub_check (C (V ("pga")) (V ("ztz"))) (("blg"::(Nil))) = if mem ("dye") (("blg"::(Nil))) then sub_check (C (V ("pga")) (V ("ztz"))) (("blg"::(Nil))) else sub_check (C (V ("pga")) (V ("ztz"))) (("dye"::("blg"::(Nil))))
Prop: sub_check (V ("wjp")) ((Nil)) = if mem ("yep") ((Nil)) then sub_check (V ("wjp")) ((Nil)) else sub_check (V ("wjp")) (("yep"::(Nil)))
Prop: sub_check (C (V ("eib")) (V ("xcp"))) ((Nil)) = if mem ("rkl") ((Nil)) then sub_check (C (V ("eib")) (V ("xcp"))) ((Nil)) else sub_check (C (V ("eib")) (V ("xcp"))) (("rkl"::(Nil)))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
Prop: sub_check (P ("eai") (V ("aby"))) ((Nil)) = if mem ("qys") ((Nil)) then sub_check (P ("eai") (V ("aby"))) ((Nil)) else sub_check (P ("eai") (V ("aby"))) (("qys"::(Nil)))
Prop: sub_check (P ("tgx") (V ("inv"))) ((Nil)) = if mem ("rbu") ((Nil)) then sub_check (P ("tgx") (V ("inv"))) ((Nil)) else sub_check (P ("tgx") (V ("inv"))) (("rbu"::(Nil)))
Prop: sub_check (V ("ueh")) ((Nil)) = if mem ("lkr") ((Nil)) then sub_check (V ("ueh")) ((Nil)) else sub_check (V ("ueh")) (("lkr"::(Nil)))
=================================================
Progress: 518


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite <- Case1 in goal at 0
rewrite <- IH1 in goal at 1
Prop: sub_check (V ("xrr")) ((Nil)) = if mem ("uhc") (("xhr"::("ylu"::("xzw"::(Nil))))) then sub_check (V ("xrr")) (("xhr"::("ylu"::("xzw"::(Nil))))) else sub_check (V ("xrr")) ((Nil))
Prop: sub_check (V ("squ")) ((Nil)) = if mem ("ogv") ((Nil)) then sub_check (V ("squ")) ((Nil)) else sub_check (V ("squ")) ((Nil))
Prop: sub_check (C (P ("jbm") (V ("xbv"))) (V ("zqb"))) ((Nil)) = if mem ("gaa") ((Nil)) then sub_check (C (P ("jbm") (V ("xbv"))) (V ("zqb"))) ((Nil)) else sub_check (C (P ("jbm") (V ("xbv"))) (V ("zqb"))) ((Nil))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: sub_check (V ("rna")) (("uyw"::(Nil))) = if mem ("aeq") (("uyw"::(Nil))) then sub_check (V ("rna")) (("uyw"::(Nil))) else sub_check (V ("rna")) (("aeq"::("uyw"::(Nil))))
Prop: sub_check (C (V ("gyq")) (V ("kby"))) (("tlv"::("dnk"::("wfk"::(Nil))))) = if mem ("zqg") (("tlv"::("dnk"::("wfk"::(Nil))))) then sub_check (C (V ("gyq")) (V ("kby"))) (("tlv"::("dnk"::("wfk"::(Nil))))) else sub_check (C (V ("gyq")) (V ("kby"))) (("zqg"::("tlv"::("dnk"::("wfk"::(Nil))))))
Prop: sub_check (V ("tjx")) (("abq"::(Nil))) = if mem ("yje") (("abq"::(Nil))) then sub_check (V ("tjx")) (("abq"::(Nil))) else sub_check (V ("tjx")) (("yje"::("abq"::(Nil))))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
validate generalize_common_subterm_goal
Prop: sub_check (C (V ("mhy")) (P ("fhj") (V ("lhp")))) ((Nil)) = if mem ("rtf") ((Nil)) then sub_check (C (V ("mhy")) (P ("fhj") (V ("lhp")))) ((Nil)) else sub_check (C (V ("mhy")) (P ("fhj") (V ("lhp")))) (("rtf"::(Nil)))
Prop: sub_check (V ("auq")) ((Nil)) = if mem ("gek") ((Nil)) then sub_check (V ("auq")) ((Nil)) else sub_check (V ("auq")) (("gek"::(Nil)))
Prop: sub_check (V ("ipu")) (("zvv"::("hfs"::(Nil)))) = if mem ("gnl") (("zvv"::("hfs"::(Nil)))) then sub_check (V ("ipu")) (("zvv"::("hfs"::(Nil)))) else sub_check (V ("ipu")) (("gnl"::("zvv"::("hfs"::(Nil)))))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
Prop: sub_check (C (V ("yrm")) (V ("umc"))) ((Nil)) = if mem ("luc") ((Nil)) then sub_check (C (V ("yrm")) (V ("umc"))) ((Nil)) else sub_check (C (V ("yrm")) (V ("umc"))) (("luc"::(Nil)))
Prop: sub_check (V ("ibf")) (("fwd"::(Nil))) = if mem ("zoc") (("fwd"::(Nil))) then sub_check (V ("ibf")) (("fwd"::(Nil))) else sub_check (V ("ibf")) (("zoc"::("fwd"::(Nil))))
Prop: sub_check (C (C (C (V ("fan")) (V ("hly"))) (P ("xrn") (V ("lsc")))) (V ("ohd"))) ((Nil)) = if mem ("zud") ((Nil)) then sub_check (C (C (C (V ("fan")) (V ("hly"))) (P ("xrn") (V ("lsc")))) (V ("ohd"))) ((Nil)) else sub_check (C (C (C (V ("fan")) (V ("hly"))) (P ("xrn") (V ("lsc")))) (V ("ohd"))) (("zud"::(Nil)))
=================================================
Progress: 519


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = if true then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- IH1 in goal at 1(rank:19.)
rewrite <- IH1 in goal at 0(rank:27.)
rewrite <- IH1 in goal at 2(rank:27.)
=================================================
Progress: 520


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite <- Case1 in goal at 1
rewrite <- IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: sub_check (C (V ("qnl")) (V ("hed"))) (("zcg"::(Nil))) = if mem ("zcg") ((Nil)) then sub_check (C (V ("qnl")) (V ("hed"))) ((Nil)) else sub_check (C (V ("qnl")) (V ("hed"))) (("vvh"::(Nil)))
Prop: sub_check (C (V ("npu")) (C (V ("ybg")) (V ("fue")))) (("caz"::("xke"::(Nil)))) = if mem ("caz") (("xke"::(Nil))) then sub_check (C (V ("npu")) (C (V ("ybg")) (V ("fue")))) (("xke"::(Nil))) else sub_check (C (V ("npu")) (C (V ("ybg")) (V ("fue")))) (("ius"::("xke"::(Nil))))
Prop: sub_check (V ("zfg")) (("gcr"::(Nil))) = if mem ("gcr") ((Nil)) then sub_check (V ("zfg")) ((Nil)) else sub_check (V ("zfg")) (("rpv"::(Nil)))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite <- Case1 in goal at 1
validate generalize_common_subterm_goal
Prop: sub_check (V ("lsx")) ((Nil)) = if mem ("okx") ((Nil)) then sub_check (V ("lsx")) ((Nil)) else sub_check (V ("lsx")) (("vsu"::(Nil)))
Prop: sub_check (V ("lua")) ((Nil)) = if mem ("nmf") ((Nil)) then sub_check (V ("lua")) ((Nil)) else sub_check (V ("lua")) (("ocs"::(Nil)))
Prop: sub_check (V ("jhn")) ((Nil)) = if mem ("ajp") ((Nil)) then sub_check (V ("jhn")) ((Nil)) else sub_check (V ("jhn")) (("xcm"::(Nil)))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
validate generalize_common_subterm_goal
Prop: sub_check (V ("mzb")) ((Nil)) = if mem ("sol") ((Nil)) then sub_check (V ("mzb")) ((Nil)) else sub_check (V ("mzb")) (("sol"::(Nil)))
Prop: sub_check (C (C (P ("bmx") (C (V ("slw")) (V ("ymf")))) (C (C (P ("niv") (C (V ("gnd")) (P ("bpa") (V ("dyh"))))) (V ("ebd"))) (P ("wgv") (V ("eaa"))))) (C (V ("bwg")) (V ("xmv")))) ((Nil)) = if mem ("lis") ((Nil)) then sub_check (C (C (P ("bmx") (C (V ("slw")) (V ("ymf")))) (C (C (P ("niv") (C (V ("gnd")) (P ("bpa") (V ("dyh"))))) (V ("ebd"))) (P ("wgv") (V ("eaa"))))) (C (V ("bwg")) (V ("xmv")))) ((Nil)) else sub_check (C (C (P ("bmx") (C (V ("slw")) (V ("ymf")))) (C (C (P ("niv") (C (V ("gnd")) (P ("bpa") (V ("dyh"))))) (V ("ebd"))) (P ("wgv") (V ("eaa"))))) (C (V ("bwg")) (V ("xmv")))) (("lis"::(Nil)))
Prop: sub_check (V ("flk")) ((Nil)) = if mem ("mpv") ((Nil)) then sub_check (V ("flk")) ((Nil)) else sub_check (V ("flk")) (("mpv"::(Nil)))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
Prop: sub_check (C (V ("fzt")) (V ("nxo"))) ((Nil)) = if mem ("qed") ((Nil)) then sub_check (C (V ("fzt")) (V ("nxo"))) ((Nil)) else sub_check (C (V ("fzt")) (V ("nxo"))) (("qed"::(Nil)))
Prop: sub_check (V ("eao")) ((Nil)) = if mem ("rpn") ((Nil)) then sub_check (V ("eao")) ((Nil)) else sub_check (V ("eao")) (("rpn"::(Nil)))
Prop: sub_check (V ("qfj")) ((Nil)) = if mem ("esw") ((Nil)) then sub_check (V ("qfj")) ((Nil)) else sub_check (V ("qfj")) (("esw"::(Nil)))
Lemma List
forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> sub_check (lambda1) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string2::string_list1))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
Lemma List
forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> sub_check (lambda1) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string2::string_list1))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 521


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> sub_check (lambda1) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string2::string_list1))(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> sub_check (lambda1) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string2::string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> sub_check (lambda1) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:15.)
=================================================
Progress: 522


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> sub_check (lambda1) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string2::string_list1))(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> sub_check (lambda1) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string2::string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> sub_check (lambda1) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:15.)
=================================================
Progress: 523


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> sub_check (lambda1) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string2::string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> sub_check (lambda1) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> sub_check (lambda1) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string2::string_list1))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> sub_check (lambda1) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:15.)
=================================================
Progress: 524


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> sub_check (lambda1) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string2::string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> sub_check (lambda1) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> sub_check (lambda1) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string2::string_list1))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> sub_check (lambda1) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:15.)
=================================================
Progress: 525


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> sub_check (lambda1) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string2::string_list1))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> sub_check (lambda1) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> sub_check (lambda1) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string2::string_list1))
string1 : string
string2 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> sub_check (lambda1) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:15.)
=================================================
Progress: 526


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> sub_check (lambda1) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string2::string_list1))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> sub_check (lambda1) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> sub_check (lambda1) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string2::string_list1))
string1 : string
string2 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> sub_check (lambda1) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:15.)
=================================================
Progress: 527


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> sub_check (lambda1) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string2::string_list1))
string1 : string
string2 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> sub_check (lambda1) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

4 conjecture(s) more...
>>> intro string_list1(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> sub_check (lambda1) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string2::string_list1))
string1 : string
string2 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda), mem (string1) (string_list1) = true -> string1 = string2 -> sub_check (lambda1) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:15.)
=================================================
Progress: 528


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> sub_check (lambda1) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string2::string_list1))
string1 : string
string2 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> sub_check (lambda1) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

4 conjecture(s) more...
>>> intro string_list1(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> sub_check (lambda1) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string2::string_list1))
string1 : string
string2 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda), mem (string1) (string_list1) = true -> string1 = string2 -> sub_check (lambda1) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:15.)
=================================================
Progress: 529


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> sub_check (lambda1) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string2::string_list1))
string1 : string
string2 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda), mem (string1) (string_list1) = true -> string1 = string2 -> sub_check (lambda1) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> sub_check (lambda1) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string2::string_list1))
string1 : string
string2 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
---------------------------------------
forall (lambda1:lambda), string1 = string2 -> sub_check (lambda1) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:15.)
=================================================
Progress: 530


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> sub_check (lambda1) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string2::string_list1))
string1 : string
string2 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda), mem (string1) (string_list1) = true -> string1 = string2 -> sub_check (lambda1) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> sub_check (lambda1) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string2::string_list1))
string1 : string
string2 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
---------------------------------------
forall (lambda1:lambda), string1 = string2 -> sub_check (lambda1) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:15.)
=================================================
Progress: 531


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> sub_check (lambda1) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string2::string_list1))
string1 : string
string2 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
---------------------------------------
forall (lambda1:lambda), string1 = string2 -> sub_check (lambda1) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> sub_check (lambda1) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string2::string_list1))
string1 : string
string2 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
Cond2 : string1 = string2
---------------------------------------
forall (lambda1:lambda), sub_check (lambda1) (string_list1) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:23.)
rewrite Cond2 in goal at 0(rank:31.)
rewrite <- Cond2 in goal at 0(rank:31.)
=================================================
Progress: 532


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> sub_check (lambda1) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string2::string_list1))
string1 : string
string2 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
---------------------------------------
forall (lambda1:lambda), string1 = string2 -> sub_check (lambda1) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> sub_check (lambda1) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string2::string_list1))
string1 : string
string2 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
Cond2 : string1 = string2
---------------------------------------
forall (lambda1:lambda), sub_check (lambda1) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 5
rewrite Cond1 in goal at 0(rank:23.)
rewrite Cond2 in goal at 1(rank:23.)
rewrite Cond2 in goal at 2(rank:31.)
rewrite <- Cond2 in goal at 0(rank:23.)
rewrite Cond2 in goal at 0(rank:23.)
=================================================
Progress: 533


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (string_list1)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case mem (string2) (string_list1)(rank:12.)
=================================================
Progress: 534


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (string_list1)

2 goal(s) more...

3 conjecture(s) more...
>>> case mem (string2) (string_list1)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite <- IH1 in goal at 0(rank:28.)
rewrite <- IH1 in goal at 1(rank:28.)
rewrite <- IH1 in goal at 2(rank:28.)
=================================================
Progress: 535


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case mem (string2) (string_list1)(rank:12.)
=================================================
Progress: 536


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> case mem (string2) (string_list1)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:20.)
rewrite Case1 in goal at 0(rank:28.)
rewrite <- IH1 in goal at 0(rank:20.)
=================================================
Progress: 537


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = false
Case2 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = false
Case2 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:11.)
=================================================
Progress: 538


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = false
Case2 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = false
Case2 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 539


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = false
Case2 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
sub_check (lambda2) ((string2::(string1::string_list1))) = sub_check (lambda2) ((string2::string_list1))

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case mem (string2) (string_list1)
case string_eq (string1) (string2)
reflexivity
reflexivity
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 1
rewrite <- IH1 in goal at 0
rewrite Case2 in goal at 0
reflexivity
validate generalize_common_subterm_goal
Prop: sub_check (C (V ("yha")) (C (V ("lqu")) (V ("iid")))) (("ldr"::("jnh"::(Nil)))) = sub_check (C (V ("yha")) (C (V ("lqu")) (V ("iid")))) (("ldr"::(Nil)))
Prop: sub_check (V ("joh")) (("zog"::("mkv"::(Nil)))) = sub_check (V ("joh")) (("zog"::(Nil)))
Prop: sub_check (V ("iyi")) (("dps"::("tfa"::(Nil)))) = sub_check (V ("iyi")) (("dps"::(Nil)))
=================================================
Progress: 540


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:11.)
=================================================
Progress: 541


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
case mem (string2) (string_list1)
reflexivity
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: sub_check (V ("dvt")) (("chw"::(Nil))) = sub_check (V ("dvt")) (("uco"::(Nil)))
Prop: sub_check (V ("rwa")) (("bdg"::("utt"::(Nil)))) = sub_check (V ("rwa")) (("qnq"::("utt"::(Nil))))
Prop: sub_check (V ("pui")) (("vyt"::(Nil))) = sub_check (V ("pui")) (("krq"::(Nil)))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
case mem (string2) (string_list1)
reflexivity
validate generalize_common_subterm_goal
Prop: sub_check (V ("nhz")) ((Nil)) = sub_check (V ("nhz")) (("anv"::(Nil)))
Prop: sub_check (P ("uyw") (V ("xvs"))) ((Nil)) = sub_check (P ("uyw") (V ("xvs"))) (("epo"::(Nil)))
Prop: sub_check (V ("vzm")) (("fjr"::(Nil))) = sub_check (V ("vzm")) (("ioi"::("fjr"::(Nil))))
Lemma List
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = false -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 542


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = false -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = false -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = false -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11.)
=================================================
Progress: 543


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = false -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = false -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = false -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list1) = false -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:11.)
=================================================
Progress: 544


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = false -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list1) = false -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

4 conjecture(s) more...
>>> intro string_list1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = false -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda), mem (string1) (string_list1) = false -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11.)
=================================================
Progress: 545


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = false -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda), mem (string1) (string_list1) = false -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = false -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = false
---------------------------------------
forall (lambda1:lambda), sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:13.)
=================================================
Progress: 546


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = false -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = false
---------------------------------------
forall (lambda1:lambda), sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

4 conjecture(s) more...
>>> induction lambda1(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = false -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = false
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
sub_check (V (string2)) (string_list1) = sub_check (V (string2)) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 547


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = false -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = false
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
sub_check (V (string2)) (string_list1) = sub_check (V (string2)) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = false -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = false
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
mem (string2) (string_list1) = if string_eq (string1) (string2) then true else mem (string2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:14.)
=================================================
Progress: 548


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = false -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = false
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
mem (string2) (string_list1) = if string_eq (string1) (string2) then true else mem (string2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 14.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = false -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = false
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
mem (string2) (string_list1) = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 1(rank:14.)
=================================================
Progress: 549


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = false -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = false
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
mem (string2) (string_list1) = true

3 goal(s) more...

4 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 1(rank : 14.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = false -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = false
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string2) (string_list1) = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:14.)
=================================================
Progress: 550


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = false -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = false
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string2) (string_list1) = true

3 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 14.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = false -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = false
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string1) (string_list1) = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:14.)
=================================================
Progress: 551


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = false -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = false
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string1) (string_list1) = true

3 goal(s) more...

4 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 14.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = false -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = false
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
false = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 552


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
case mem (string2) (string_list1)
reflexivity
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: sub_check (V ("xxv")) ((Nil)) = sub_check (V ("xxv")) (("ivy"::(Nil)))
Prop: sub_check (V ("rzn")) ((Nil)) = sub_check (V ("rzn")) (("iyv"::(Nil)))
Prop: sub_check (V ("rbf")) ((Nil)) = sub_check (V ("rbf")) (("ctk"::(Nil)))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
case mem (string2) (string_list1)
reflexivity
validate generalize_common_subterm_goal
Prop: sub_check (V ("hyc")) ((Nil)) = sub_check (V ("hyc")) (("nus"::(Nil)))
Prop: sub_check (V ("hro")) ((Nil)) = sub_check (V ("hro")) (("awn"::(Nil)))
Prop: sub_check (V ("ehx")) ((Nil)) = sub_check (V ("ehx")) (("fsk"::(Nil)))
Lemma List
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 553


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11.)
=================================================
Progress: 554


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:11.)
=================================================
Progress: 555


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

4 conjecture(s) more...
>>> intro string_list1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11.)
=================================================
Progress: 556


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
---------------------------------------
forall (lambda1:lambda), sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:13.)
=================================================
Progress: 557


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
---------------------------------------
forall (lambda1:lambda), sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

4 conjecture(s) more...
>>> induction lambda1(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
sub_check (V (string2)) (string_list1) = sub_check (V (string2)) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 558


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
sub_check (V (string2)) (string_list1) = sub_check (V (string2)) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
mem (string2) (string_list1) = if string_eq (string1) (string2) then true else mem (string2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
case string_eq (string1) (string2)(rank:14.)
rewrite <- Cond1 in goal at 0(rank:29.)
=================================================
Progress: 559


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
mem (string2) (string_list1) = if string_eq (string1) (string2) then true else mem (string2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 14.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
mem (string2) (string_list1) = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 1(rank:14.)
=================================================
Progress: 560


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
mem (string2) (string_list1) = true

3 goal(s) more...

4 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 1(rank : 14.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string2) (string_list1) = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:14.)
rewrite <- Cond1 in goal at 0(rank:22.)
=================================================
Progress: 561


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string2) (string_list1) = true

3 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 14.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string1) (string_list1) = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
rewrite Cond1 in goal at 0(rank:22.)
rewrite <- Cond1 in goal at 0(rank:22.)
=================================================
Progress: 562


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
case mem (string2) (string_list1)
reflexivity
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: sub_check (C (V ("fze")) (V ("kai"))) ((Nil)) = sub_check (C (V ("fze")) (V ("kai"))) (("itc"::(Nil)))
Prop: sub_check (V ("quo")) ((Nil)) = sub_check (V ("quo")) (("qkq"::(Nil)))
Prop: sub_check (V ("lrx")) ((Nil)) = sub_check (V ("lrx")) (("pbb"::(Nil)))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
case mem (string2) (string_list1)
reflexivity
validate generalize_common_subterm_goal
Prop: sub_check (V ("ohc")) ((Nil)) = sub_check (V ("ohc")) (("nna"::(Nil)))
Prop: sub_check (P ("joc") (V ("zpt"))) ((Nil)) = sub_check (P ("joc") (V ("zpt"))) (("spy"::(Nil)))
Prop: sub_check (P ("iim") (V ("mpd"))) ((Nil)) = sub_check (P ("iim") (V ("mpd"))) (("oiw"::(Nil)))
=================================================
Progress: 563


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite <- Case1 in goal at 0
rewrite Cond1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: sub_check (V ("ziu")) (("jpg"::("mcb"::(Nil)))) = sub_check (V ("ziu")) (("mcb"::(Nil)))
Prop: sub_check (V ("lhe")) (("ysx"::(Nil))) = sub_check (V ("lhe")) ((Nil))
Prop: sub_check (V ("dwd")) (("zbb"::(Nil))) = sub_check (V ("dwd")) ((Nil))
=================================================
Progress: 564


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:27.)
rewrite Case1 in goal at 1(rank:27.)
rewrite Case1 in goal at 2(rank:27.)
=================================================
Progress: 565


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case mem (string2) (string_list1)(rank:12.)
rewrite <- IH1 in goal at 0(rank:27.)
=================================================
Progress: 566


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> case mem (string2) (string_list1)(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) (string_list1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:12.)
rewrite <- IH1 in goal at 0(rank:20.)
=================================================
Progress: 567


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) (string_list1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:20.)
rewrite <- IH1 in goal at 0(rank:20.)
=================================================
Progress: 568


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = if true then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if true then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite <- Case1 in goal at 1
rewrite Cond1 in goal at 0
rewrite <- IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: sub_check (V ("kig")) (("xig"::(Nil))) = if true then sub_check (V ("kig")) ((Nil)) else sub_check (V ("kig")) (("awl"::(Nil)))
Prop: sub_check (V ("tcr")) (("hoe"::(Nil))) = if true then sub_check (V ("tcr")) ((Nil)) else sub_check (V ("tcr")) (("gaf"::(Nil)))
Prop: sub_check (P ("wgl") (C (V ("oix")) (C (V ("hzg")) (V ("twg"))))) (("hxx"::(Nil))) = if true then sub_check (P ("wgl") (C (V ("oix")) (C (V ("hzg")) (V ("twg"))))) ((Nil)) else sub_check (P ("wgl") (C (V ("oix")) (C (V ("hzg")) (V ("twg"))))) (("urr"::(Nil)))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite <- Case1 in goal at 1
rewrite Cond1 in goal at 0
validate generalize_common_subterm_goal
Prop: sub_check (C (P ("cwg") (P ("dqp") (C (V ("sgx")) (V ("bes"))))) (V ("nwo"))) ((Nil)) = if true then sub_check (C (P ("cwg") (P ("dqp") (C (V ("sgx")) (V ("bes"))))) (V ("nwo"))) ((Nil)) else sub_check (C (P ("cwg") (P ("dqp") (C (V ("sgx")) (V ("bes"))))) (V ("nwo"))) (("gtg"::(Nil)))
Prop: sub_check (V ("crv")) (("lzj"::(Nil))) = if true then sub_check (V ("crv")) (("lzj"::(Nil))) else sub_check (V ("crv")) (("zag"::("lzj"::(Nil))))
Prop: sub_check (V ("arr")) ((Nil)) = if true then sub_check (V ("arr")) ((Nil)) else sub_check (V ("arr")) (("cfw"::(Nil)))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite <- Case1 in goal at 1
validate generalize_common_subterm_goal
Prop: sub_check (V ("mrv")) ((Nil)) = if mem ("msl") ((Nil)) then sub_check (V ("mrv")) ((Nil)) else sub_check (V ("mrv")) (("qhl"::(Nil)))
Prop: sub_check (V ("wpd")) ((Nil)) = if mem ("txu") ((Nil)) then sub_check (V ("wpd")) ((Nil)) else sub_check (V ("wpd")) (("gxm"::(Nil)))
Prop: sub_check (V ("ehj")) ((Nil)) = if mem ("cjg") ((Nil)) then sub_check (V ("ehj")) ((Nil)) else sub_check (V ("ehj")) (("pwe"::(Nil)))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
validate generalize_common_subterm_goal
Prop: sub_check (V ("tll")) ((Nil)) = if mem ("edk") ((Nil)) then sub_check (V ("tll")) ((Nil)) else sub_check (V ("tll")) (("edk"::(Nil)))
Prop: sub_check (V ("tdk")) ((Nil)) = if mem ("hvw") ((Nil)) then sub_check (V ("tdk")) ((Nil)) else sub_check (V ("tdk")) (("hvw"::(Nil)))
Prop: sub_check (V ("vem")) (("efs"::(Nil))) = if mem ("gnz") (("efs"::(Nil))) then sub_check (V ("vem")) (("efs"::(Nil))) else sub_check (V ("vem")) (("gnz"::("efs"::(Nil))))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
Prop: sub_check (P ("slu") (V ("hpb"))) ((Nil)) = if mem ("rth") ((Nil)) then sub_check (P ("slu") (V ("hpb"))) ((Nil)) else sub_check (P ("slu") (V ("hpb"))) (("rth"::(Nil)))
Prop: sub_check (V ("blm")) (("zxs"::(Nil))) = if mem ("xnu") (("zxs"::(Nil))) then sub_check (V ("blm")) (("zxs"::(Nil))) else sub_check (V ("blm")) (("xnu"::("zxs"::(Nil))))
Prop: sub_check (V ("kre")) ((Nil)) = if mem ("acv") ((Nil)) then sub_check (V ("kre")) ((Nil)) else sub_check (V ("kre")) (("acv"::(Nil)))
Lemma List
forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check (lambda1) (string_list1) = if true then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string1::string_list1))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = if true then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
Lemma List
forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> sub_check (lambda1) ((string1::string_list1)) = if true then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string2::string_list1))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if true then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 569


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = if true then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check (lambda1) (string_list1) = if true then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string1::string_list1))(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check (lambda1) (string_list1) = if true then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string1::string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check (lambda1) (string_list1) = if true then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 570


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if true then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> sub_check (lambda1) ((string1::string_list1)) = if true then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string2::string_list1))(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> sub_check (lambda1) ((string1::string_list1)) = if true then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string2::string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> sub_check (lambda1) ((string1::string_list1)) = if true then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:15.)
=================================================
Progress: 571


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check (lambda1) (string_list1) = if true then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string1::string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check (lambda1) (string_list1) = if true then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = if true then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
original goal
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
lemma
forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check (lambda1) (string_list1) = if true then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string1::string_list1))
tactics
assert forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check (lambda1) (string_list1) = if true then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string1::string_list1))
reflexivity
Deduplication: 2
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 572


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = if true then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::(string1::string_list1))) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 40
Tactic List : 1
case mem (string2) (string_list1)(rank:11.)
=================================================
Progress: 573


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::(string1::string_list1))) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1))

1 goal(s) more...

3 conjecture(s) more...
>>> case mem (string2) (string_list1)(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = false
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 574


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = false
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

2 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = false
Case2 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) ((string2::(string1::string_list1))) = sub_check (lambda2) ((string2::string_list1))

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite <- Case1 in goal at 1
rewrite Cond1 in goal at 0
assert forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check (lambda1) (string_list1) = if true then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string1::string_list1))
reflexivity
reflexivity
case mem (string2) (string_list1)
reflexivity
validate generalize_common_subterm_goal
Prop: sub_check (V ("gim")) (("dda"::("jkb"::(Nil)))) = sub_check (V ("gim")) (("dda"::(Nil)))
Prop: sub_check (V ("jtb")) (("eqo"::("ezv"::(Nil)))) = sub_check (V ("jtb")) (("eqo"::(Nil)))
Prop: sub_check (V ("vho")) (("uta"::("jxs"::(Nil)))) = sub_check (V ("vho")) (("uta"::(Nil)))
=================================================
Progress: 575


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = is_mem_ta1 (string_list1) (string3)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string3)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite lemma3 in goal at 0(rank:20.)
rewrite Case2 in goal at 0(rank:28.)
rewrite <- lemma3 in goal at 0(rank:20.)
=================================================
Progress: 576


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = is_mem_ta1 (string_list1) (string3)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- lemma3 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = mem (string3) (string_list1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
case string_eq (string2) (string3)
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 1
rewrite <- lemma3 in goal at 0
validate generalize_common_subterm_goal
Prop: true = mem ("six") ((Nil))
Prop: true = mem ("bks") ((Nil))
Prop: true = mem ("dyp") (("yne"::("xrl"::("zwh"::("ywe"::("zqk"::(Nil)))))))
asdf
previous tactics
simpl in goal
intro string2
case string_eq (string2) (string3)
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 1
validate generalize_common_subterm_goal
Prop: true = is_mem_ta1 ((Nil)) ("qzv")
Prop: true = is_mem_ta1 ((Nil)) ("blm")
Prop: true = is_mem_ta1 ((Nil)) ("sls")
asdf
previous tactics
simpl in goal
intro string2
case string_eq (string2) (string3)
reflexivity
case string_eq (string1) (string3)
validate generalize_common_subterm_goal
Prop: true = is_mem_ta1 ((Nil)) ("huh")
Prop: true = is_mem_ta1 (("asn"::(Nil))) ("wpl")
Prop: true = is_mem_ta1 (("wcj"::(Nil))) ("aao")
asdf
=================================================
Progress: 577


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = is_mem_ta1 (string_list1) (string1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite lemma3 in goal at 0(rank:20.)
rewrite <- lemma3 in goal at 0(rank:20.)
=================================================
Progress: 578


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = is_mem_ta1 (string_list1) (string1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- lemma3 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = mem (string1) (string_list1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:12.)
=================================================
Progress: 579


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = mem (string1) (string_list1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 580


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
is_mem_ta1 (string_list1) (string3) = is_mem_ta1 (string_list1) (string3)

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 5
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 581


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
is_mem_ta1 (string_list1) (string3) = is_mem_ta1 (string_list1) (string3)

2 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
Inductive1 : lambda1 = P (string3) (lambda2)
---------------------------------------
forall (string2:string), sub_check_ta1 (P (string3) (lambda2)) ((string2::(string1::string_list1))) = sub_check_ta1 (P (string3) (lambda2)) ((string2::string_list1))

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 4
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 582


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
Inductive1 : lambda1 = P (string3) (lambda2)
---------------------------------------
forall (string2:string), sub_check_ta1 (P (string3) (lambda2)) ((string2::(string1::string_list1))) = sub_check_ta1 (P (string3) (lambda2)) ((string2::string_list1))

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
Inductive1 : lambda1 = P (string3) (lambda2)
---------------------------------------
forall (string2:string), sub_check_ta1 (lambda2) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda2) ((string3::(string2::string_list1)))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string2(rank:10.)
=================================================
Progress: 583


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
Inductive1 : lambda1 = P (string3) (lambda2)
---------------------------------------
forall (string2:string), sub_check_ta1 (lambda2) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda2) ((string3::(string2::string_list1)))

1 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
Inductive1 : lambda1 = P (string3) (lambda2)
string2 : string
---------------------------------------
sub_check_ta1 (lambda2) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda2) ((string3::(string2::string_list1)))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
parent
(string3::(string2::(string1::string_list1)))
lower
Cons(_, Cons(string2, Cons(string1, string_list1)))
upper
sub_check_ta1(lambda2, _)
remove upper
Cons(string2, Cons(string1, string_list1))
remove lower
Cons(string2, Cons(string1, string_list1))
remove upper
Cons(string3, Cons(string2, Cons(string1, string_list1)))
remove lower
Cons(string3, Cons(string2, Cons(string1, string_list1)))
remove upper
Cons(string4, Cons(string3, Cons(string2, Cons(string1, string_list1))))
remove lower
Cons(string4, Cons(string3, Cons(string2, Cons(string1, string_list1))))
remove upper
Cons(string5, Cons(string4, Cons(string3, Cons(string2, Cons(string1, string_list1)))))
remove lower
Cons(string5, Cons(string4, Cons(string3, Cons(string2, Cons(string1, string_list1)))))
parent
(string3::(string2::string_list1))
lower
Cons(_, Cons(string2, string_list1))
upper
sub_check_ta1(lambda2, _)
remove upper
Cons(string2, string_list1)
remove lower
Cons(string2, string_list1)
remove upper
Cons(string3, Cons(string2, string_list1))
remove lower
Cons(string3, Cons(string2, string_list1))
remove upper
Cons(string4, Cons(string3, Cons(string2, string_list1)))
remove lower
Cons(string4, Cons(string3, Cons(string2, string_list1)))
remove upper
Cons(string5, Cons(string4, Cons(string3, Cons(string2, string_list1))))
remove lower
Cons(string5, Cons(string4, Cons(string3, Cons(string2, string_list1))))
New Env
let rec mk_lhs1 arg_10 arg_11 arg_12 arg_13 =
match (arg_10) with
| Nil -> (arg_11::(arg_12::arg_13))
| Cons hd tl -> (hd::mk_lhs1 (tl) (arg_11) (arg_12) (arg_13))
;;
let rec mk_rhs1 arg_14 arg_15 arg_16 =
match (arg_14) with
| Nil -> (arg_15::arg_16)
| Cons hd tl -> (hd::mk_rhs1 (tl) (arg_15) (arg_16))
;;
Lemma List
forall (string1:string) (string2:string) (string_list1:string list), mk_lhs1 ((Nil)) (string1) (string2) (string_list1) = (string1::(string2::string_list1))
forall (string1:string) (string_list1:string list) (string2:string) (string3:string) (string_list2:string list), mk_lhs1 ((string1::string_list1)) (string2) (string3) (string_list2) = (string1::mk_lhs1 (string_list1) (string2) (string3) (string_list2))
forall (string1:string) (string_list1:string list), mk_rhs1 ((Nil)) (string1) (string_list1) = (string1::string_list1)
forall (string1:string) (string_list1:string list) (string2:string) (string_list2:string list), mk_rhs1 ((string1::string_list1)) (string2) (string_list2) = (string1::mk_rhs1 (string_list1) (string2) (string_list2))
forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
Inductive1 : lambda1 = P (string3) (lambda2)
string2 : string
---------------------------------------
sub_check_ta1 (lambda2) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda2) ((string3::(string2::string_list1)))

1 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 584


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
Inductive1 : lambda1 = P (string3) (lambda2)
string2 : string
---------------------------------------
sub_check_ta1 (lambda2) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda2) ((string3::(string2::string_list1)))

1 goal(s) more...

3 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))(rank : 0.)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string1(rank:11.)
=================================================
Progress: 585


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string_list2(rank:11.)
=================================================
Progress: 586


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))

0 goal(s) more...

4 conjecture(s) more...
>>> intro string_list2(rank : 11.)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
---------------------------------------
forall (lambda1:lambda) (string_list1:string list) (string2:string), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11.)
=================================================
Progress: 587


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
---------------------------------------
forall (lambda1:lambda) (string_list1:string list) (string2:string), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list) (string2:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:13.)
=================================================
Progress: 588


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list) (string2:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))

0 goal(s) more...

4 conjecture(s) more...
>>> induction lambda1(rank : 13.)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string_list1:string list) (string2:string), sub_check_ta1 (V (string3)) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (V (string3)) (mk_rhs1 (string_list1) (string2) (string_list2))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 589


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string_list1:string list) (string2:string), sub_check_ta1 (V (string3)) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (V (string3)) (mk_rhs1 (string_list1) (string2) (string_list2))

2 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string_list1:string list) (string2:string), is_mem_ta1 (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list1) (string2) (string_list2)) (string3)

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction string_list1(rank:14.)
=================================================
Progress: 590


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string_list1:string list) (string2:string), is_mem_ta1 (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list1) (string2) (string_list2)) (string3)

2 goal(s) more...

4 conjecture(s) more...
>>> induction string_list1(rank : 14.)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
---------------------------------------
forall (string2:string), is_mem_ta1 (mk_lhs1 ((Nil)) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 ((Nil)) (string2) (string_list2)) (string3)

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:14.)
=================================================
Progress: 591


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
---------------------------------------
forall (string2:string), is_mem_ta1 (mk_lhs1 ((Nil)) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 ((Nil)) (string2) (string_list2)) (string3)

3 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 14.)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
---------------------------------------
forall (string2:string), if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::string_list2)) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list2) (string3)

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:14.)
=================================================
Progress: 592


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
---------------------------------------
forall (string2:string), if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::string_list2)) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list2) (string3)

3 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 14.)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::string_list2)) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list2) (string3)

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:15.)
=================================================
Progress: 593


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::string_list2)) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list2) (string3)

3 goal(s) more...

4 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 15.)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:14.)
=================================================
Progress: 594


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 14.)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 (string_list2) (string3) = is_mem_ta1 (string_list2) (string3)

3 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 5
case string_eq (string1) (string3)(rank:15.)
rewrite <- Cond1 in goal at 0(rank:30.)
rewrite <- lemma3 in goal at 0(rank:30.)
rewrite <- lemma3 in goal at 1(rank:30.)
rewrite <- lemma3 in goal at 2(rank:30.)
=================================================
Progress: 595


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 (string_list2) (string3) = is_mem_ta1 (string_list2) (string3)

3 goal(s) more...

4 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 15.)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = is_mem_ta1 (string_list2) (string3)

4 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 1(rank:15.)
=================================================
Progress: 596


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = is_mem_ta1 (string_list2) (string3)

4 goal(s) more...

4 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 1(rank : 15.)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = is_mem_ta1 (string_list2) (string3)

4 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
rewrite <- Case2 in goal at 0(rank:15.)
rewrite <- Cond1 in goal at 0(rank:23.)
rewrite <- lemma3 in goal at 0(rank:23.)
=================================================
Progress: 597


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = is_mem_ta1 (string_list2) (string3)

4 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 15.)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

4 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
rewrite <- Cond1 in goal at 0(rank:23.)
rewrite <- lemma3 in goal at 0(rank:23.)
=================================================
Progress: 598


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::(string1::string_list1))) = sub_check (lambda1) ((string2::string_list1))
string1 : string
string2 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
Cond2 : mem (string2) (string_list1) = false
Cond3 : string_eq (string1) (string2) = false
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
if string_eq (string2) (string3) then true else mem (string3) ((string1::string_list1)) = if string_eq (string2) (string3) then true else mem (string3) (string_list1)

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::(string1::string_list1))) = sub_check (lambda1) ((string2::string_list1))
string1 : string
string2 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
Cond2 : mem (string2) (string_list1) = false
Cond3 : string_eq (string1) (string2) = false
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:19.)
=================================================
Progress: 599


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::(string1::string_list1))) = sub_check (lambda1) ((string2::string_list1))
string1 : string
string2 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
Cond2 : mem (string2) (string_list1) = false
Cond3 : string_eq (string1) (string2) = false
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::(string1::string_list1))) = sub_check (lambda1) ((string2::string_list1))
string1 : string
string2 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
Cond2 : mem (string2) (string_list1) = false
Cond3 : string_eq (string1) (string2) = false
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else mem (string3) (string_list1) = mem (string3) (string_list1)

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
case string_eq (string1) (string3)(rank:20.)
rewrite <- Cond1 in goal at 0(rank:35.)
=================================================
Progress: 600


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 601


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 2
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:11.)
rewrite Case1 in goal at 0(rank:19.)
rewrite IH1 in goal at 0(rank:27.)
=================================================
Progress: 602


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:27.)
rewrite IH1 in goal at 1(rank:27.)
rewrite IH1 in goal at 2(rank:27.)
=================================================
Progress: 603


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
case mem (string2) (string_list1)
rewrite IH1 in goal at 0
reflexivity
validate generalize_common_subterm_goal
Prop: sub_check (V ("hxr")) (("iix"::("irt"::(Nil)))) = sub_check (V ("hxr")) (("wuj"::("irt"::(Nil))))
Prop: sub_check (V ("ivb")) (("pcw"::(Nil))) = sub_check (V ("ivb")) (("ufh"::(Nil)))
Prop: sub_check (V ("lna")) (("pmm"::(Nil))) = sub_check (V ("lna")) (("hkv"::(Nil)))
=================================================
Progress: 604


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite <- Case1 in goal at 2
case mem (string2) (string_list1)
validate generalize_common_subterm_goal
Prop: sub_check (V ("czj")) (("ezi"::(Nil))) = sub_check (V ("czj")) ((Nil))
Prop: sub_check (V ("pox")) (("zgv"::("sac"::(Nil)))) = sub_check (V ("pox")) (("sac"::(Nil)))
Prop: sub_check (V ("qud")) (("sfq"::(Nil))) = sub_check (V ("qud")) ((Nil))
=================================================
Progress: 605


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:28.)
rewrite Case1 in goal at 1(rank:28.)
rewrite Case1 in goal at 2(rank:28.)
=================================================
Progress: 606


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
Case2 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
Case2 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case mem (string2) (string_list1)
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 1
validate generalize_common_subterm_goal
Prop: sub_check (V ("wkf")) (("lzy"::("vyv"::(Nil)))) = sub_check (V ("wkf")) (("vyv"::(Nil)))
Prop: sub_check (V ("nyr")) (("xzw"::(Nil))) = sub_check (V ("nyr")) ((Nil))
Prop: sub_check (V ("fjx")) (("gqy"::(Nil))) = sub_check (V ("fjx")) ((Nil))
previous tactics
simpl in goal
case mem (string2) (string_list1)
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
Prop: sub_check (V ("jge")) (("pzq"::(Nil))) = sub_check (V ("jge")) ((Nil))
Prop: sub_check (V ("emr")) (("dgc"::(Nil))) = sub_check (V ("emr")) ((Nil))
Prop: sub_check (V ("eyi")) (("mlf"::(Nil))) = sub_check (V ("eyi")) ((Nil))
=================================================
Progress: 607


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
Case2 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
Case2 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case2 in goal at 0(rank:28.)
rewrite Case2 in goal at 1(rank:28.)
rewrite Case2 in goal at 2(rank:28.)
=================================================
Progress: 608


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) (string_list1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string1::string_list1))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:12.)
=================================================
Progress: 609


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string1::string_list1))

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string2::string_list1))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite Case1 in goal at 0
case mem (string2) (string_list1)
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: sub_check (V ("vme")) (("fuz"::(Nil))) = sub_check (V ("vme")) (("aps"::(Nil)))
Prop: sub_check (V ("wfa")) (("epk"::(Nil))) = sub_check (V ("wfa")) (("opk"::(Nil)))
Prop: sub_check (V ("axk")) (("jto"::(Nil))) = sub_check (V ("axk")) (("ssn"::(Nil)))
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite Case1 in goal at 0
case mem (string2) (string_list1)
validate generalize_common_subterm_goal
Prop: sub_check (V ("lyd")) (("yno"::("tfr"::(Nil)))) = sub_check (V ("lyd")) (("tfr"::(Nil)))
Prop: sub_check (V ("opr")) (("yut"::("dth"::("epq"::(Nil))))) = sub_check (V ("opr")) (("dth"::("epq"::(Nil))))
Prop: sub_check (V ("wmj")) (("ljn"::(Nil))) = sub_check (V ("wmj")) ((Nil))
=================================================
Progress: 610


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite Case1 in goal at 0
case mem (string2) (string_list1)
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: sub_check (P ("gjp") (V ("nul"))) (("xxm"::(Nil))) = sub_check (P ("gjp") (V ("nul"))) ((Nil))
Prop: sub_check (V ("vmp")) (("kax"::(Nil))) = sub_check (V ("vmp")) ((Nil))
Prop: sub_check (V ("eqm")) (("kmz"::(Nil))) = sub_check (V ("eqm")) ((Nil))
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite Case1 in goal at 0
case mem (string2) (string_list1)
validate generalize_common_subterm_goal
Prop: sub_check (V ("qda")) (("vug"::(Nil))) = sub_check (V ("qda")) ((Nil))
Prop: sub_check (P ("efq") (V ("wda"))) (("ljb"::(Nil))) = sub_check (P ("efq") (V ("wda"))) ((Nil))
Prop: sub_check (C (V ("njs")) (V ("ftt"))) (("kkw"::("fla"::("rje"::("ava"::(Nil)))))) = sub_check (C (V ("njs")) (V ("ftt"))) (("fla"::("rje"::("ava"::(Nil)))))
=================================================
Progress: 611


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite Case1 in goal at 0
case mem (string2) (string_list1)
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: sub_check (V ("vlc")) (("dpz"::(Nil))) = sub_check (V ("vlc")) ((Nil))
Prop: sub_check (P ("uby") (V ("lhg"))) (("rnj"::(Nil))) = sub_check (P ("uby") (V ("lhg"))) ((Nil))
Prop: sub_check (V ("khb")) (("xnp"::(Nil))) = sub_check (V ("khb")) ((Nil))
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite Case1 in goal at 0
case mem (string2) (string_list1)
validate generalize_common_subterm_goal
Prop: sub_check (V ("wmu")) (("hxd"::(Nil))) = sub_check (V ("wmu")) ((Nil))
Prop: sub_check (V ("cvg")) (("rym"::(Nil))) = sub_check (V ("cvg")) ((Nil))
Prop: sub_check (P ("qir") (V ("bif"))) (("rhr"::(Nil))) = sub_check (P ("qir") (V ("bif"))) ((Nil))
=================================================
Progress: 612


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite <- Case1 in goal at 2
rewrite IH1 in goal at 2
case mem (string2) (string_list1)
validate generalize_common_subterm_goal
Prop: sub_check (V ("qmc")) (("aqn"::(Nil))) = sub_check (V ("qmc")) ((Nil))
Prop: sub_check (V ("lwc")) (("tzs"::("wii"::(Nil)))) = sub_check (V ("lwc")) (("wii"::(Nil)))
Prop: sub_check (V ("oxs")) (("gbo"::(Nil))) = sub_check (V ("oxs")) ((Nil))
=================================================
Progress: 613


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:28.)
rewrite Case1 in goal at 1(rank:28.)
rewrite Case1 in goal at 2(rank:28.)
=================================================
Progress: 614


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::(string1::string_list1))) = sub_check (lambda1) ((string2::string_list1))
string1 : string
string2 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
Cond2 : mem (string2) (string_list1) = false
Cond3 : string_eq (string1) (string2) = false
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else mem (string3) (string_list1) = mem (string3) (string_list1)

2 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::(string1::string_list1))) = sub_check (lambda1) ((string2::string_list1))
string1 : string
string2 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
Cond2 : mem (string2) (string_list1) = false
Cond3 : string_eq (string1) (string2) = false
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = mem (string3) (string_list1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 1(rank:20.)
=================================================
Progress: 615


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::(string1::string_list1))) = sub_check (lambda1) ((string2::string_list1))
string1 : string
string2 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
Cond2 : mem (string2) (string_list1) = false
Cond3 : string_eq (string1) (string2) = false
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = mem (string3) (string_list1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 1(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::(string1::string_list1))) = sub_check (lambda1) ((string2::string_list1))
string1 : string
string2 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
Cond2 : mem (string2) (string_list1) = false
Cond3 : string_eq (string1) (string2) = false
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = mem (string3) (string_list1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:20.)
rewrite <- Cond1 in goal at 0(rank:28.)
=================================================
Progress: 616


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::(string1::string_list1))) = sub_check (lambda1) ((string2::string_list1))
string1 : string
string2 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
Cond2 : mem (string2) (string_list1) = false
Cond3 : string_eq (string1) (string2) = false
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = mem (string3) (string_list1)

3 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::(string1::string_list1))) = sub_check (lambda1) ((string2::string_list1))
string1 : string
string2 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
Cond2 : mem (string2) (string_list1) = false
Cond3 : string_eq (string1) (string2) = false
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = mem (string1) (string_list1)

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite Cond1 in goal at 0(rank:28.)
rewrite <- Cond1 in goal at 0(rank:28.)
=================================================
Progress: 617


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
---------------------------------------
forall (string_list1:string list), true = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

3 conjecture(s) more...
>>> induction string_list1(rank : 21.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
Base2 : string_list1 = (Nil)
---------------------------------------
true = is_mem_ta1 ((Nil)) (string2)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 618


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
Base2 : string_list1 = (Nil)
---------------------------------------
true = is_mem_ta1 ((Nil)) (string2)

4 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
Base2 : string_list1 = (Nil)
---------------------------------------
true = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 619


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
---------------------------------------
forall (string_list1:string list), true = is_mem_ta1 (string_list1) (string1)

3 goal(s) more...

3 conjecture(s) more...
>>> induction string_list1(rank : 21.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
Base2 : string_list1 = (Nil)
---------------------------------------
true = is_mem_ta1 ((Nil)) (string1)

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 620


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
Base2 : string_list1 = (Nil)
---------------------------------------
true = is_mem_ta1 ((Nil)) (string1)

4 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
Base2 : string_list1 = (Nil)
---------------------------------------
true = false

4 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 621


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
mem (string2) (string_list1) = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 21.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
is_mem_ta1 (string_list1) (string2) = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
case string_eq (string1) (string2)(rank:14.)
rewrite <- Cond1 in goal at 0(rank:29.)
=================================================
Progress: 622


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
is_mem_ta1 (string_list1) (string2) = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)

2 goal(s) more...

4 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 14.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list1) (string2) = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 1(rank:14.)
=================================================
Progress: 623


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list1) (string2) = true

3 goal(s) more...

4 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 1(rank : 14.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string2) = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:14.)
rewrite <- Cond1 in goal at 0(rank:22.)
rewrite <- lemma3 in goal at 0(rank:22.)
=================================================
Progress: 624


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string2) = true

3 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 14.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string1) = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
rewrite <- Cond1 in goal at 0(rank:22.)
rewrite <- lemma3 in goal at 0(rank:22.)
=================================================
Progress: 625


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
mem (string2) (string_list1) = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- lemma3 in goal at 0(rank : 21.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
mem (string2) (string_list1) = if string_eq (string1) (string2) then true else mem (string2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
case string_eq (string1) (string2)(rank:14.)
rewrite <- Cond1 in goal at 0(rank:29.)
=================================================
Progress: 626


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
mem (string2) (string_list1) = if string_eq (string1) (string2) then true else mem (string2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 14.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
mem (string2) (string_list1) = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 1(rank:14.)
=================================================
Progress: 627


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
mem (string2) (string_list1) = true

3 goal(s) more...

4 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 1(rank : 14.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string2) (string_list1) = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:14.)
rewrite lemma3 in goal at 0(rank:30.)
rewrite <- Cond1 in goal at 0(rank:22.)
=================================================
Progress: 628


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string2) (string_list1) = true

3 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 14.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string1) (string_list1) = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:22.)
rewrite lemma3 in goal at 0(rank:30.)
rewrite <- Cond1 in goal at 0(rank:22.)
=================================================
Progress: 629


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
is_mem_ta1 (string_list1) (string2) = if string_eq (string1) (string2) then true else mem (string2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 21.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
is_mem_ta1 (string_list1) (string2) = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
case string_eq (string1) (string2)(rank:14.)
rewrite <- Cond1 in goal at 0(rank:29.)
=================================================
Progress: 630


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
is_mem_ta1 (string_list1) (string2) = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)

2 goal(s) more...

4 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 14.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list1) (string2) = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 1(rank:14.)
=================================================
Progress: 631


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list1) (string2) = true

3 goal(s) more...

4 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 1(rank : 14.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string2) = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:14.)
rewrite <- Cond1 in goal at 0(rank:22.)
rewrite <- lemma3 in goal at 0(rank:22.)
=================================================
Progress: 632


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string2) = true

3 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 14.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string1) = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
rewrite <- Cond1 in goal at 0(rank:22.)
rewrite <- lemma3 in goal at 0(rank:22.)
=================================================
Progress: 633


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
is_mem_ta1 (string_list1) (string2) = if string_eq (string1) (string2) then true else mem (string2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- lemma3 in goal at 0(rank : 21.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
mem (string2) (string_list1) = if string_eq (string1) (string2) then true else mem (string2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
case string_eq (string1) (string2)(rank:14.)
rewrite <- Cond1 in goal at 0(rank:29.)
=================================================
Progress: 634


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
mem (string2) (string_list1) = if string_eq (string1) (string2) then true else mem (string2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 14.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
mem (string2) (string_list1) = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 1(rank:14.)
=================================================
Progress: 635


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
mem (string2) (string_list1) = true

3 goal(s) more...

4 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 1(rank : 14.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string2) (string_list1) = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:14.)
rewrite lemma3 in goal at 0(rank:30.)
rewrite <- Cond1 in goal at 0(rank:22.)
=================================================
Progress: 636


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string2) (string_list1) = true

3 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 14.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string1) (string_list1) = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:22.)
rewrite lemma3 in goal at 0(rank:30.)
rewrite <- Cond1 in goal at 0(rank:22.)
=================================================
Progress: 637


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
---------------------------------------
sub_check_ta1 (lambda2) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 22.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case mem (string1) (string_list1)(rank:7.)
rewrite <- IH1 in goal at 2(rank:22.)
=================================================
Progress: 638


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1))

1 goal(s) more...

1 conjecture(s) more...
>>> case mem (string1) (string_list1)(rank : 7.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite <- IH1 in goal at 0(rank:23.)
rewrite <- IH1 in goal at 1(rank:23.)
rewrite <- IH1 in goal at 2(rank:23.)
=================================================
Progress: 639


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
---------------------------------------
sub_check_ta1 (lambda2) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 22.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
---------------------------------------
sub_check_ta1 (lambda2) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda2) (string_list1) else sub_check_ta1 (lambda2) ((string1::string_list1))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case mem (string1) (string_list1)(rank:7.)
=================================================
Progress: 640


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
---------------------------------------
sub_check_ta1 (lambda2) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda2) (string_list1) else sub_check_ta1 (lambda2) ((string1::string_list1))

1 goal(s) more...

1 conjecture(s) more...
>>> case mem (string1) (string_list1)(rank : 7.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:23.)
rewrite IH1 in goal at 1(rank:23.)
rewrite IH1 in goal at 2(rank:23.)
=================================================
Progress: 641


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
---------------------------------------
sub_check_ta1 (lambda2) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 22.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
---------------------------------------
sub_check_ta1 (lambda2) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string2) (string1)
reflexivity
rewrite IH1 in goal at 0
reflexivity
simpl in goal
intro string_list1
rewrite <- IH1 in goal at 1
Prop: sub_check_ta1 (V ("tny")) ((Nil)) = if mem ("wec") ((Nil)) then sub_check_ta1 (V ("tny")) ((Nil)) else sub_check (V ("tny")) ((Nil))
Prop: sub_check_ta1 (V ("csu")) ((Nil)) = if mem ("skn") ((Nil)) then sub_check_ta1 (V ("csu")) ((Nil)) else sub_check (V ("csu")) ((Nil))
Prop: sub_check_ta1 (V ("ddc")) ((Nil)) = if mem ("okf") ((Nil)) then sub_check_ta1 (V ("ddc")) ((Nil)) else sub_check (V ("ddc")) ((Nil))
previous tactics
simpl in goal
case string_eq (string2) (string1)
reflexivity
rewrite IH1 in goal at 0
reflexivity
simpl in goal
intro string_list1
Prop: sub_check_ta1 (C (V ("ari")) (V ("kzl"))) (("tpq"::(Nil))) = if mem ("igg") ((Nil)) then sub_check (C (V ("ari")) (V ("kzl"))) ((Nil)) else sub_check (C (V ("ari")) (V ("kzl"))) (("tpq"::(Nil)))
Prop: sub_check_ta1 (V ("yam")) ((Nil)) = if mem ("lla") ((Nil)) then sub_check (V ("yam")) ((Nil)) else sub_check (V ("yam")) ((Nil))
Prop: sub_check_ta1 (V ("wkb")) ((Nil)) = if mem ("thm") ((Nil)) then sub_check (V ("wkb")) ((Nil)) else sub_check (V ("wkb")) ((Nil))
Lemma List
forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
End of Lemma List


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
---------------------------------------
sub_check_ta1 (lambda2) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1))

1 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
End of Lemma List


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
---------------------------------------
sub_check_ta1 (lambda2) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1))

1 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 642


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
---------------------------------------
sub_check_ta1 (lambda2) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)(rank : 0.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)

---------------------------------------
forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7.)
=================================================
Progress: 643


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
---------------------------------------
sub_check_ta1 (lambda2) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (lambda1) (string_list2) else sub_check (lambda1) (string_list1)(rank : 0.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (lambda1) (string_list2) else sub_check (lambda1) (string_list1)

---------------------------------------
forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (lambda1) (string_list2) else sub_check (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7.)
=================================================
Progress: 644


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)

---------------------------------------
forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
string1 : string
---------------------------------------
forall (string_list1:string list) (lambda1:lambda) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:7.)
=================================================
Progress: 645


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (lambda1) (string_list2) else sub_check (lambda1) (string_list1)

---------------------------------------
forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (lambda1) (string_list2) else sub_check (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
string1 : string
---------------------------------------
forall (string_list1:string list) (lambda1:lambda) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (lambda1) (string_list2) else sub_check (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:7.)
=================================================
Progress: 646


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
string1 : string
---------------------------------------
forall (string_list1:string list) (lambda1:lambda) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string_list1(rank : 7.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string_list2(rank:7.)
=================================================
Progress: 647


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
string1 : string
---------------------------------------
forall (string_list1:string list) (lambda1:lambda) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (lambda1) (string_list2) else sub_check (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string_list1(rank : 7.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (lambda1) (string_list2) else sub_check (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string_list2(rank:7.)
=================================================
Progress: 648


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string_list2(rank : 7.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
string_list2 : string list
---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case mem (string1) (string_list2)(rank:8.)
=================================================
Progress: 649


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (lambda1) (string_list2) else sub_check (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string_list2(rank : 7.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
string_list2 : string list
---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (lambda1) (string_list2) else sub_check (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case mem (string1) (string_list2)(rank:8.)
=================================================
Progress: 650


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
string_list2 : string list
---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> case mem (string1) (string_list2)(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
string_list2 : string list
Case1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list2)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:10.)
=================================================
Progress: 651


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
string_list2 : string list
---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (lambda1) (string_list2) else sub_check (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> case mem (string1) (string_list2)(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
string_list2 : string list
Case1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) (string_list2)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:10.)
=================================================
Progress: 652


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
string_list2 : string list
Case1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list2)

1 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 10.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
string_list2 : string list
Case1 : mem (string1) (string_list2) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
sub_check_ta1 (V (string2)) (string_list1) = sub_check (V (string2)) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 653


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
string_list2 : string list
Case1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) (string_list2)

1 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 10.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
string_list2 : string list
Case1 : mem (string1) (string_list2) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
sub_check_ta1 (V (string2)) (string_list1) = sub_check_ta1 (V (string2)) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 654


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
string_list2 : string list
Case1 : mem (string1) (string_list2) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
sub_check_ta1 (V (string2)) (string_list1) = sub_check (V (string2)) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
string_list2 : string list
Case1 : mem (string1) (string_list2) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
is_mem_ta1 (string_list1) (string2) = mem (string2) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: is_mem_ta1 ((Nil)) ("fse") = mem ("fse") ((Nil))
Prop: is_mem_ta1 ((Nil)) ("jzv") = mem ("jzv") (("jwr"::(Nil)))
Prop: is_mem_ta1 ((Nil)) ("imt") = mem ("imt") (("baj"::(Nil)))
Lemma List
forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list2)
End of Lemma List


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
string_list2 : string list
Case1 : mem (string1) (string_list2) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
is_mem_ta1 (string_list1) (string2) = mem (string2) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 655


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
string_list2 : string list
Case1 : mem (string1) (string_list2) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
is_mem_ta1 (string_list1) (string2) = mem (string2) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list2)(rank : 0.)


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list2)

---------------------------------------
forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list2)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction string_list1(rank:10.)
=================================================
Progress: 656


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
string_list2 : string list
Case1 : mem (string1) (string_list2) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
sub_check_ta1 (V (string2)) (string_list1) = sub_check_ta1 (V (string2)) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
string_list2 : string list
Case1 : mem (string1) (string_list2) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: is_mem_ta1 (("zyr"::(Nil))) ("qbt") = is_mem_ta1 ((Nil)) ("qbt")
Prop: is_mem_ta1 ((Nil)) ("mpj") = is_mem_ta1 ((Nil)) ("mpj")
Prop: is_mem_ta1 ((Nil)) ("dmy") = is_mem_ta1 (("obx"::(Nil))) ("dmy")
Lemma List
forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list2) (string1)
End of Lemma List


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
string_list2 : string list
Case1 : mem (string1) (string_list2) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 657


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
string_list2 : string list
Case1 : mem (string1) (string_list2) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list2) (string1)(rank : 0.)


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list2) (string1)

---------------------------------------
forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction string_list1(rank:10.)
=================================================
Progress: 658


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list2)

---------------------------------------
forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list2)

0 goal(s) more...

3 conjecture(s) more...
>>> induction string_list1(rank : 10.)


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list2)
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
forall (string1:string) (string_list2:string list), is_mem_ta1 ((Nil)) (string1) = mem (string1) (string_list2)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 659


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list2) (string1)

---------------------------------------
forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> induction string_list1(rank : 10.)


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list2) (string1)
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
forall (string1:string) (string_list2:string list), is_mem_ta1 ((Nil)) (string1) = is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 660


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list2)
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
forall (string1:string) (string_list2:string list), is_mem_ta1 ((Nil)) (string1) = mem (string1) (string_list2)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list2)
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
forall (string1:string) (string_list2:string list), false = mem (string1) (string_list2)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction string_list2(rank:11.)
=================================================
Progress: 661


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list2) (string1)
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
forall (string1:string) (string_list2:string list), is_mem_ta1 ((Nil)) (string1) = is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list2) (string1)
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
forall (string1:string) (string_list2:string list), false = is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction string_list2(rank:11.)
=================================================
Progress: 662


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list2)
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
forall (string1:string) (string_list2:string list), false = mem (string1) (string_list2)

1 goal(s) more...

3 conjecture(s) more...
>>> induction string_list2(rank : 11.)


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
Base2 : string_list2 = (Nil)
---------------------------------------
forall (string1:string), false = mem (string1) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 663


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
Base2 : string_list2 = (Nil)
---------------------------------------
forall (string1:string), false = mem (string1) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = mem (string1) (string_list3)
Inductive1 : string_list2 = (string2::string_list3)
---------------------------------------
forall (string1:string), false = mem (string1) ((string2::string_list3))

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 664


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = mem (string1) (string_list3)
Inductive1 : string_list2 = (string2::string_list3)
---------------------------------------
forall (string1:string), false = mem (string1) ((string2::string_list3))

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = mem (string1) (string_list3)
Inductive1 : string_list2 = (string2::string_list3)
---------------------------------------
forall (string1:string), false = if string_eq (string2) (string1) then true else mem (string1) (string_list3)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:10.)
=================================================
Progress: 665


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = mem (string1) (string_list3)
Inductive1 : string_list2 = (string2::string_list3)
---------------------------------------
forall (string1:string), false = if string_eq (string2) (string1) then true else mem (string1) (string_list3)

1 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 10.)


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = mem (string1) (string_list3)
Inductive1 : string_list2 = (string2::string_list3)
string1 : string
---------------------------------------
false = if string_eq (string2) (string1) then true else mem (string1) (string_list3)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case string_eq (string2) (string1)(rank:11.)
rewrite <- IH1 in goal at 0(rank:18.)
=================================================
Progress: 666


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list2) (string1)
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
forall (string1:string) (string_list2:string list), false = is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> induction string_list2(rank : 11.)


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list2) (string1)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
Base2 : string_list2 = (Nil)
---------------------------------------
forall (string1:string), false = is_mem_ta1 ((Nil)) (string1)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 667


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list2) (string1)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
Base2 : string_list2 = (Nil)
---------------------------------------
forall (string1:string), false = is_mem_ta1 ((Nil)) (string1)

2 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list2) (string1)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = is_mem_ta1 (string_list3) (string1)
Inductive1 : string_list2 = (string2::string_list3)
---------------------------------------
forall (string1:string), false = is_mem_ta1 ((string2::string_list3)) (string1)

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 668


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list2) (string1)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = is_mem_ta1 (string_list3) (string1)
Inductive1 : string_list2 = (string2::string_list3)
---------------------------------------
forall (string1:string), false = is_mem_ta1 ((string2::string_list3)) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list2) (string1)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = is_mem_ta1 (string_list3) (string1)
Inductive1 : string_list2 = (string2::string_list3)
---------------------------------------
forall (string1:string), false = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list3) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:10.)
=================================================
Progress: 669


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list2) (string1)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = is_mem_ta1 (string_list3) (string1)
Inductive1 : string_list2 = (string2::string_list3)
---------------------------------------
forall (string1:string), false = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list3) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 10.)


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list2) (string1)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = is_mem_ta1 (string_list3) (string1)
Inductive1 : string_list2 = (string2::string_list3)
string1 : string
---------------------------------------
false = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list3) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case string_eq (string2) (string1)(rank:11.)
rewrite <- IH1 in goal at 0(rank:18.)
=================================================
Progress: 670


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = mem (string1) (string_list3)
Inductive1 : string_list2 = (string2::string_list3)
string1 : string
---------------------------------------
false = if string_eq (string2) (string1) then true else mem (string1) (string_list3)

1 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 11.)


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = mem (string1) (string_list3)
Inductive1 : string_list2 = (string2::string_list3)
string1 : string
Case1 : string_eq (string2) (string1) = true
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 1(rank:11.)
=================================================
Progress: 671


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list2) (string1)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = is_mem_ta1 (string_list3) (string1)
Inductive1 : string_list2 = (string2::string_list3)
string1 : string
---------------------------------------
false = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list3) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 11.)


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list2) (string1)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = is_mem_ta1 (string_list3) (string1)
Inductive1 : string_list2 = (string2::string_list3)
string1 : string
Case1 : string_eq (string2) (string1) = true
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 1(rank:11.)
=================================================
Progress: 672


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = mem (string1) (string_list3)
Inductive1 : string_list2 = (string2::string_list3)
string1 : string
Case1 : string_eq (string2) (string1) = true
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 1(rank : 11.)


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = mem (string1) (string_list3)
Inductive1 : string_list2 = (string2::string_list3)
string1 : string
Case1 : string2 = string1
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 673


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list2) (string1)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = is_mem_ta1 (string_list3) (string1)
Inductive1 : string_list2 = (string2::string_list3)
string1 : string
Case1 : string_eq (string2) (string1) = true
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 1(rank : 11.)


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list2) (string1)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = is_mem_ta1 (string_list3) (string1)
Inductive1 : string_list2 = (string2::string_list3)
string1 : string
Case1 : string2 = string1
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 674


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = mem (string1) (string_list3)
Inductive1 : string_list2 = (string2::string_list3)
string1 : string
---------------------------------------
false = if string_eq (string2) (string1) then true else mem (string1) (string_list3)

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = mem (string1) (string_list3)
Inductive1 : string_list2 = (string2::string_list3)
string1 : string
---------------------------------------
false = if string_eq (string2) (string1) then true else false

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string1)(rank:11.)
=================================================
Progress: 675


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = mem (string1) (string_list3)
Inductive1 : string_list2 = (string2::string_list3)
string1 : string
---------------------------------------
false = if string_eq (string2) (string1) then true else false

1 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 11.)


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = mem (string1) (string_list3)
Inductive1 : string_list2 = (string2::string_list3)
string1 : string
Case1 : string_eq (string2) (string1) = true
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 1(rank:11.)
=================================================
Progress: 676


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = mem (string1) (string_list3)
Inductive1 : string_list2 = (string2::string_list3)
string1 : string
Case1 : string_eq (string2) (string1) = true
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 1(rank : 11.)


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = mem (string1) (string_list3)
Inductive1 : string_list2 = (string2::string_list3)
string1 : string
Case1 : string2 = string1
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 677


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list2) (string1)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = is_mem_ta1 (string_list3) (string1)
Inductive1 : string_list2 = (string2::string_list3)
string1 : string
---------------------------------------
false = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list3) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list2) (string1)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = is_mem_ta1 (string_list3) (string1)
Inductive1 : string_list2 = (string2::string_list3)
string1 : string
---------------------------------------
false = if string_eq (string2) (string1) then true else false

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string1)(rank:11.)
=================================================
Progress: 678


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list2) (string1)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = is_mem_ta1 (string_list3) (string1)
Inductive1 : string_list2 = (string2::string_list3)
string1 : string
---------------------------------------
false = if string_eq (string2) (string1) then true else false

1 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 11.)


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list2) (string1)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = is_mem_ta1 (string_list3) (string1)
Inductive1 : string_list2 = (string2::string_list3)
string1 : string
Case1 : string_eq (string2) (string1) = true
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 1(rank:11.)
=================================================
Progress: 679


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list2) (string1)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = is_mem_ta1 (string_list3) (string1)
Inductive1 : string_list2 = (string2::string_list3)
string1 : string
Case1 : string_eq (string2) (string1) = true
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 1(rank : 11.)


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list2) (string1)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = is_mem_ta1 (string_list3) (string1)
Inductive1 : string_list2 = (string2::string_list3)
string1 : string
Case1 : string2 = string1
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 680


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
---------------------------------------
sub_check_ta1 (lambda2) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 22.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
---------------------------------------
sub_check_ta1 (lambda2) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check_ta1 (lambda2) ((string1::string_list1))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string2) (string1)
reflexivity
rewrite IH1 in goal at 0
reflexivity
simpl in goal
intro string_list1
rewrite <- IH1 in goal at 2
Prop: sub_check_ta1 (V ("cjn")) ((Nil)) = if mem ("quc") ((Nil)) then sub_check (V ("cjn")) ((Nil)) else sub_check_ta1 (V ("cjn")) ((Nil))
Prop: sub_check_ta1 (V ("cyh")) (("bbw"::(Nil))) = if mem ("foa") ((Nil)) then sub_check (V ("cyh")) ((Nil)) else sub_check_ta1 (V ("cyh")) (("bbw"::(Nil)))
Prop: sub_check_ta1 (V ("jpo")) (("tba"::("slf"::("cnq"::(Nil))))) = if mem ("xof") ((Nil)) then sub_check (V ("jpo")) ((Nil)) else sub_check_ta1 (V ("jpo")) (("tba"::("slf"::("cnq"::(Nil)))))
previous tactics
simpl in goal
case string_eq (string2) (string1)
reflexivity
rewrite IH1 in goal at 0
reflexivity
simpl in goal
intro string_list1
Prop: sub_check_ta1 (P ("gtv") (C (V ("bwd")) (V ("uqj")))) ((Nil)) = if mem ("pam") ((Nil)) then sub_check (P ("gtv") (C (V ("bwd")) (V ("uqj")))) ((Nil)) else sub_check (P ("gtv") (C (V ("bwd")) (V ("uqj")))) ((Nil))
Prop: sub_check_ta1 (V ("hil")) (("sem"::(Nil))) = if mem ("hgr") ((Nil)) then sub_check (V ("hil")) ((Nil)) else sub_check (V ("hil")) (("sem"::(Nil)))
Prop: sub_check_ta1 (C (P ("zsh") (V ("nbd"))) (V ("wjy"))) ((Nil)) = if mem ("you") ((Nil)) then sub_check (C (P ("zsh") (V ("nbd"))) (V ("wjy"))) ((Nil)) else sub_check (C (P ("zsh") (V ("nbd"))) (V ("wjy"))) ((Nil))
Lemma List
forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check_ta1 (lambda1) (string_list1)
End of Lemma List


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
---------------------------------------
sub_check_ta1 (lambda2) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check_ta1 (lambda2) ((string1::string_list1))

1 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 681


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
---------------------------------------
sub_check_ta1 (lambda2) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check_ta1 (lambda2) ((string1::string_list1))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check_ta1 (lambda1) (string_list1)(rank : 0.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check_ta1 (lambda1) (string_list1)

---------------------------------------
forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check_ta1 (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7.)
=================================================
Progress: 682


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check_ta1 (lambda1) (string_list1)

---------------------------------------
forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check_ta1 (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check_ta1 (lambda1) (string_list1)
string1 : string
---------------------------------------
forall (string_list1:string list) (lambda1:lambda) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check_ta1 (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:7.)
=================================================
Progress: 683


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check_ta1 (lambda1) (string_list1)
string1 : string
---------------------------------------
forall (string_list1:string list) (lambda1:lambda) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check_ta1 (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string_list1(rank : 7.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check_ta1 (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string_list2(rank:7.)
=================================================
Progress: 684


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check_ta1 (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string_list2(rank : 7.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
string_list2 : string list
---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check_ta1 (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case mem (string1) (string_list2)(rank:8.)
=================================================
Progress: 685


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
string_list2 : string list
---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check_ta1 (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> case mem (string1) (string_list2)(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
string_list2 : string list
Case1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list2)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:10.)
=================================================
Progress: 686


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
string_list2 : string list
Case1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list2)

1 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 10.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
string_list2 : string list
Case1 : mem (string1) (string_list2) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
sub_check_ta1 (V (string2)) (string_list1) = sub_check (V (string2)) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 687


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
string_list2 : string list
Case1 : mem (string1) (string_list2) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
sub_check_ta1 (V (string2)) (string_list1) = sub_check (V (string2)) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
string_list2 : string list
Case1 : mem (string1) (string_list2) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
is_mem_ta1 (string_list1) (string2) = mem (string2) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: is_mem_ta1 (("ylp"::("brf"::(Nil)))) ("yfh") = mem ("yfh") ((Nil))
Prop: is_mem_ta1 ((Nil)) ("cav") = mem ("cav") ((Nil))
Prop: is_mem_ta1 ((Nil)) ("uhu") = mem ("uhu") (("nxp"::("szv"::(Nil))))
Lemma List
forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list2)
End of Lemma List


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
string_list2 : string list
Case1 : mem (string1) (string_list2) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
is_mem_ta1 (string_list1) (string2) = mem (string2) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 688


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
string_list2 : string list
Case1 : mem (string1) (string_list2) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
is_mem_ta1 (string_list1) (string2) = mem (string2) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list2)(rank : 0.)


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list2)

---------------------------------------
forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list2)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction string_list1(rank:10.)
=================================================
Progress: 689


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list2)

---------------------------------------
forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list2)

0 goal(s) more...

3 conjecture(s) more...
>>> induction string_list1(rank : 10.)


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list2)
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
forall (string1:string) (string_list2:string list), is_mem_ta1 ((Nil)) (string1) = mem (string1) (string_list2)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 690


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list2)
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
forall (string1:string) (string_list2:string list), is_mem_ta1 ((Nil)) (string1) = mem (string1) (string_list2)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list2)
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
forall (string1:string) (string_list2:string list), false = mem (string1) (string_list2)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction string_list2(rank:11.)
=================================================
Progress: 691


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list2)
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
forall (string1:string) (string_list2:string list), false = mem (string1) (string_list2)

1 goal(s) more...

3 conjecture(s) more...
>>> induction string_list2(rank : 11.)


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
Base2 : string_list2 = (Nil)
---------------------------------------
forall (string1:string), false = mem (string1) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 692


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
Base2 : string_list2 = (Nil)
---------------------------------------
forall (string1:string), false = mem (string1) ((Nil))

2 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = mem (string1) (string_list3)
Inductive1 : string_list2 = (string2::string_list3)
---------------------------------------
forall (string1:string), false = mem (string1) ((string2::string_list3))

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 693


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = mem (string1) (string_list3)
Inductive1 : string_list2 = (string2::string_list3)
---------------------------------------
forall (string1:string), false = mem (string1) ((string2::string_list3))

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = mem (string1) (string_list3)
Inductive1 : string_list2 = (string2::string_list3)
---------------------------------------
forall (string1:string), false = if string_eq (string2) (string1) then true else mem (string1) (string_list3)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:10.)
=================================================
Progress: 694


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = mem (string1) (string_list3)
Inductive1 : string_list2 = (string2::string_list3)
---------------------------------------
forall (string1:string), false = if string_eq (string2) (string1) then true else mem (string1) (string_list3)

1 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 10.)


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = mem (string1) (string_list3)
Inductive1 : string_list2 = (string2::string_list3)
string1 : string
---------------------------------------
false = if string_eq (string2) (string1) then true else mem (string1) (string_list3)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case string_eq (string2) (string1)(rank:11.)
rewrite <- IH1 in goal at 0(rank:18.)
=================================================
Progress: 695


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = mem (string1) (string_list3)
Inductive1 : string_list2 = (string2::string_list3)
string1 : string
---------------------------------------
false = if string_eq (string2) (string1) then true else mem (string1) (string_list3)

1 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 11.)


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = mem (string1) (string_list3)
Inductive1 : string_list2 = (string2::string_list3)
string1 : string
Case1 : string_eq (string2) (string1) = true
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 1(rank:11.)
=================================================
Progress: 696


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = mem (string1) (string_list3)
Inductive1 : string_list2 = (string2::string_list3)
string1 : string
Case1 : string_eq (string2) (string1) = true
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 1(rank : 11.)


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = mem (string1) (string_list3)
Inductive1 : string_list2 = (string2::string_list3)
string1 : string
Case1 : string2 = string1
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 697


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = mem (string1) (string_list3)
Inductive1 : string_list2 = (string2::string_list3)
string1 : string
---------------------------------------
false = if string_eq (string2) (string1) then true else mem (string1) (string_list3)

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = mem (string1) (string_list3)
Inductive1 : string_list2 = (string2::string_list3)
string1 : string
---------------------------------------
false = if string_eq (string2) (string1) then true else false

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string1)(rank:11.)
=================================================
Progress: 698


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = mem (string1) (string_list3)
Inductive1 : string_list2 = (string2::string_list3)
string1 : string
---------------------------------------
false = if string_eq (string2) (string1) then true else false

1 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 11.)


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = mem (string1) (string_list3)
Inductive1 : string_list2 = (string2::string_list3)
string1 : string
Case1 : string_eq (string2) (string1) = true
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 1(rank:11.)
=================================================
Progress: 699


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = mem (string1) (string_list3)
Inductive1 : string_list2 = (string2::string_list3)
string1 : string
Case1 : string_eq (string2) (string1) = true
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 1(rank : 11.)


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = mem (string1) (string_list3)
Inductive1 : string_list2 = (string2::string_list3)
string1 : string
Case1 : string2 = string1
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 700


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string2) (string_list1) = true

3 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 22.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string2) (string_list1) = mem (string1) (string_list1)

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:22.)
rewrite lemma3 in goal at 0(rank:30.)
rewrite lemma3 in goal at 1(rank:30.)
rewrite lemma3 in goal at 2(rank:30.)
=================================================
Progress: 701


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string2) = true

3 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 22.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string2) = mem (string1) (string_list1)

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
rewrite lemma3 in goal at 0(rank:22.)
rewrite Case1 in goal at 0(rank:30.)
rewrite <- lemma3 in goal at 0(rank:22.)
=================================================
Progress: 702


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string2) = true

3 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- lemma3 in goal at 0(rank : 22.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string2) (string_list1) = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite <- lemma3 in goal at 0
validate generalize_common_subterm_goal
Prop: mem ("beg") (("xcc"::(Nil))) = true
Prop: mem ("mah") (("fup"::("jkg"::(Nil)))) = true
Prop: mem ("gcy") ((Nil)) = true
asdf
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
validate generalize_common_subterm_goal
Prop: is_mem_ta1 ((Nil)) ("wwd") = true
Prop: is_mem_ta1 (("zpb"::(Nil))) ("wob") = true
Prop: is_mem_ta1 (("rqh"::(Nil))) ("tgo") = true
asdf
previous tactics
simpl in goal
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
Prop: is_mem_ta1 ((Nil)) ("grl") = true
Prop: is_mem_ta1 ((Nil)) ("epv") = true
Prop: is_mem_ta1 (("qpg"::(Nil))) ("ofm") = true
asdf
=================================================
Progress: 703


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string2) = true

3 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 22.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string2) = mem (string1) (string_list1)

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
rewrite lemma3 in goal at 0(rank:22.)
rewrite Case1 in goal at 0(rank:30.)
rewrite <- lemma3 in goal at 0(rank:22.)
=================================================
Progress: 704


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string2) = true

3 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- lemma3 in goal at 0(rank : 22.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string2) (string_list1) = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite <- lemma3 in goal at 0
validate generalize_common_subterm_goal
Prop: mem ("wak") ((Nil)) = true
Prop: mem ("bie") ((Nil)) = true
Prop: mem ("rhc") ((Nil)) = true
asdf
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
validate generalize_common_subterm_goal
Prop: is_mem_ta1 (("jvf"::(Nil))) ("eyc") = true
Prop: is_mem_ta1 ((Nil)) ("asm") = true
Prop: is_mem_ta1 ((Nil)) ("wrb") = true
asdf
previous tactics
simpl in goal
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
Prop: is_mem_ta1 (("gzk"::(Nil))) ("jws") = true
Prop: is_mem_ta1 ((Nil)) ("yov") = true
Prop: is_mem_ta1 ((Nil)) ("prf") = true
asdf
=================================================
Progress: 705


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string1) (string_list1) = true

3 goal(s) more...

4 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 22.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13.)
=================================================
Progress: 706


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
mem (string2) (string_list1) = is_mem_ta1 (string_list1) (string2)

2 goal(s) more...

4 conjecture(s) more...
Deduplication: 7
Tactic List : 2
rewrite lemma3 in goal at 0(rank:21.)
rewrite <- lemma3 in goal at 0(rank:21.)
=================================================
Progress: 707


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
mem (string2) (string_list1) = is_mem_ta1 (string_list1) (string2)

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 21.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12.)
=================================================
Progress: 708


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)

2 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check_ta1 (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
sub_check (P (string2) (lambda2)) (string_list1) = sub_check_ta1 (P (string2) (lambda2)) ((string1::string_list1))

1 goal(s) more...

4 conjecture(s) more...
Deduplication: 13
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 709


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check_ta1 (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
sub_check (P (string2) (lambda2)) (string_list1) = sub_check_ta1 (P (string2) (lambda2)) ((string1::string_list1))

1 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check_ta1 (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1)) = sub_check_ta1 (lambda2) ((string2::(string1::string_list1)))

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
case mem (string2) (string_list1)(rank:13.)
rewrite IH1 in goal at 0(rank:28.)
rewrite lemma3 in goal at 0(rank:28.)
=================================================
Progress: 710


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check_ta1 (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1)) = sub_check_ta1 (lambda2) ((string2::(string1::string_list1)))

1 goal(s) more...

4 conjecture(s) more...
>>> case mem (string2) (string_list1)(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check_ta1 (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check_ta1 (lambda2) ((string2::(string1::string_list1)))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:13.)
=================================================
Progress: 711


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check_ta1 (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check_ta1 (lambda2) ((string2::(string1::string_list1)))

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check_ta1 (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) ((string2::(string1::string_list1)))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case mem (string2) (string_list1)
rewrite IH1 in goal at 0
Prop: sub_check_ta1 (V ("rwl")) (("aoz"::("oeo"::(Nil)))) = sub_check_ta1 (V ("rwl")) (("nvp"::("aoz"::("oeo"::(Nil)))))
Prop: sub_check_ta1 (V ("jfa")) ((Nil)) = sub_check_ta1 (V ("jfa")) (("efj"::(Nil)))
Prop: sub_check_ta1 (V ("nrb")) ((Nil)) = sub_check_ta1 (V ("nrb")) (("gvm"::(Nil)))
previous tactics
simpl in goal
case mem (string2) (string_list1)
parent
(string2::(string1::string_list1))
lower
Cons(_, Cons(string1, string_list1))
upper
sub_check_ta1(lambda2, _)
remove upper
Cons(string1, string_list1)
remove lower
Cons(string1, string_list1)
remove upper
Cons(string2, Cons(string1, string_list1))
remove lower
Cons(string2, Cons(string1, string_list1))
remove upper
Cons(string3, Cons(string2, Cons(string1, string_list1)))
remove lower
Cons(string3, Cons(string2, Cons(string1, string_list1)))
remove upper
Cons(string4, Cons(string3, Cons(string2, Cons(string1, string_list1))))
remove lower
Cons(string4, Cons(string3, Cons(string2, Cons(string1, string_list1))))
validate generalize_common_subterm_goal
Prop: sub_check (V ("tps")) (("jgn"::(Nil))) = sub_check_ta1 (V ("tps")) (("bkb"::("kkp"::("jgn"::(Nil)))))
Prop: sub_check (V ("yxb")) ((Nil)) = sub_check_ta1 (V ("yxb")) (("rvy"::("mqi"::(Nil))))
Prop: sub_check (V ("btk")) ((Nil)) = sub_check_ta1 (V ("btk")) (("hkw"::("tza"::(Nil))))
Lemma List
forall (string_list1:string list) (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check_ta1 (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) ((string2::(string1::string_list1)))

2 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 712


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check_ta1 (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) ((string2::(string1::string_list1)))

2 goal(s) more...

4 conjecture(s) more...
>>> assert forall (string_list1:string list) (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))(rank : 0.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))

---------------------------------------
forall (string_list1:string list) (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:15.)
=================================================
Progress: 713


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))

---------------------------------------
forall (string_list1:string list) (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))

0 goal(s) more...

5 conjecture(s) more...
>>> induction lambda1(rank : 15.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string_list1:string list) (string1:string), sub_check_ta1 (V (string2)) (string_list1) = sub_check_ta1 (V (string2)) ((string1::string_list1))

2 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:15.)
=================================================
Progress: 714


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string_list1:string list) (string1:string), sub_check_ta1 (V (string2)) (string_list1) = sub_check_ta1 (V (string2)) ((string1::string_list1))

2 goal(s) more...

5 conjecture(s) more...
>>> simpl in goal(rank : 15.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string_list1:string list) (string1:string), is_mem_ta1 (string_list1) (string2) = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)

2 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro string1(rank:15.)
=================================================
Progress: 715


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string_list1:string list) (string1:string), is_mem_ta1 (string_list1) (string2) = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)

2 goal(s) more...

5 conjecture(s) more...
>>> intro string1(rank : 15.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
forall (string_list1:string list), is_mem_ta1 (string_list1) (string2) = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)

2 goal(s) more...

5 conjecture(s) more...
Tactic List : 4
case string_eq (string1) (string2)(rank:16.)
rewrite <- lemma3 in goal at 2(rank:31.)
rewrite <- lemma3 in goal at 0(rank:31.)
rewrite <- lemma3 in goal at 1(rank:31.)
=================================================
Progress: 716


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
forall (string_list1:string list), is_mem_ta1 (string_list1) (string2) = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)

2 goal(s) more...

5 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 16.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string_eq (string1) (string2) = true
---------------------------------------
forall (string_list1:string list), is_mem_ta1 (string_list1) (string2) = true

3 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 1(rank:16.)
=================================================
Progress: 717


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string_eq (string1) (string2) = true
---------------------------------------
forall (string_list1:string list), is_mem_ta1 (string_list1) (string2) = true

3 goal(s) more...

5 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 1(rank : 16.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
---------------------------------------
forall (string_list1:string list), is_mem_ta1 (string_list1) (string2) = true

3 goal(s) more...

5 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:16.)
induction string_list1(rank:25.)
rewrite <- lemma3 in goal at 0(rank:24.)
=================================================
Progress: 718


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
---------------------------------------
forall (string_list1:string list), is_mem_ta1 (string_list1) (string2) = true

3 goal(s) more...

5 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 16.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
---------------------------------------
forall (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true

3 goal(s) more...

5 conjecture(s) more...
Tactic List : 2
rewrite <- lemma3 in goal at 0(rank:24.)
induction string_list1(rank:25.)
=================================================
Progress: 719


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string1) = true

3 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 22.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
rewrite lemma3 in goal at 0(rank:22.)
rewrite <- lemma3 in goal at 0(rank:22.)
=================================================
Progress: 720


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string1) = true

3 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- lemma3 in goal at 0(rank : 22.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string1) (string_list1) = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:14.)
=================================================
Progress: 721


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string1) (string_list1) = true

3 goal(s) more...

4 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 14.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13.)
=================================================
Progress: 722


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)

2 goal(s) more...

4 conjecture(s) more...
Deduplication: 5
Tactic List : 1
reflexivity(rank:12.)
=================================================
Progress: 723


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)

2 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (string_list1) = sub_check_ta1 (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
sub_check_ta1 (P (string2) (lambda2)) (string_list1) = sub_check_ta1 (P (string2) (lambda2)) ((string1::string_list1))

1 goal(s) more...

4 conjecture(s) more...
Deduplication: 4
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 724


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (string_list1) = sub_check_ta1 (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
sub_check_ta1 (P (string2) (lambda2)) (string_list1) = sub_check_ta1 (P (string2) (lambda2)) ((string1::string_list1))

1 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (string_list1) = sub_check_ta1 (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) ((string2::string_list1)) = sub_check_ta1 (lambda2) ((string2::(string1::string_list1)))

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
parent
(string2::string_list1)
lower
Cons(_, string_list1)
upper
sub_check_ta1(lambda2, _)
remove upper
string_list1
remove lower
string_list1
remove upper
Cons(string2, string_list1)
remove lower
Cons(string2, string_list1)
remove upper
Cons(string3, Cons(string2, string_list1))
remove lower
Cons(string3, Cons(string2, string_list1))
remove upper
Cons(string4, Cons(string3, Cons(string2, string_list1)))
remove lower
Cons(string4, Cons(string3, Cons(string2, string_list1)))
parent
(string2::(string1::string_list1))
lower
Cons(_, Cons(string1, string_list1))
upper
sub_check_ta1(lambda2, _)
remove upper
Cons(string1, string_list1)
remove lower
Cons(string1, string_list1)
remove upper
Cons(string2, Cons(string1, string_list1))
remove lower
Cons(string2, Cons(string1, string_list1))
remove upper
Cons(string3, Cons(string2, Cons(string1, string_list1)))
remove lower
Cons(string3, Cons(string2, Cons(string1, string_list1)))
remove upper
Cons(string4, Cons(string3, Cons(string2, Cons(string1, string_list1))))
remove lower
Cons(string4, Cons(string3, Cons(string2, Cons(string1, string_list1))))
New Env
let rec mk_lhs1 arg_22 arg_23 =
match (arg_22) with
| Nil -> arg_23
| Cons hd tl -> (hd::mk_lhs1 (tl) (arg_23))
;;
let rec mk_rhs1 arg_24 arg_25 arg_26 =
match (arg_24) with
| Nil -> (arg_25::arg_26)
| Cons hd tl -> (hd::mk_rhs1 (tl) (arg_25) (arg_26))
;;
Lemma List
forall (string_list1:string list), mk_lhs1 ((Nil)) (string_list1) = string_list1
forall (string1:string) (string_list1:string list) (string_list2:string list), mk_lhs1 ((string1::string_list1)) (string_list2) = (string1::mk_lhs1 (string_list1) (string_list2))
forall (string1:string) (string_list1:string list), mk_rhs1 ((Nil)) (string1) (string_list1) = (string1::string_list1)
forall (string1:string) (string_list1:string list) (string2:string) (string_list2:string list), mk_rhs1 ((string1::string_list1)) (string2) (string_list2) = (string1::mk_rhs1 (string_list1) (string2) (string_list2))
forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (string_list1) = sub_check_ta1 (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) ((string2::string_list1)) = sub_check_ta1 (lambda2) ((string2::(string1::string_list1)))

1 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 725


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (string_list1) = sub_check_ta1 (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) ((string2::string_list1)) = sub_check_ta1 (lambda2) ((string2::(string1::string_list1)))

1 goal(s) more...

4 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))(rank : 0.)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro string1(rank:13.)
=================================================
Progress: 726


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
>>> intro string1(rank : 13.)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro string_list2(rank:13.)
=================================================
Progress: 727


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
>>> intro string_list2(rank : 13.)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:13.)
=================================================
Progress: 728


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
>>> intro Cond1(rank : 13.)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 4
rewrite <- lhs_lemma4 in goal at 1(rank:21.)
induction lambda1(rank:23.)
rewrite <- lhs_lemma4 in goal at 2(rank:21.)
rewrite <- lhs_lemma4 in goal at 3(rank:21.)
=================================================
Progress: 729


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
>>> rewrite <- lhs_lemma4 in goal at 1(rank : 21.)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (string_list1) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
rewrite <- lhs_lemma4 in goal at 2(rank:13.)
=================================================
Progress: 730


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (string_list1) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
>>> rewrite <- lhs_lemma4 in goal at 2(rank : 13.)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (string_list1) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("zxn")) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 ((Nil)) ((Nil)))) = sub_check_ta1 (V ("zxn")) (mk_rhs1 ((Nil)) ("mrl") ((Nil)))
Prop: sub_check_ta1 (V ("dkx")) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 ((Nil)) ((Nil)))) = sub_check_ta1 (V ("dkx")) (mk_rhs1 ((Nil)) ("rij") ((Nil)))
Prop: sub_check_ta1 (V ("kxm")) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 ((Nil)) ((Nil)))) = sub_check_ta1 (V ("kxm")) (mk_rhs1 ((Nil)) ("wuf") ((Nil)))
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("ubl")) (mk_lhs1 ((Nil)) (mk_lhs1 ((Nil)) ((Nil)))) = sub_check_ta1 (V ("ubl")) (mk_rhs1 ((Nil)) ("scz") ((Nil)))
Prop: sub_check_ta1 (C (V ("mkw")) (C (V ("kzq")) (V ("xdt")))) (mk_lhs1 ((Nil)) (mk_lhs1 ((Nil)) ((Nil)))) = sub_check_ta1 (C (V ("mkw")) (C (V ("kzq")) (V ("xdt")))) (mk_rhs1 ((Nil)) ("rpx") ((Nil)))
Prop: sub_check_ta1 (V ("wqj")) (mk_lhs1 ((Nil)) (mk_lhs1 (("dmk"::("jux"::("ecl"::("vta"::(Nil)))))) ((Nil)))) = sub_check_ta1 (V ("wqj")) (mk_rhs1 (("dmk"::("jux"::("ecl"::("vta"::(Nil)))))) ("msw") ((Nil)))
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("wrc")) (mk_lhs1 ((Nil)) ((Nil))) = sub_check_ta1 (V ("wrc")) (mk_rhs1 ((Nil)) ("byo") ((Nil)))
Prop: sub_check_ta1 (C (P ("jfj") (V ("den"))) (V ("tcq"))) (mk_lhs1 ((Nil)) ((Nil))) = sub_check_ta1 (C (P ("jfj") (V ("den"))) (V ("tcq"))) (mk_rhs1 ((Nil)) ("csx") ((Nil)))
Prop: sub_check_ta1 (V ("dbu")) (mk_lhs1 ((Nil)) ((Nil))) = sub_check_ta1 (V ("dbu")) (mk_rhs1 ((Nil)) ("dfc") ((Nil)))
Lemma List
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
Lemma List
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (string_list1) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (string_list1) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
Lemma List
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (string_list1) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (string_list1) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
=================================================
Progress: 731


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro string1(rank:15.)
=================================================
Progress: 732


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (string_list1) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (string_list1) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (string_list1) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (string_list1) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:15.)
=================================================
Progress: 733


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (string_list1) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (string_list1) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (string_list1) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (string_list1) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:15.)
=================================================
Progress: 734


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
>>> intro string1(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro string_list2(rank:15.)
=================================================
Progress: 735


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (string_list1) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (string_list1) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
>>> simpl in goal(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (string_list1) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro string1(rank:15.)
=================================================
Progress: 736


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (string_list1) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (string_list1) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
>>> simpl in goal(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (string_list1) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro string1(rank:15.)
=================================================
Progress: 737


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
>>> intro string_list2(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:15.)
=================================================
Progress: 738


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (string_list1) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
>>> intro string1(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (string_list1) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro string_list2(rank:15.)
=================================================
Progress: 739


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (string_list1) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
>>> intro string1(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (string_list1) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro string_list2(rank:15.)
=================================================
Progress: 740


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
>>> intro Cond1(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 4
rewrite <- lhs_lemma4 in goal at 1(rank:23.)
induction lambda1(rank:25.)
rewrite <- lhs_lemma4 in goal at 2(rank:23.)
rewrite <- lhs_lemma4 in goal at 3(rank:23.)
=================================================
Progress: 741


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (string_list1) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
>>> intro string_list2(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (string_list1) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:15.)
=================================================
Progress: 742


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (string_list1) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
>>> intro string_list2(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (string_list1) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:15.)
=================================================
Progress: 743


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (string_list1) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
>>> intro Cond1(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (string_list1) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 4
rewrite <- lhs_lemma4 in goal at 1(rank:23.)
induction lambda1(rank:25.)
rewrite <- lhs_lemma4 in goal at 2(rank:23.)
rewrite <- lhs_lemma4 in goal at 3(rank:23.)
=================================================
Progress: 744


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (string_list1) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
>>> intro Cond1(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (string_list1) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 4
rewrite <- lhs_lemma4 in goal at 1(rank:23.)
induction lambda1(rank:25.)
rewrite <- lhs_lemma4 in goal at 2(rank:23.)
rewrite <- lhs_lemma4 in goal at 3(rank:23.)
=================================================
Progress: 745


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
>>> rewrite <- lhs_lemma4 in goal at 2(rank : 21.)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 2
rewrite <- lhs_lemma4 in goal at 1(rank:21.)
rewrite <- lhs_lemma4 in goal at 3(rank:21.)
=================================================
Progress: 746


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
>>> rewrite <- lhs_lemma4 in goal at 3(rank : 21.)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (mk_lhs1 ((Nil)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 2
rewrite <- lhs_lemma4 in goal at 1(rank:21.)
rewrite <- lhs_lemma4 in goal at 2(rank:21.)
=================================================
Progress: 747


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
>>> rewrite <- lhs_lemma4 in goal at 1(rank : 21.)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
rewrite <- lhs_lemma4 in goal at 2(rank:13.)
=================================================
Progress: 748


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
>>> rewrite <- lhs_lemma4 in goal at 2(rank : 13.)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("ame")) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) ((Nil)))) = sub_check_ta1 (V ("ame")) (mk_rhs1 ((Nil)) ("boq") ((Nil)))
Prop: sub_check_ta1 (V ("bmr")) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (mk_lhs1 ((Nil)) (("vlc"::(Nil)))) (("ude"::(Nil))))) = sub_check_ta1 (V ("bmr")) (mk_rhs1 (("vlc"::(Nil))) ("vsm") (("ude"::(Nil))))
Prop: sub_check_ta1 (C (V ("kae")) (C (V ("uro")) (V ("vpm")))) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) ((Nil)))) = sub_check_ta1 (C (V ("kae")) (C (V ("uro")) (V ("vpm")))) (mk_rhs1 ((Nil)) ("bxs") ((Nil)))
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("kjl")) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 ((Nil)) (("ubn"::(Nil)))) ((Nil)))) = sub_check_ta1 (V ("kjl")) (mk_rhs1 (("ubn"::(Nil))) ("wxx") ((Nil)))
Prop: sub_check_ta1 (P ("mkr") (V ("uyh"))) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (("qpy"::("zzw"::(Nil)))))) = sub_check_ta1 (P ("mkr") (V ("uyh"))) (mk_rhs1 ((Nil)) ("aow") (("qpy"::("zzw"::(Nil)))))
Prop: sub_check_ta1 (V ("xyy")) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (("fns"::("djp"::(Nil)))))) = sub_check_ta1 (V ("xyy")) (mk_rhs1 ((Nil)) ("pns") (("fns"::("djp"::(Nil)))))
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("rbl")) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (("cjq"::(Nil)))) = sub_check_ta1 (V ("rbl")) (mk_rhs1 ((Nil)) ("are") (("cjq"::(Nil))))
Prop: sub_check_ta1 (V ("wfq")) (mk_lhs1 (mk_lhs1 ((Nil)) (("zrc"::(Nil)))) ((Nil))) = sub_check_ta1 (V ("wfq")) (mk_rhs1 (("zrc"::(Nil))) ("kva") ((Nil)))
Prop: sub_check_ta1 (V ("nph")) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) ((Nil))) = sub_check_ta1 (V ("nph")) (mk_rhs1 ((Nil)) ("lfc") ((Nil)))
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (P ("dbw") (P ("odg") (P ("stn") (V ("sen"))))) (mk_lhs1 ((Nil)) ((Nil))) = sub_check_ta1 (P ("dbw") (P ("odg") (P ("stn") (V ("sen"))))) (mk_rhs1 ((Nil)) ("hvu") ((Nil)))
Prop: sub_check_ta1 (V ("yex")) (mk_lhs1 (("wwo"::("lgg"::(Nil)))) (("svc"::(Nil)))) = sub_check_ta1 (V ("yex")) (mk_rhs1 (("wwo"::("lgg"::(Nil)))) ("czm") (("svc"::(Nil))))
Prop: sub_check_ta1 (V ("eee")) (mk_lhs1 ((Nil)) ((Nil))) = sub_check_ta1 (V ("eee")) (mk_rhs1 ((Nil)) ("yrm") ((Nil)))
Lemma List
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
Lemma List
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
Lemma List
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
=================================================
Progress: 749


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:15.)
=================================================
Progress: 750


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:15.)
=================================================
Progress: 751


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:15.)
=================================================
Progress: 752


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
>>> simpl in goal(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro string1(rank:15.)
=================================================
Progress: 753


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
>>> simpl in goal(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro string1(rank:15.)
=================================================
Progress: 754


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
>>> simpl in goal(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro string1(rank:15.)
=================================================
Progress: 755


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
>>> intro string1(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro string_list2(rank:15.)
=================================================
Progress: 756


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
>>> intro string1(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro string_list2(rank:15.)
=================================================
Progress: 757


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
>>> intro string1(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro string_list2(rank:15.)
=================================================
Progress: 758


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
>>> intro string_list2(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:15.)
=================================================
Progress: 759


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
>>> intro string_list2(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:15.)
=================================================
Progress: 760


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
>>> intro string_list2(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:15.)
=================================================
Progress: 761


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
>>> intro Cond1(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 4
rewrite <- lhs_lemma4 in goal at 1(rank:23.)
induction lambda1(rank:25.)
rewrite <- lhs_lemma4 in goal at 2(rank:23.)
rewrite <- lhs_lemma4 in goal at 3(rank:23.)
=================================================
Progress: 762


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
>>> intro Cond1(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 4
rewrite <- lhs_lemma4 in goal at 1(rank:23.)
induction lambda1(rank:25.)
rewrite <- lhs_lemma4 in goal at 2(rank:23.)
rewrite <- lhs_lemma4 in goal at 3(rank:23.)
=================================================
Progress: 763


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
>>> intro Cond1(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 4
rewrite <- lhs_lemma4 in goal at 1(rank:23.)
induction lambda1(rank:25.)
rewrite <- lhs_lemma4 in goal at 2(rank:23.)
rewrite <- lhs_lemma4 in goal at 3(rank:23.)
=================================================
Progress: 764


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
>>> rewrite <- lhs_lemma4 in goal at 3(rank : 21.)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
rewrite <- lhs_lemma4 in goal at 1(rank:13.)
=================================================
Progress: 765


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
>>> rewrite <- lhs_lemma4 in goal at 1(rank : 13.)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (C (V ("qiz")) (V ("xrl"))) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (("usj"::(Nil)))) ((Nil)))) = sub_check_ta1 (C (V ("qiz")) (V ("xrl"))) (mk_rhs1 (("usj"::(Nil))) ("vlg") ((Nil)))
Prop: sub_check_ta1 (V ("vwb")) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) ((Nil))) (("may"::("lqi"::(Nil)))))) = sub_check_ta1 (V ("vwb")) (mk_rhs1 ((Nil)) ("cyn") (("may"::("lqi"::(Nil)))))
Prop: sub_check_ta1 (V ("cft")) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (("mdf"::(Nil)))) (("why"::(Nil))))) = sub_check_ta1 (V ("cft")) (mk_rhs1 (("mdf"::(Nil))) ("ywq") (("why"::(Nil))))
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("aty")) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) ((Nil))) ((Nil))) = sub_check_ta1 (V ("aty")) (mk_rhs1 ((Nil)) ("kuh") ((Nil)))
Prop: sub_check_ta1 (V ("xln")) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) ((Nil))) ((Nil))) = sub_check_ta1 (V ("xln")) (mk_rhs1 ((Nil)) ("ilp") ((Nil)))
Prop: sub_check_ta1 (C (C (V ("btt")) (V ("bvh"))) (V ("qrb"))) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) ((Nil))) ((Nil))) = sub_check_ta1 (C (C (V ("btt")) (V ("bvh"))) (V ("qrb"))) (mk_rhs1 ((Nil)) ("qkg") ((Nil)))
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("xkk")) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) ((Nil))) = sub_check_ta1 (V ("xkk")) (mk_rhs1 ((Nil)) ("tnt") ((Nil)))
Prop: sub_check_ta1 (C (V ("enb")) (C (V ("tiq")) (V ("aeh")))) (mk_lhs1 (mk_lhs1 ((Nil)) (("gzc"::(Nil)))) ((Nil))) = sub_check_ta1 (C (V ("enb")) (C (V ("tiq")) (V ("aeh")))) (mk_rhs1 (("gzc"::(Nil))) ("smm") ((Nil)))
Prop: sub_check_ta1 (C (V ("emu")) (V ("hls"))) (mk_lhs1 (mk_lhs1 ((Nil)) (("mzs"::("uhr"::(Nil))))) ((Nil))) = sub_check_ta1 (C (V ("emu")) (V ("hls"))) (mk_rhs1 (("mzs"::("uhr"::(Nil)))) ("cou") ((Nil)))
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("gel")) (mk_lhs1 ((Nil)) ((Nil))) = sub_check_ta1 (V ("gel")) (mk_rhs1 ((Nil)) ("vnx") ((Nil)))
Prop: sub_check_ta1 (V ("tin")) (mk_lhs1 ((Nil)) (("gcd"::(Nil)))) = sub_check_ta1 (V ("tin")) (mk_rhs1 ((Nil)) ("fqq") (("gcd"::(Nil))))
Prop: sub_check_ta1 (C (C (V ("zuy")) (V ("los"))) (V ("kdp"))) (mk_lhs1 (("zrm"::(Nil))) (("aiu"::(Nil)))) = sub_check_ta1 (C (C (V ("zuy")) (V ("los"))) (V ("kdp"))) (mk_rhs1 (("zrm"::(Nil))) ("qel") (("aiu"::(Nil))))
Lemma List
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
Lemma List
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
=================================================
Progress: 766


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:15.)
=================================================
Progress: 767


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:15.)
=================================================
Progress: 768


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
>>> simpl in goal(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro string1(rank:15.)
=================================================
Progress: 769


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
>>> simpl in goal(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro string1(rank:15.)
=================================================
Progress: 770


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
>>> intro string1(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro string_list2(rank:15.)
=================================================
Progress: 771


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
>>> intro string1(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro string_list2(rank:15.)
=================================================
Progress: 772


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
>>> intro string_list2(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:15.)
=================================================
Progress: 773


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
>>> intro string_list2(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:15.)
=================================================
Progress: 774


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
>>> intro Cond1(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 4
rewrite <- lhs_lemma4 in goal at 1(rank:23.)
induction lambda1(rank:25.)
rewrite <- lhs_lemma4 in goal at 2(rank:23.)
rewrite <- lhs_lemma4 in goal at 3(rank:23.)
=================================================
Progress: 775


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
>>> intro Cond1(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 4
rewrite <- lhs_lemma4 in goal at 1(rank:23.)
induction lambda1(rank:25.)
rewrite <- lhs_lemma4 in goal at 2(rank:23.)
rewrite <- lhs_lemma4 in goal at 3(rank:23.)
=================================================
Progress: 776


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (mk_lhs1 ((Nil)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
>>> rewrite <- lhs_lemma4 in goal at 1(rank : 21.)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (string_list1) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
rewrite <- lhs_lemma4 in goal at 2(rank:13.)
=================================================
Progress: 777


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (string_list1) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
>>> rewrite <- lhs_lemma4 in goal at 2(rank : 13.)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (string_list1) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("exy")) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 ((Nil)) (mk_lhs1 ((Nil)) (("lir"::(Nil)))))) = sub_check_ta1 (V ("exy")) (mk_rhs1 ((Nil)) ("nqn") (("lir"::(Nil))))
Prop: sub_check_ta1 (C (V ("vwn")) (V ("xot"))) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (("pqa"::(Nil))) (mk_lhs1 ((Nil)) (("ocx"::(Nil)))))) = sub_check_ta1 (C (V ("vwn")) (V ("xot"))) (mk_rhs1 (("pqa"::(Nil))) ("euh") (("ocx"::(Nil))))
Prop: sub_check_ta1 (V ("byn")) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 ((Nil)) (mk_lhs1 ((Nil)) ((Nil))))) = sub_check_ta1 (V ("byn")) (mk_rhs1 ((Nil)) ("arr") ((Nil)))
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("wlj")) (mk_lhs1 ((Nil)) (mk_lhs1 (("dsd"::("oor"::(Nil)))) (mk_lhs1 ((Nil)) ((Nil))))) = sub_check_ta1 (V ("wlj")) (mk_rhs1 (("dsd"::("oor"::(Nil)))) ("rni") ((Nil)))
Prop: sub_check_ta1 (V ("rag")) (mk_lhs1 ((Nil)) (mk_lhs1 ((Nil)) (mk_lhs1 ((Nil)) (("cgo"::(Nil)))))) = sub_check_ta1 (V ("rag")) (mk_rhs1 ((Nil)) ("vdj") (("cgo"::(Nil))))
Prop: sub_check_ta1 (P ("ikq") (V ("rdw"))) (mk_lhs1 ((Nil)) (mk_lhs1 (("dik"::(Nil))) (mk_lhs1 ((Nil)) ((Nil))))) = sub_check_ta1 (P ("ikq") (V ("rdw"))) (mk_rhs1 (("dik"::(Nil))) ("yaj") ((Nil)))
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("wqb")) (mk_lhs1 (("sxm"::("obv"::(Nil)))) (mk_lhs1 ((Nil)) ((Nil)))) = sub_check_ta1 (V ("wqb")) (mk_rhs1 (("sxm"::("obv"::(Nil)))) ("tgf") ((Nil)))
Prop: sub_check_ta1 (V ("kfu")) (mk_lhs1 ((Nil)) (mk_lhs1 ((Nil)) (("cvl"::("mbe"::("nfu"::(Nil))))))) = sub_check_ta1 (V ("kfu")) (mk_rhs1 ((Nil)) ("nsf") (("cvl"::("mbe"::("nfu"::(Nil))))))
Prop: sub_check_ta1 (V ("nbr")) (mk_lhs1 (("ghx"::(Nil))) (mk_lhs1 ((Nil)) ((Nil)))) = sub_check_ta1 (V ("nbr")) (mk_rhs1 (("ghx"::(Nil))) ("eec") ((Nil)))
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("lhb")) (mk_lhs1 ((Nil)) ((Nil))) = sub_check_ta1 (V ("lhb")) (mk_rhs1 ((Nil)) ("xao") ((Nil)))
Prop: sub_check_ta1 (V ("dxx")) (mk_lhs1 ((Nil)) (("xcf"::(Nil)))) = sub_check_ta1 (V ("dxx")) (mk_rhs1 ((Nil)) ("gst") (("xcf"::(Nil))))
Prop: sub_check_ta1 (V ("nai")) (mk_lhs1 ((Nil)) ((Nil))) = sub_check_ta1 (V ("nai")) (mk_rhs1 ((Nil)) ("dgp") ((Nil)))
Lemma List
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (mk_lhs1 ((Nil)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (mk_lhs1 ((Nil)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
Lemma List
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (string_list1) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (string_list1) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
Lemma List
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (string_list1) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (string_list1) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
=================================================
Progress: 778


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (mk_lhs1 ((Nil)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (mk_lhs1 ((Nil)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (mk_lhs1 ((Nil)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (mk_lhs1 ((Nil)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:15.)
=================================================
Progress: 779


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (string_list1) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (string_list1) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (string_list1) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (string_list1) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:15.)
=================================================
Progress: 780


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (string_list1) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (string_list1) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (string_list1) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (string_list1) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:15.)
=================================================
Progress: 781


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (mk_lhs1 ((Nil)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (mk_lhs1 ((Nil)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
>>> simpl in goal(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (mk_lhs1 ((Nil)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro string1(rank:15.)
=================================================
Progress: 782


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (string_list1) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (string_list1) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
>>> simpl in goal(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (string_list1) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro string1(rank:15.)
=================================================
Progress: 783


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (string_list1) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (string_list1) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
>>> simpl in goal(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (string_list1) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro string1(rank:15.)
=================================================
Progress: 784


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (mk_lhs1 ((Nil)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
>>> intro string1(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (mk_lhs1 ((Nil)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro string_list2(rank:15.)
=================================================
Progress: 785


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (string_list1) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
>>> intro string1(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (string_list1) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro string_list2(rank:15.)
=================================================
Progress: 786


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (string_list1) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
>>> intro string1(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (string_list1) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro string_list2(rank:15.)
=================================================
Progress: 787


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (mk_lhs1 ((Nil)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
>>> intro string_list2(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (mk_lhs1 ((Nil)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:15.)
=================================================
Progress: 788


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (string_list1) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
>>> intro string_list2(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (string_list1) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:15.)
=================================================
Progress: 789


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (string_list1) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
>>> intro string_list2(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (string_list1) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:15.)
=================================================
Progress: 790


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (mk_lhs1 ((Nil)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
>>> intro Cond1(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (mk_lhs1 ((Nil)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 4
rewrite <- lhs_lemma4 in goal at 1(rank:23.)
induction lambda1(rank:25.)
rewrite <- lhs_lemma4 in goal at 2(rank:23.)
rewrite <- lhs_lemma4 in goal at 3(rank:23.)
=================================================
Progress: 791


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (string_list1) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
>>> intro Cond1(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (string_list1) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 4
rewrite <- lhs_lemma4 in goal at 1(rank:23.)
induction lambda1(rank:25.)
rewrite <- lhs_lemma4 in goal at 2(rank:23.)
rewrite <- lhs_lemma4 in goal at 3(rank:23.)
=================================================
Progress: 792


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (string_list1) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
>>> intro Cond1(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (string_list1) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 4
rewrite <- lhs_lemma4 in goal at 1(rank:23.)
induction lambda1(rank:25.)
rewrite <- lhs_lemma4 in goal at 2(rank:23.)
rewrite <- lhs_lemma4 in goal at 3(rank:23.)
=================================================
Progress: 793


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (mk_lhs1 ((Nil)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
>>> rewrite <- lhs_lemma4 in goal at 2(rank : 21.)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (mk_lhs1 ((Nil)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 2
rewrite <- lhs_lemma4 in goal at 1(rank:21.)
rewrite <- lhs_lemma4 in goal at 3(rank:21.)
=================================================
Progress: 794


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (mk_lhs1 ((Nil)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
>>> rewrite <- lhs_lemma4 in goal at 1(rank : 21.)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
rewrite <- lhs_lemma4 in goal at 2(rank:13.)
=================================================
Progress: 795


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
>>> rewrite <- lhs_lemma4 in goal at 2(rank : 13.)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("bep")) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (mk_lhs1 ((Nil)) (("bkz"::("qcs"::("wnv"::(Nil)))))) (mk_lhs1 ((Nil)) (("vab"::(Nil)))))) = sub_check_ta1 (V ("bep")) (mk_rhs1 (("bkz"::("qcs"::("wnv"::(Nil))))) ("gij") (("vab"::(Nil))))
Prop: sub_check_ta1 (V ("qmu")) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (mk_lhs1 ((Nil)) (("zzz"::(Nil)))) (mk_lhs1 ((Nil)) ((Nil))))) = sub_check_ta1 (V ("qmu")) (mk_rhs1 (("zzz"::(Nil))) ("lkp") ((Nil)))
Prop: sub_check_ta1 (V ("zvu")) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 ((Nil)) (("pyp"::(Nil)))))) = sub_check_ta1 (V ("zvu")) (mk_rhs1 ((Nil)) ("dym") (("pyp"::(Nil))))
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("ldw")) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 ((Nil)) (("qdg"::(Nil)))))) = sub_check_ta1 (V ("ldw")) (mk_rhs1 ((Nil)) ("qtj") (("qdg"::(Nil))))
Prop: sub_check_ta1 (P ("nqt") (V ("dtc"))) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 ((Nil)) ((Nil))))) = sub_check_ta1 (P ("nqt") (V ("dtc"))) (mk_rhs1 ((Nil)) ("etm") ((Nil)))
Prop: sub_check_ta1 (V ("jgr")) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 ((Nil)) ((Nil))))) = sub_check_ta1 (V ("jgr")) (mk_rhs1 ((Nil)) ("xoa") ((Nil)))
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (P ("gjs") (P ("dhk") (C (V ("pfn")) (V ("yol"))))) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 ((Nil)) ((Nil)))) = sub_check_ta1 (P ("gjs") (P ("dhk") (C (V ("pfn")) (V ("yol"))))) (mk_rhs1 ((Nil)) ("osx") ((Nil)))
Prop: sub_check_ta1 (P ("zan") (V ("mon"))) (mk_lhs1 (mk_lhs1 ((Nil)) (("wui"::(Nil)))) (mk_lhs1 ((Nil)) ((Nil)))) = sub_check_ta1 (P ("zan") (V ("mon"))) (mk_rhs1 (("wui"::(Nil))) ("irt") ((Nil)))
Prop: sub_check_ta1 (V ("emj")) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 ((Nil)) ((Nil)))) = sub_check_ta1 (V ("emj")) (mk_rhs1 ((Nil)) ("lvq") ((Nil)))
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("fuk")) (mk_lhs1 ((Nil)) (mk_lhs1 ((Nil)) ((Nil)))) = sub_check_ta1 (V ("fuk")) (mk_rhs1 ((Nil)) ("ehk") ((Nil)))
Prop: sub_check_ta1 (V ("jdv")) (mk_lhs1 ((Nil)) (mk_lhs1 ((Nil)) (("ckj"::(Nil))))) = sub_check_ta1 (V ("jdv")) (mk_rhs1 ((Nil)) ("kcc") (("ckj"::(Nil))))
Prop: sub_check_ta1 (C (V ("att")) (V ("enc"))) (mk_lhs1 ((Nil)) (mk_lhs1 ((Nil)) ((Nil)))) = sub_check_ta1 (C (V ("att")) (V ("enc"))) (mk_rhs1 ((Nil)) ("ctp") ((Nil)))
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("yui")) (mk_lhs1 (("gtz"::(Nil))) ((Nil))) = sub_check_ta1 (V ("yui")) (mk_rhs1 (("gtz"::(Nil))) ("wdf") ((Nil)))
Prop: sub_check_ta1 (C (V ("nnu")) (P ("dhk") (V ("vlw")))) (mk_lhs1 ((Nil)) ((Nil))) = sub_check_ta1 (C (V ("nnu")) (P ("dhk") (V ("vlw")))) (mk_rhs1 ((Nil)) ("bae") ((Nil)))
Prop: sub_check_ta1 (V ("oda")) (mk_lhs1 (("gdc"::("dzf"::(Nil)))) (("gwq"::("nti"::(Nil))))) = sub_check_ta1 (V ("oda")) (mk_rhs1 (("gdc"::("dzf"::(Nil)))) ("arq") (("gwq"::("nti"::(Nil)))))
Lemma List
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (mk_lhs1 ((Nil)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (mk_lhs1 ((Nil)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
Lemma List
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
Lemma List
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
=================================================
Progress: 796


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (mk_lhs1 ((Nil)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (mk_lhs1 ((Nil)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (mk_lhs1 ((Nil)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (mk_lhs1 ((Nil)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:15.)
=================================================
Progress: 797


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:15.)
=================================================
Progress: 798


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:15.)
=================================================
Progress: 799


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (mk_lhs1 ((Nil)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (mk_lhs1 ((Nil)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
>>> simpl in goal(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (mk_lhs1 ((Nil)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro string1(rank:15.)
=================================================
Progress: 800


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
>>> simpl in goal(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro string1(rank:15.)
=================================================
Progress: 801


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
>>> simpl in goal(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro string1(rank:15.)
=================================================
Progress: 802


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (mk_lhs1 ((Nil)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
>>> intro string1(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (mk_lhs1 ((Nil)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro string_list2(rank:15.)
=================================================
Progress: 803


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
>>> intro string1(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro string_list2(rank:15.)
=================================================
Progress: 804


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
>>> intro string1(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro string_list2(rank:15.)
=================================================
Progress: 805


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (mk_lhs1 ((Nil)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
>>> intro string_list2(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (mk_lhs1 ((Nil)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:15.)
=================================================
Progress: 806


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
>>> intro string_list2(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:15.)
=================================================
Progress: 807


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
>>> intro string_list2(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:15.)
=================================================
Progress: 808


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (mk_lhs1 ((Nil)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
>>> intro Cond1(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (mk_lhs1 ((Nil)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 4
rewrite <- lhs_lemma4 in goal at 1(rank:23.)
induction lambda1(rank:25.)
rewrite <- lhs_lemma4 in goal at 2(rank:23.)
rewrite <- lhs_lemma4 in goal at 3(rank:23.)
=================================================
Progress: 809


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
>>> intro Cond1(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 4
rewrite <- lhs_lemma4 in goal at 1(rank:23.)
induction lambda1(rank:25.)
rewrite <- lhs_lemma4 in goal at 2(rank:23.)
rewrite <- lhs_lemma4 in goal at 3(rank:23.)
=================================================
Progress: 810


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
>>> intro Cond1(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 4
rewrite <- lhs_lemma4 in goal at 1(rank:23.)
induction lambda1(rank:25.)
rewrite <- lhs_lemma4 in goal at 2(rank:23.)
rewrite <- lhs_lemma4 in goal at 3(rank:23.)
=================================================
Progress: 811


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 ((Nil)) (string_list1)) (mk_lhs1 ((Nil)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
>>> rewrite <- lhs_lemma4 in goal at 3(rank : 21.)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (mk_lhs1 ((Nil)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
rewrite <- lhs_lemma4 in goal at 1(rank:13.)
=================================================
Progress: 812


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (mk_lhs1 ((Nil)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
>>> rewrite <- lhs_lemma4 in goal at 1(rank : 13.)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("wrd")) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) ((Nil))) (mk_lhs1 ((Nil)) ((Nil))))) = sub_check_ta1 (V ("wrd")) (mk_rhs1 ((Nil)) ("oma") ((Nil)))
Prop: sub_check_ta1 (V ("tfb")) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (("kmf"::(Nil)))) (mk_lhs1 ((Nil)) ((Nil))))) = sub_check_ta1 (V ("tfb")) (mk_rhs1 (("kmf"::(Nil))) ("fjx") ((Nil)))
Prop: sub_check_ta1 (V ("lbu")) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) ((Nil))) (mk_lhs1 ((Nil)) ((Nil))))) = sub_check_ta1 (V ("lbu")) (mk_rhs1 ((Nil)) ("fva") ((Nil)))
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("adj")) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) ((Nil))) (mk_lhs1 ((Nil)) (("hix"::(Nil))))) = sub_check_ta1 (V ("adj")) (mk_rhs1 ((Nil)) ("ppb") (("hix"::(Nil))))
Prop: sub_check_ta1 (P ("gme") (V ("qss"))) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (("fxp"::(Nil)))) (mk_lhs1 ((Nil)) (("jtl"::(Nil))))) = sub_check_ta1 (P ("gme") (V ("qss"))) (mk_rhs1 (("fxp"::(Nil))) ("jxk") (("jtl"::(Nil))))
Prop: sub_check_ta1 (V ("stl")) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (("lyl"::("yyf"::(Nil))))) (mk_lhs1 ((Nil)) ((Nil)))) = sub_check_ta1 (V ("stl")) (mk_rhs1 (("lyl"::("yyf"::(Nil)))) ("kgc") ((Nil)))
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("inu")) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 ((Nil)) ((Nil)))) = sub_check_ta1 (V ("inu")) (mk_rhs1 ((Nil)) ("hjf") ((Nil)))
Prop: sub_check_ta1 (V ("yij")) (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (mk_lhs1 ((Nil)) ((Nil)))) = sub_check_ta1 (V ("yij")) (mk_rhs1 ((Nil)) ("lfs") ((Nil)))
Prop: sub_check_ta1 (C (C (V ("fen")) (V ("ioz"))) (V ("uef"))) (mk_lhs1 (mk_lhs1 ((Nil)) (("xtl"::(Nil)))) (mk_lhs1 ((Nil)) ((Nil)))) = sub_check_ta1 (C (C (V ("fen")) (V ("ioz"))) (V ("uef"))) (mk_rhs1 (("xtl"::(Nil))) ("crr") ((Nil)))
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (C (V ("bze")) (V ("tjx"))) (mk_lhs1 ((Nil)) (mk_lhs1 ((Nil)) ((Nil)))) = sub_check_ta1 (C (V ("bze")) (V ("tjx"))) (mk_rhs1 ((Nil)) ("vwi") ((Nil)))
Prop: sub_check_ta1 (V ("ugw")) (mk_lhs1 ((Nil)) (mk_lhs1 ((Nil)) ((Nil)))) = sub_check_ta1 (V ("ugw")) (mk_rhs1 ((Nil)) ("evp") ((Nil)))
Prop: sub_check_ta1 (V ("wqe")) (mk_lhs1 ((Nil)) (mk_lhs1 ((Nil)) ((Nil)))) = sub_check_ta1 (V ("wqe")) (mk_rhs1 ((Nil)) ("hiq") ((Nil)))
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("zee")) (mk_lhs1 ((Nil)) ((Nil))) = sub_check_ta1 (V ("zee")) (mk_rhs1 ((Nil)) ("nsd") ((Nil)))
Prop: sub_check_ta1 (V ("ocx")) (mk_lhs1 ((Nil)) ((Nil))) = sub_check_ta1 (V ("ocx")) (mk_rhs1 ((Nil)) ("uis") ((Nil)))
Prop: sub_check_ta1 (P ("lvw") (V ("pbk"))) (mk_lhs1 ((Nil)) ((Nil))) = sub_check_ta1 (P ("lvw") (V ("pbk"))) (mk_rhs1 ((Nil)) ("kgf") ((Nil)))
Lemma List
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (mk_lhs1 ((Nil)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (mk_lhs1 ((Nil)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
Lemma List
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
=================================================
Progress: 813


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (mk_lhs1 ((Nil)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (mk_lhs1 ((Nil)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (mk_lhs1 ((Nil)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (mk_lhs1 ((Nil)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:15.)
=================================================
Progress: 814


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

5 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:15.)
=================================================
Progress: 815


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (mk_lhs1 ((Nil)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (mk_lhs1 ((Nil)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
>>> simpl in goal(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (mk_lhs1 ((Nil)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro string1(rank:15.)
=================================================
Progress: 816


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
>>> simpl in goal(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro string1(rank:15.)
=================================================
Progress: 817


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (mk_lhs1 ((Nil)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
>>> intro string1(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (mk_lhs1 ((Nil)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro string_list2(rank:15.)
=================================================
Progress: 818


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
>>> intro string1(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro string_list2(rank:15.)
=================================================
Progress: 819


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (mk_lhs1 ((Nil)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
>>> intro string_list2(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (mk_lhs1 ((Nil)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:15.)
=================================================
Progress: 820


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
>>> intro string_list2(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:15.)
=================================================
Progress: 821


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (mk_lhs1 ((Nil)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
>>> intro Cond1(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (mk_lhs1 ((Nil)) (string_list2))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 4
rewrite <- lhs_lemma4 in goal at 1(rank:23.)
induction lambda1(rank:25.)
rewrite <- lhs_lemma4 in goal at 2(rank:23.)
rewrite <- lhs_lemma4 in goal at 3(rank:23.)
=================================================
Progress: 822


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
>>> intro Cond1(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (mk_lhs1 (mk_lhs1 (mk_lhs1 ((Nil)) ((Nil))) (string_list1)) (mk_lhs1 ((Nil)) (string_list2)))) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string1) (string_list2))

0 goal(s) more...

6 conjecture(s) more...
Tactic List : 4
rewrite <- lhs_lemma4 in goal at 1(rank:23.)
induction lambda1(rank:25.)
rewrite <- lhs_lemma4 in goal at 2(rank:23.)
rewrite <- lhs_lemma4 in goal at 3(rank:23.)
=================================================
Progress: 823


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string1) = true

3 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 22.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
rewrite lemma3 in goal at 0(rank:22.)
rewrite <- lemma3 in goal at 0(rank:22.)
=================================================
Progress: 824


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string1) = true

3 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- lemma3 in goal at 0(rank : 22.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string1) (string_list1) = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:14.)
=================================================
Progress: 825


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string1) (string_list1) = true

3 goal(s) more...

4 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 14.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13.)
=================================================
Progress: 826


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
is_mem_ta1 (string_list1) (string2) = mem (string2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
Deduplication: 5
Tactic List : 2
rewrite lemma3 in goal at 0(rank:21.)
rewrite <- lemma3 in goal at 0(rank:21.)
=================================================
Progress: 827


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
is_mem_ta1 (string_list1) (string2) = mem (string2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 21.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12.)
=================================================
Progress: 828


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)

2 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
sub_check_ta1 (P (string2) (lambda2)) (string_list1) = sub_check (P (string2) (lambda2)) ((string1::string_list1))

1 goal(s) more...

4 conjecture(s) more...
Deduplication: 13
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 829


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
sub_check_ta1 (P (string2) (lambda2)) (string_list1) = sub_check (P (string2) (lambda2)) ((string1::string_list1))

1 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) ((string2::string_list1)) = if if string_eq (string1) (string2) then true else mem (string2) (string_list1) then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::(string1::string_list1)))

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 4
case string_eq (string1) (string2)(rank:13.)
rewrite <- IH1 in goal at 0(rank:20.)
rewrite lemma3 in goal at 0(rank:28.)
rewrite <- Cond1 in goal at 0(rank:28.)
=================================================
Progress: 830


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) ((string2::string_list1)) = if if string_eq (string1) (string2) then true else mem (string2) (string_list1) then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::(string1::string_list1)))

1 goal(s) more...

4 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 1(rank:13.)
=================================================
Progress: 831


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 1(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check_ta1 (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:13.)
rewrite Case1 in goal at 0(rank:21.)
rewrite <- IH1 in goal at 0(rank:29.)
=================================================
Progress: 832


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check_ta1 (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:13.)
=================================================
Progress: 833


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite <- Case1 in goal at 0
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("wak")) (("ujm"::(Nil))) = sub_check_ta1 (V ("wak")) ((Nil))
Prop: sub_check_ta1 (V ("whc")) (("lcp"::("yeb"::(Nil)))) = sub_check_ta1 (V ("whc")) (("yeb"::(Nil)))
Prop: sub_check_ta1 (V ("isg")) (("lwb"::(Nil))) = sub_check_ta1 (V ("isg")) ((Nil))
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite <- Case1 in goal at 0
Prop: sub_check_ta1 (V ("tzb")) ((Nil)) = sub_check (V ("tzb")) ((Nil))
Prop: sub_check_ta1 (V ("sqn")) ((Nil)) = sub_check (V ("sqn")) ((Nil))
Prop: sub_check_ta1 (V ("dqf")) ((Nil)) = sub_check (V ("dqf")) ((Nil))
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
parent
(string2::string_list1)
lower
Cons(_, string_list1)
upper
sub_check_ta1(lambda2, _)
remove upper
string_list1
remove lower
string_list1
remove upper
Cons(string2, string_list1)
remove lower
Cons(string2, string_list1)
remove upper
Cons(string3, Cons(string2, string_list1))
remove lower
Cons(string3, Cons(string2, string_list1))
remove upper
Cons(string4, Cons(string3, Cons(string2, string_list1)))
remove lower
Cons(string4, Cons(string3, Cons(string2, string_list1)))
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("bnw")) (("tgm"::(Nil))) = sub_check (V ("bnw")) (("yta"::(Nil)))
Prop: sub_check_ta1 (C (V ("qep")) (P ("vkl") (P ("ahu") (C (C (V ("oze")) (V ("jwp"))) (V ("mua")))))) (("pvm"::(Nil))) = sub_check (C (V ("qep")) (P ("vkl") (P ("ahu") (C (C (V ("oze")) (V ("jwp"))) (V ("mua")))))) (("ect"::(Nil)))
Prop: sub_check_ta1 (V ("tgb")) (("erc"::(Nil))) = sub_check (V ("tgb")) (("yhp"::(Nil)))
previous tactics
simpl in goal
case string_eq (string1) (string2)
parent
(string2::string_list1)
lower
Cons(_, string_list1)
upper
sub_check_ta1(lambda2, _)
remove upper
string_list1
remove lower
string_list1
remove upper
Cons(string2, string_list1)
remove lower
Cons(string2, string_list1)
remove upper
Cons(string3, Cons(string2, string_list1))
remove lower
Cons(string3, Cons(string2, string_list1))
remove upper
Cons(string4, Cons(string3, Cons(string2, string_list1)))
remove lower
Cons(string4, Cons(string3, Cons(string2, string_list1)))
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (P ("vfs") (V ("tqt"))) (("yzp"::("pzx"::(Nil)))) = sub_check (P ("vfs") (V ("tqt"))) (("eju"::("pzx"::(Nil))))
Prop: sub_check_ta1 (C (V ("iwh")) (V ("yhj"))) (("vxf"::(Nil))) = sub_check (C (V ("iwh")) (V ("yhj"))) (("mra"::(Nil)))
Prop: sub_check_ta1 (P ("vqy") (V ("qgv"))) (("utu"::("yms"::("ewd"::("czj"::(Nil)))))) = sub_check (P ("vqy") (V ("qgv"))) (("jwt"::("yms"::("ewd"::("czj"::(Nil))))))
Lemma List
forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 834


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
>>> assert forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)(rank : 0.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)

---------------------------------------
forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:15.)
=================================================
Progress: 835


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)

---------------------------------------
forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)

0 goal(s) more...

5 conjecture(s) more...
>>> induction lambda1(rank : 15.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (V (string1)) (string_list1) = sub_check (V (string1)) (string_list1)

2 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:15.)
=================================================
Progress: 836


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (V (string1)) (string_list1) = sub_check (V (string1)) (string_list1)

2 goal(s) more...

5 conjecture(s) more...
>>> simpl in goal(rank : 15.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
forall (string_list1:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)

2 goal(s) more...

5 conjecture(s) more...
Tactic List : 3
rewrite lemma3 in goal at 0(rank:23.)
induction string_list1(rank:24.)
rewrite <- lemma3 in goal at 0(rank:23.)
=================================================
Progress: 837


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) ((string2::string_list1)) = if if string_eq (string1) (string2) then true else mem (string2) (string_list1) then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::(string1::string_list1)))

1 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) ((string2::string_list1)) = if if string_eq (string1) (string2) then true else mem (string2) (string_list1) then sub_check_ta1 (lambda2) (string_list1) else sub_check (lambda2) ((string2::(string1::string_list1)))

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
case string_eq (string1) (string2)(rank:13.)
rewrite lemma3 in goal at 0(rank:28.)
rewrite <- Cond1 in goal at 0(rank:28.)
=================================================
Progress: 838


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) ((string2::string_list1)) = if if string_eq (string1) (string2) then true else mem (string2) (string_list1) then sub_check_ta1 (lambda2) (string_list1) else sub_check (lambda2) ((string2::(string1::string_list1)))

1 goal(s) more...

4 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::string_list1)) = sub_check_ta1 (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 1(rank:13.)
=================================================
Progress: 839


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string2::string_list1)) = sub_check_ta1 (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 1(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check_ta1 (lambda2) ((string2::string_list1)) = sub_check_ta1 (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:13.)
rewrite IH1 in goal at 0(rank:21.)
=================================================
Progress: 840


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check_ta1 (lambda2) ((string2::string_list1)) = sub_check_ta1 (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:13.)
=================================================
Progress: 841


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite <- Case1 in goal at 0
rewrite IH1 in goal at 0
Prop: sub_check_ta1 (V ("whc")) ((Nil)) = sub_check (V ("whc")) ((Nil))
Prop: sub_check_ta1 (V ("mzk")) ((Nil)) = sub_check (V ("mzk")) ((Nil))
Prop: sub_check_ta1 (V ("izl")) (("aas"::(Nil))) = sub_check (V ("izl")) (("aas"::(Nil)))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("kgk")) (("yip"::("env"::(Nil)))) = sub_check_ta1 (V ("kgk")) (("env"::(Nil)))
Prop: sub_check_ta1 (V ("yro")) (("hbt"::(Nil))) = sub_check_ta1 (V ("yro")) ((Nil))
Prop: sub_check_ta1 (V ("hqw")) (("hxn"::(Nil))) = sub_check_ta1 (V ("hqw")) ((Nil))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (C (C (V ("vhv")) (C (V ("xwa")) (V ("rog")))) (V ("bzc"))) (("uqc"::(Nil))) = sub_check_ta1 (C (C (V ("vhv")) (C (V ("xwa")) (V ("rog")))) (V ("bzc"))) ((Nil))
Prop: sub_check_ta1 (C (V ("dgq")) (V ("hib"))) (("bfe"::(Nil))) = sub_check_ta1 (C (V ("dgq")) (V ("hib"))) ((Nil))
Prop: sub_check_ta1 (V ("wpy")) (("uuf"::("sjv"::(Nil)))) = sub_check_ta1 (V ("wpy")) (("sjv"::(Nil)))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("ylu")) (("npf"::(Nil))) = sub_check_ta1 (V ("ylu")) ((Nil))
Prop: sub_check_ta1 (C (C (V ("kuu")) (V ("zjs"))) (P ("fxn") (V ("gur")))) (("xit"::("hsn"::(Nil)))) = sub_check_ta1 (C (C (V ("kuu")) (V ("zjs"))) (P ("fxn") (V ("gur")))) (("hsn"::(Nil)))
Prop: sub_check_ta1 (V ("osb")) (("gpf"::(Nil))) = sub_check_ta1 (V ("osb")) ((Nil))
=================================================
Progress: 842


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check_ta1 (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check_ta1 (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite Case1 in goal at 0
Prop: sub_check_ta1 (V ("upl")) ((Nil)) = sub_check (V ("upl")) ((Nil))
Prop: sub_check_ta1 (V ("bvj")) (("drh"::(Nil))) = sub_check (V ("bvj")) (("drh"::(Nil)))
Prop: sub_check_ta1 (P ("qtu") (C (V ("mid")) (V ("imy")))) ((Nil)) = sub_check (P ("qtu") (C (V ("mid")) (V ("imy")))) ((Nil))
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
parent
(string2::string_list1)
lower
Cons(_, string_list1)
upper
sub_check_ta1(lambda2, _)
remove upper
string_list1
remove lower
string_list1
remove upper
Cons(string2, string_list1)
remove lower
Cons(string2, string_list1)
remove upper
Cons(string3, Cons(string2, string_list1))
remove lower
Cons(string3, Cons(string2, string_list1))
remove upper
Cons(string4, Cons(string3, Cons(string2, string_list1)))
remove lower
Cons(string4, Cons(string3, Cons(string2, string_list1)))
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("fvs")) (("pof"::(Nil))) = sub_check (V ("fvs")) (("ntp"::(Nil)))
Prop: sub_check_ta1 (V ("uvd")) (("bbm"::("jya"::(Nil)))) = sub_check (V ("uvd")) (("ayn"::("jya"::(Nil))))
Prop: sub_check_ta1 (V ("syw")) (("sxc"::("gsj"::("gyc"::("fdh"::(Nil)))))) = sub_check (V ("syw")) (("ezt"::("gsj"::("gyc"::("fdh"::(Nil))))))
previous tactics
simpl in goal
case string_eq (string1) (string2)
parent
(string2::string_list1)
lower
Cons(_, string_list1)
upper
sub_check_ta1(lambda2, _)
remove upper
string_list1
remove lower
string_list1
remove upper
Cons(string2, string_list1)
remove lower
Cons(string2, string_list1)
remove upper
Cons(string3, Cons(string2, string_list1))
remove lower
Cons(string3, Cons(string2, string_list1))
remove upper
Cons(string4, Cons(string3, Cons(string2, string_list1)))
remove lower
Cons(string4, Cons(string3, Cons(string2, string_list1)))
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (P ("kwu") (V ("rfe"))) (("wvt"::("vjx"::(Nil)))) = sub_check (P ("kwu") (V ("rfe"))) (("vvc"::("vjx"::(Nil))))
Prop: sub_check_ta1 (V ("rha")) (("noh"::(Nil))) = sub_check (V ("rha")) (("yml"::(Nil)))
Prop: sub_check_ta1 (V ("vjy")) (("gdi"::("zmf"::(Nil)))) = sub_check (V ("vjy")) (("bjo"::("zmf"::(Nil))))
=================================================
Progress: 843


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check_ta1 (lambda2) ((string2::string_list1)) = sub_check_ta1 (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 21.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check_ta1 (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:13.)
=================================================
Progress: 844


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check_ta1 (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check_ta1 (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite IH1 in goal at 0
rewrite Case1 in goal at 0
Prop: sub_check_ta1 (V ("xqh")) ((Nil)) = sub_check (V ("xqh")) ((Nil))
Prop: sub_check_ta1 (C (V ("gnd")) (V ("iec"))) (("poj"::(Nil))) = sub_check (C (V ("gnd")) (V ("iec"))) (("poj"::(Nil)))
Prop: sub_check_ta1 (P ("wdx") (V ("mjk"))) ((Nil)) = sub_check (P ("wdx") (V ("mjk"))) ((Nil))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (C (C (V ("xwr")) (V ("wix"))) (V ("umy"))) (("mjk"::(Nil))) = sub_check (C (C (V ("xwr")) (V ("wix"))) (V ("umy"))) (("hqq"::(Nil)))
Prop: sub_check_ta1 (P ("hxy") (V ("wks"))) (("vyl"::(Nil))) = sub_check (P ("hxy") (V ("wks"))) (("zqq"::(Nil)))
Prop: sub_check_ta1 (V ("uoi")) (("rnp"::(Nil))) = sub_check (V ("uoi")) (("lkc"::(Nil)))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("csz")) (("mdc"::(Nil))) = sub_check_ta1 (V ("csz")) ((Nil))
Prop: sub_check_ta1 (V ("frz")) (("gvg"::(Nil))) = sub_check_ta1 (V ("frz")) ((Nil))
Prop: sub_check_ta1 (V ("pqb")) (("hus"::(Nil))) = sub_check_ta1 (V ("pqb")) ((Nil))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
Prop: sub_check_ta1 (V ("tpf")) (("osj"::("ghx"::("qgg"::(Nil))))) = sub_check_ta1 (V ("tpf")) (("ghx"::("qgg"::(Nil))))
Prop: sub_check_ta1 (P ("qbm") (V ("vto"))) (("iqu"::("jfb"::("hvn"::(Nil))))) = sub_check_ta1 (P ("qbm") (V ("vto"))) (("jfb"::("hvn"::(Nil))))
Prop: sub_check_ta1 (V ("ikn")) (("eya"::(Nil))) = sub_check_ta1 (V ("ikn")) ((Nil))
=================================================
Progress: 845


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string2) (string_list1) = true

3 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 22.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string2) (string_list1) = mem (string1) (string_list1)

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:22.)
rewrite lemma3 in goal at 0(rank:30.)
rewrite lemma3 in goal at 1(rank:30.)
rewrite lemma3 in goal at 2(rank:30.)
=================================================
Progress: 846


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string1) (string_list1) = true

3 goal(s) more...

4 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 22.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13.)
=================================================
Progress: 847


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
mem (string2) (string_list1) = mem (string2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
Deduplication: 7
Tactic List : 1
reflexivity(rank:12.)
=================================================
Progress: 848


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
mem (string2) (string_list1) = mem (string2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
sub_check (P (string2) (lambda2)) (string_list1) = sub_check (P (string2) (lambda2)) ((string1::string_list1))

1 goal(s) more...

4 conjecture(s) more...
Deduplication: 4
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 849


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
sub_check (P (string2) (lambda2)) (string_list1) = sub_check (P (string2) (lambda2)) ((string1::string_list1))

1 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1)) = if if string_eq (string1) (string2) then true else mem (string2) (string_list1) then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::(string1::string_list1)))

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 8
case string_eq (string1) (string2)(rank:13.)
rewrite IH1 in goal at 0(rank:20.)
rewrite <- IH1 in goal at 0(rank:20.)
rewrite <- Cond1 in goal at 0(rank:28.)
rewrite lemma3 in goal at 1(rank:28.)
rewrite lemma3 in goal at 2(rank:28.)
rewrite lemma3 in goal at 0(rank:28.)
case mem (string2) (string_list1)(rank:13.)
=================================================
Progress: 850


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1)) = if if string_eq (string1) (string2) then true else mem (string2) (string_list1) then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::(string1::string_list1)))

1 goal(s) more...

4 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 1(rank:13.)
=================================================
Progress: 851


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1)) = if if string_eq (string1) (string2) then true else mem (string2) (string_list1) then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::(string1::string_list1)))

1 goal(s) more...

4 conjecture(s) more...
>>> case mem (string2) (string_list1)(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = if if string_eq (string1) (string2) then true else true then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::(string1::string_list1)))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 9
case string_eq (string1) (string2)(rank:14.)
rewrite IH1 in goal at 0(rank:21.)
rewrite <- IH1 in goal at 0(rank:21.)
rewrite <- Case1 in goal at 1(rank:29.)
rewrite <- Case1 in goal at 2(rank:29.)
rewrite <- Cond1 in goal at 0(rank:29.)
rewrite <- Cond1 in goal at 1(rank:29.)
rewrite <- Cond1 in goal at 2(rank:29.)
rewrite <- Case1 in goal at 0(rank:29.)
=================================================
Progress: 852


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 1(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 8
rewrite <- Case1 in goal at 0(rank:13.)
rewrite <- Case1 in goal at 1(rank:13.)
case mem (string2) (string_list1)(rank:14.)
rewrite <- IH1 in goal at 0(rank:29.)
rewrite Case1 in goal at 0(rank:21.)
rewrite IH1 in goal at 0(rank:29.)
rewrite <- Case1 in goal at 2(rank:13.)
rewrite lemma3 in goal at 0(rank:29.)
=================================================
Progress: 853


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:21.)
rewrite <- IH1 in goal at 1(rank:21.)
rewrite <- IH1 in goal at 2(rank:29.)
rewrite lemma3 in goal at 0(rank:29.)
rewrite <- IH1 in goal at 0(rank:29.)
rewrite IH1 in goal at 0(rank:29.)
=================================================
Progress: 854


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 4
rewrite Cond1 in goal at 0(rank:21.)
rewrite IH1 in goal at 0(rank:29.)
rewrite lemma3 in goal at 0(rank:29.)
rewrite <- IH1 in goal at 0(rank:29.)
=================================================
Progress: 855


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 6
case mem (string2) (string_list1)(rank:14.)
rewrite <- IH1 in goal at 1(rank:21.)
rewrite <- IH1 in goal at 0(rank:29.)
rewrite IH1 in goal at 0(rank:29.)
rewrite lemma3 in goal at 0(rank:29.)
rewrite <- IH1 in goal at 2(rank:29.)
=================================================
Progress: 856


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = if if string_eq (string1) (string2) then true else true then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::(string1::string_list1)))

2 goal(s) more...

4 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 14.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
Case2 : string_eq (string1) (string2) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 1(rank:14.)
=================================================
Progress: 857


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
>>> case mem (string2) (string_list1)(rank : 14.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:22.)
rewrite Case1 in goal at 0(rank:30.)
rewrite <- IH1 in goal at 0(rank:22.)
=================================================
Progress: 858


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
>>> case mem (string2) (string_list1)(rank : 14.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:22.)
rewrite Case1 in goal at 0(rank:30.)
rewrite <- IH1 in goal at 0(rank:22.)
=================================================
Progress: 859


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
Case2 : string_eq (string1) (string2) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))

3 goal(s) more...

4 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 1(rank : 14.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
Case2 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:22.)
rewrite Case2 in goal at 0(rank:30.)
rewrite <- IH1 in goal at 0(rank:22.)
=================================================
Progress: 860


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1)) = if if string_eq (string1) (string2) then true else mem (string2) (string_list1) then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::(string1::string_list1)))

1 goal(s) more...

4 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::string_list1)) = if if string_eq (string1) (string2) then true else mem (string2) (string_list1) then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::(string1::string_list1)))

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 5
case string_eq (string1) (string2)(rank:13.)
rewrite lemma3 in goal at 0(rank:28.)
rewrite lemma3 in goal at 1(rank:28.)
rewrite lemma3 in goal at 2(rank:28.)
rewrite <- Cond1 in goal at 0(rank:28.)
=================================================
Progress: 861


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::string_list1)) = if if string_eq (string1) (string2) then true else mem (string2) (string_list1) then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::(string1::string_list1)))

1 goal(s) more...

4 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 1(rank:13.)
=================================================
Progress: 862


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 1(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 11
rewrite <- Case1 in goal at 0(rank:13.)
rewrite <- Case1 in goal at 2(rank:13.)
rewrite Case1 in goal at 0(rank:29.)
rewrite Case1 in goal at 1(rank:29.)
rewrite Case1 in goal at 2(rank:29.)
rewrite lemma3 in goal at 0(rank:29.)
rewrite <- IH1 in goal at 0(rank:29.)
rewrite <- Case1 in goal at 1(rank:13.)
case mem (string2) (string_list1)(rank:14.)
rewrite <- IH1 in goal at 1(rank:21.)
rewrite <- IH1 in goal at 2(rank:29.)
=================================================
Progress: 863


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if mem (string1) (string_list1) then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12.)
=================================================
Progress: 864


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if mem (string1) (string_list1) then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::string_list1)) = if mem (string2) (string_list1) then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::(string1::string_list1)))

1 goal(s) more...

4 conjecture(s) more...
Deduplication: 10
Tactic List : 1
case mem (string2) (string_list1)(rank:13.)
=================================================
Progress: 865


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::string_list1)) = if mem (string2) (string_list1) then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::(string1::string_list1)))

1 goal(s) more...

4 conjecture(s) more...
>>> case mem (string2) (string_list1)(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = false
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12.)
=================================================
Progress: 866


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = false
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = false
Case2 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string2::(string1::string_list1)))

1 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite <- Case1 in goal at 0
reflexivity
case mem (string2) (string_list1)
reflexivity
validate generalize_common_subterm_goal
Prop: sub_check (V ("omu")) (("geo"::(Nil))) = sub_check (V ("omu")) (("geo"::("kmm"::(Nil))))
Prop: sub_check (V ("vgg")) (("xtx"::(Nil))) = sub_check (V ("vgg")) (("xtx"::("vpv"::(Nil))))
Prop: sub_check (C (C (V ("pux")) (V ("kbc"))) (V ("xea"))) (("aea"::("wef"::(Nil)))) = sub_check (C (C (V ("pux")) (V ("kbc"))) (V ("xea"))) (("aea"::("urm"::("wef"::(Nil)))))
Lemma List
forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string_eq (string1) (string2) = false -> mem (string2) (string_list1) = false -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string2::(string1::string_list1)))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = false
Case2 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string2::(string1::string_list1)))

1 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 867


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = false
Case2 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string2::(string1::string_list1)))

1 goal(s) more...

4 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string_eq (string1) (string2) = false -> mem (string2) (string_list1) = false -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string2::(string1::string_list1)))(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string_eq (string1) (string2) = false -> mem (string2) (string_list1) = false -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string2::(string1::string_list1)))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string_eq (string1) (string2) = false -> mem (string2) (string_list1) = false -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string2::(string1::string_list1)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro string1(rank:21.)
=================================================
Progress: 868


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1)) = if if string_eq (string1) (string2) then true else mem (string2) (string_list1) then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::(string1::string_list1)))

1 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1)) = if if string_eq (string1) (string2) then true else mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::(string1::string_list1)))

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 6
case string_eq (string1) (string2)(rank:13.)
rewrite lemma3 in goal at 0(rank:28.)
rewrite lemma3 in goal at 1(rank:28.)
rewrite lemma3 in goal at 2(rank:28.)
rewrite <- Cond1 in goal at 0(rank:28.)
case mem (string2) (string_list1)(rank:13.)
=================================================
Progress: 869


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1)) = if if string_eq (string1) (string2) then true else mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::(string1::string_list1)))

1 goal(s) more...

4 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 1(rank:13.)
=================================================
Progress: 870


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1)) = if if string_eq (string1) (string2) then true else mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::(string1::string_list1)))

1 goal(s) more...

4 conjecture(s) more...
>>> case mem (string2) (string_list1)(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = if if string_eq (string1) (string2) then true else true then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::(string1::string_list1)))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 10
case string_eq (string1) (string2)(rank:14.)
rewrite IH1 in goal at 1(rank:21.)
rewrite IH1 in goal at 2(rank:29.)
rewrite <- Case1 in goal at 1(rank:29.)
rewrite <- Case1 in goal at 2(rank:29.)
rewrite <- Cond1 in goal at 0(rank:29.)
rewrite <- Cond1 in goal at 1(rank:29.)
rewrite <- Case1 in goal at 0(rank:29.)
rewrite IH1 in goal at 0(rank:29.)
rewrite <- Cond1 in goal at 2(rank:29.)
=================================================
Progress: 871


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 1(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 8
rewrite <- Case1 in goal at 0(rank:13.)
rewrite <- Case1 in goal at 2(rank:13.)
rewrite IH1 in goal at 2(rank:21.)
rewrite lemma3 in goal at 0(rank:29.)
rewrite IH1 in goal at 0(rank:29.)
rewrite IH1 in goal at 1(rank:29.)
case mem (string2) (string_list1)(rank:14.)
rewrite <- Case1 in goal at 1(rank:13.)
=================================================
Progress: 872


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:21.)
rewrite IH1 in goal at 2(rank:21.)
rewrite IH1 in goal at 1(rank:29.)
rewrite <- IH1 in goal at 0(rank:21.)
rewrite lemma3 in goal at 0(rank:29.)
rewrite IH1 in goal at 0(rank:29.)
=================================================
Progress: 873


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 5
rewrite Cond1 in goal at 0(rank:21.)
rewrite IH1 in goal at 2(rank:21.)
rewrite IH1 in goal at 1(rank:29.)
rewrite lemma3 in goal at 0(rank:29.)
rewrite IH1 in goal at 0(rank:29.)
=================================================
Progress: 874


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 6
case mem (string2) (string_list1)(rank:14.)
rewrite IH1 in goal at 2(rank:21.)
rewrite lemma3 in goal at 0(rank:29.)
rewrite IH1 in goal at 0(rank:29.)
rewrite IH1 in goal at 1(rank:29.)
rewrite <- IH1 in goal at 0(rank:21.)
=================================================
Progress: 875


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = if if string_eq (string1) (string2) then true else true then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::(string1::string_list1)))

2 goal(s) more...

4 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 14.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
Case2 : string_eq (string1) (string2) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13.)
=================================================
Progress: 876


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
Case2 : string_eq (string1) (string2) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

3 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
Case2 : string_eq (string1) (string2) = false
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
reflexivity(rank:12.)
=================================================
Progress: 877


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
Case2 : string_eq (string1) (string2) = false
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = if if string_eq (string1) (string2) then true else false then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::(string1::string_list1)))

1 goal(s) more...

4 conjecture(s) more...
Deduplication: 9
Tactic List : 4
case string_eq (string1) (string2)(rank:13.)
rewrite <- Cond1 in goal at 0(rank:28.)
rewrite IH1 in goal at 0(rank:28.)
rewrite <- Case1 in goal at 0(rank:28.)
=================================================
Progress: 878


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = if if string_eq (string1) (string2) then true else false then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::(string1::string_list1)))

1 goal(s) more...

4 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 1(rank:13.)
=================================================
Progress: 879


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 1(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = false
Case2 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:13.)
rewrite IH1 in goal at 0(rank:21.)
=================================================
Progress: 880


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = false
Case2 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = false
Case2 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:21.)
rewrite <- IH1 in goal at 0(rank:21.)
=================================================
Progress: 881


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
>>> case mem (string2) (string_list1)(rank : 14.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13.)
=================================================
Progress: 882


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

3 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:13.)
rewrite IH1 in goal at 0(rank:21.)
=================================================
Progress: 883


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:21.)
rewrite <- IH1 in goal at 0(rank:21.)
=================================================
Progress: 884


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
>>> case mem (string2) (string_list1)(rank : 14.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:30.)
rewrite IH1 in goal at 1(rank:30.)
rewrite IH1 in goal at 2(rank:30.)
=================================================
Progress: 885


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = if if string_eq (string1) (string2) then true else true then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::(string1::string_list1)))

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 21.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if if string_eq (string1) (string2) then true else true then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::(string1::string_list1)))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 7
case string_eq (string1) (string2)(rank:14.)
rewrite <- Case1 in goal at 0(rank:29.)
rewrite <- Case1 in goal at 1(rank:29.)
rewrite <- Case1 in goal at 2(rank:29.)
rewrite <- Cond1 in goal at 0(rank:29.)
rewrite <- Cond1 in goal at 1(rank:29.)
rewrite <- Cond1 in goal at 2(rank:29.)
=================================================
Progress: 886


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if if string_eq (string1) (string2) then true else true then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::(string1::string_list1)))

2 goal(s) more...

4 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 14.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
Case2 : string_eq (string1) (string2) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13.)
=================================================
Progress: 887


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
Case2 : string_eq (string1) (string2) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

3 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
Case2 : string_eq (string1) (string2) = false
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 3
rewrite <- IH1 in goal at 0(rank:29.)
rewrite <- IH1 in goal at 1(rank:29.)
rewrite <- IH1 in goal at 2(rank:29.)
=================================================
Progress: 888


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = if if string_eq (string1) (string2) then true else true then sub_check (lambda2) ((string1::string_list1)) else sub_check (lambda2) ((string2::(string1::string_list1)))

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 21.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = if if string_eq (string1) (string2) then true else true then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::(string1::string_list1)))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 7
case string_eq (string1) (string2)(rank:14.)
rewrite <- Case1 in goal at 0(rank:29.)
rewrite <- Case1 in goal at 1(rank:29.)
rewrite <- Case1 in goal at 2(rank:29.)
rewrite <- Cond1 in goal at 0(rank:29.)
rewrite <- Cond1 in goal at 1(rank:29.)
rewrite <- Cond1 in goal at 2(rank:29.)
=================================================
Progress: 889


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = if if string_eq (string1) (string2) then true else true then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::(string1::string_list1)))

2 goal(s) more...

4 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 14.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
Case2 : string_eq (string1) (string2) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 1(rank:14.)
=================================================
Progress: 890


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
Case2 : string_eq (string1) (string2) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

3 goal(s) more...

4 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 1(rank : 14.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
Case2 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:30.)
rewrite IH1 in goal at 1(rank:30.)
rewrite IH1 in goal at 2(rank:30.)
=================================================
Progress: 891


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
case mem (string2) (string_list1)(rank:14.)
rewrite IH1 in goal at 0(rank:29.)
rewrite lemma3 in goal at 0(rank:29.)
=================================================
Progress: 892


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

4 conjecture(s) more...
>>> case mem (string2) (string_list1)(rank : 14.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string2::string_list1))

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:14.)
rewrite IH1 in goal at 0(rank:22.)
=================================================
Progress: 893


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string2::string_list1))

3 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 14.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:22.)
rewrite <- IH1 in goal at 0(rank:22.)
=================================================
Progress: 894


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if true then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 895


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if true then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:21.)
rewrite Case1 in goal at 0(rank:29.)
rewrite <- IH1 in goal at 0(rank:21.)
=================================================
Progress: 896


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 21.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:13.)
=================================================
Progress: 897


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if is_mem_ta1 (string_list1) (string1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:14.)
=================================================
Progress: 898


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if is_mem_ta1 (string_list1) (string1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 14.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:22.)
rewrite Case1 in goal at 0(rank:30.)
rewrite <- IH1 in goal at 0(rank:22.)
=================================================
Progress: 899


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if true then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:29.)
rewrite <- IH1 in goal at 0(rank:29.)
=================================================
Progress: 900


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 21.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
case mem (string2) (string_list1)(rank:14.)
rewrite lemma3 in goal at 0(rank:29.)
=================================================
Progress: 901


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
>>> case mem (string2) (string_list1)(rank : 14.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:22.)
rewrite Case1 in goal at 0(rank:30.)
rewrite <- IH1 in goal at 0(rank:22.)
=================================================
Progress: 902


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string_eq (string1) (string2) = false -> mem (string2) (string_list1) = false -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string2::(string1::string_list1)))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string_eq (string1) (string2) = false -> mem (string2) (string_list1) = false -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string2::(string1::string_list1)))

0 goal(s) more...

5 conjecture(s) more...
>>> intro string1(rank : 21.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string_eq (string1) (string2) = false -> mem (string2) (string_list1) = false -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string2::(string1::string_list1)))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string_eq (string1) (string2) = false -> mem (string2) (string_list1) = false -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string2::(string1::string_list1)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro string2(rank:21.)
=================================================
Progress: 903


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 21.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
case mem (string2) (string_list1)(rank:14.)
rewrite Case1 in goal at 0(rank:21.)
rewrite lemma3 in goal at 0(rank:29.)
=================================================
Progress: 904


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
>>> case mem (string2) (string_list1)(rank : 14.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:22.)
rewrite Case1 in goal at 0(rank:30.)
rewrite <- IH1 in goal at 0(rank:22.)
=================================================
Progress: 905


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if true then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 906


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if true then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:29.)
rewrite IH1 in goal at 1(rank:29.)
rewrite IH1 in goal at 2(rank:29.)
=================================================
Progress: 907


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 21.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:13.)
=================================================
Progress: 908


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if is_mem_ta1 (string_list1) (string1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:14.)
=================================================
Progress: 909


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if is_mem_ta1 (string_list1) (string1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 14.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:22.)
rewrite Case1 in goal at 0(rank:30.)
rewrite <- IH1 in goal at 0(rank:22.)
=================================================
Progress: 910


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 21.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:13.)
=================================================
Progress: 911


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if is_mem_ta1 (string_list1) (string1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:14.)
=================================================
Progress: 912


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if is_mem_ta1 (string_list1) (string1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 14.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13.)
=================================================
Progress: 913


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

3 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : is_mem_ta1 (string_list1) (string1) = false
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 3
rewrite IH1 in goal at 0(rank:29.)
rewrite IH1 in goal at 1(rank:29.)
rewrite IH1 in goal at 2(rank:29.)
=================================================
Progress: 914


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 21.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if true then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 2(rank:21.)
rewrite IH1 in goal at 0(rank:29.)
rewrite IH1 in goal at 1(rank:29.)
=================================================
Progress: 915


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 21.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:13.)
=================================================
Progress: 916


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if is_mem_ta1 (string_list1) (string1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:14.)
=================================================
Progress: 917


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if is_mem_ta1 (string_list1) (string1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 14.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:22.)
rewrite Case1 in goal at 0(rank:30.)
rewrite <- IH1 in goal at 0(rank:22.)
=================================================
Progress: 918


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 21.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
case mem (string2) (string_list1)(rank:14.)
rewrite lemma3 in goal at 0(rank:29.)
=================================================
Progress: 919


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
>>> case mem (string2) (string_list1)(rank : 14.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:22.)
rewrite Case1 in goal at 0(rank:30.)
rewrite <- IH1 in goal at 0(rank:22.)
=================================================
Progress: 920


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 21.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
case mem (string2) (string_list1)(rank:14.)
rewrite lemma3 in goal at 0(rank:29.)
=================================================
Progress: 921


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
>>> case mem (string2) (string_list1)(rank : 14.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:30.)
rewrite IH1 in goal at 1(rank:30.)
rewrite IH1 in goal at 2(rank:30.)
=================================================
Progress: 922


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = false
Case2 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 21.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = false
Case2 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:13.)
=================================================
Progress: 923


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = false
Case2 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = false
Case2 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12.)
=================================================
Progress: 924


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = false
Case2 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string2::(string1::string_list1)))

1 goal(s) more...

4 conjecture(s) more...
Deduplication: 2
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case mem (string2) (string_list1)
case string_eq (string1) (string2)
reflexivity
reflexivity
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 1
rewrite IH1 in goal at 0
rewrite Case2 in goal at 0
reflexivity
validate generalize_common_subterm_goal
Prop: sub_check (C (V ("ykl")) (V ("wfa"))) (("wdc"::(Nil))) = sub_check (C (V ("ykl")) (V ("wfa"))) (("wdc"::("ljz"::(Nil))))
Prop: sub_check (C (P ("jum") (V ("kqx"))) (V ("oxf"))) (("syc"::(Nil))) = sub_check (C (P ("jum") (V ("kqx"))) (V ("oxf"))) (("syc"::("gxy"::(Nil))))
Prop: sub_check (C (V ("jbs")) (V ("gqx"))) (("ejq"::(Nil))) = sub_check (C (V ("jbs")) (V ("gqx"))) (("ejq"::("cgj"::(Nil))))
Lemma List
forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string2::(string1::string_list1)))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string2::(string1::string_list1)))

1 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 925


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string2::(string1::string_list1)))

1 goal(s) more...

4 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string2::(string1::string_list1)))(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string2::(string1::string_list1)))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string2::(string1::string_list1)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro string1(rank:21.)
=================================================
Progress: 926


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 21.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:13.)
=================================================
Progress: 927


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
case mem (string2) (string_list1)
reflexivity
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: sub_check (P ("qpm") (C (P ("jue") (V ("yyk"))) (V ("vhk")))) (("luk"::(Nil))) = sub_check (P ("qpm") (C (P ("jue") (V ("yyk"))) (V ("vhk")))) (("iiz"::(Nil)))
Prop: sub_check (V ("uot")) (("qsg"::(Nil))) = sub_check (V ("uot")) (("qur"::(Nil)))
Prop: sub_check (C (V ("qna")) (V ("lyn"))) (("qfz"::(Nil))) = sub_check (C (V ("qna")) (V ("lyn"))) (("cnz"::(Nil)))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
case mem (string2) (string_list1)
reflexivity
validate generalize_common_subterm_goal
Prop: sub_check (V ("keo")) (("tbo"::(Nil))) = sub_check (V ("keo")) ((Nil))
Prop: sub_check (V ("gpi")) (("wwi"::(Nil))) = sub_check (V ("gpi")) ((Nil))
Prop: sub_check (V ("ihg")) (("kav"::("tkb"::(Nil)))) = sub_check (V ("ihg")) (("tkb"::(Nil)))
Lemma List
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = false -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
Lemma List
forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = false -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string1::string_list1))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 928


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = false -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = false -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = false -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro string1(rank:13.)
=================================================
Progress: 929


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = false -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string1::string_list1))(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = false -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string1::string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = false -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro string1(rank:21.)
=================================================
Progress: 930


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = false -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = false -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

0 goal(s) more...

5 conjecture(s) more...
>>> intro string1(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = false -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list1) = false -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:13.)
=================================================
Progress: 931


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = false -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list1) = false -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

0 goal(s) more...

5 conjecture(s) more...
>>> intro string_list1(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = false -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda), mem (string1) (string_list1) = false -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:13.)
=================================================
Progress: 932


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = false -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda), mem (string1) (string_list1) = false -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

0 goal(s) more...

5 conjecture(s) more...
>>> intro Cond1(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = false -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = false
---------------------------------------
forall (lambda1:lambda), sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:15.)
=================================================
Progress: 933


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = false -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = false
---------------------------------------
forall (lambda1:lambda), sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

0 goal(s) more...

5 conjecture(s) more...
>>> induction lambda1(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = false -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = false
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
sub_check (V (string2)) ((string1::string_list1)) = sub_check (V (string2)) (string_list1)

2 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:15.)
=================================================
Progress: 934


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = false -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = false
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
sub_check (V (string2)) ((string1::string_list1)) = sub_check (V (string2)) (string_list1)

2 goal(s) more...

5 conjecture(s) more...
>>> simpl in goal(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = false -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = false
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
if string_eq (string1) (string2) then true else mem (string2) (string_list1) = mem (string2) (string_list1)

2 goal(s) more...

5 conjecture(s) more...
Tactic List : 4
case string_eq (string1) (string2)(rank:16.)
rewrite lemma3 in goal at 2(rank:31.)
rewrite lemma3 in goal at 0(rank:31.)
rewrite lemma3 in goal at 1(rank:31.)
=================================================
Progress: 935


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = false -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = false
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
if string_eq (string1) (string2) then true else mem (string2) (string_list1) = mem (string2) (string_list1)

2 goal(s) more...

5 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 16.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = false -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = false
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = mem (string2) (string_list1)

3 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 1(rank:16.)
=================================================
Progress: 936


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = false -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = false
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = mem (string2) (string_list1)

3 goal(s) more...

5 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 1(rank : 16.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = false -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = false
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = mem (string2) (string_list1)

3 goal(s) more...

5 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:16.)
rewrite lemma3 in goal at 0(rank:32.)
=================================================
Progress: 937


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = false -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = false
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = mem (string2) (string_list1)

3 goal(s) more...

5 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 16.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = false -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = false
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = mem (string1) (string_list1)

3 goal(s) more...

5 conjecture(s) more...
Tactic List : 2
rewrite Cond1 in goal at 0(rank:24.)
rewrite lemma3 in goal at 0(rank:32.)
=================================================
Progress: 938


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 21.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
case mem (string2) (string_list1)
reflexivity
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: sub_check (C (V ("sht")) (V ("llu"))) (("ube"::("qtw"::(Nil)))) = sub_check (C (V ("sht")) (V ("llu"))) (("qtw"::(Nil)))
Prop: sub_check (P ("hsb") (V ("ofq"))) (("geo"::(Nil))) = sub_check (P ("hsb") (V ("ofq"))) ((Nil))
Prop: sub_check (P ("syx") (V ("ynf"))) (("uop"::(Nil))) = sub_check (P ("syx") (V ("ynf"))) ((Nil))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
case mem (string2) (string_list1)
reflexivity
validate generalize_common_subterm_goal
Prop: sub_check (V ("dxf")) (("gak"::(Nil))) = sub_check (V ("dxf")) ((Nil))
Prop: sub_check (V ("ifm")) (("jmq"::(Nil))) = sub_check (V ("ifm")) ((Nil))
Prop: sub_check (V ("aff")) (("yvc"::(Nil))) = sub_check (V ("aff")) ((Nil))
Lemma List
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 939


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro string1(rank:13.)
=================================================
Progress: 940


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

0 goal(s) more...

5 conjecture(s) more...
>>> intro string1(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:13.)
=================================================
Progress: 941


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

0 goal(s) more...

5 conjecture(s) more...
>>> intro string_list1(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:13.)
=================================================
Progress: 942


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

0 goal(s) more...

5 conjecture(s) more...
>>> intro Cond1(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
---------------------------------------
forall (lambda1:lambda), sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:15.)
=================================================
Progress: 943


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
---------------------------------------
forall (lambda1:lambda), sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

0 goal(s) more...

5 conjecture(s) more...
>>> induction lambda1(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
sub_check (V (string2)) ((string1::string_list1)) = sub_check (V (string2)) (string_list1)

2 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:15.)
=================================================
Progress: 944


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
sub_check (V (string2)) ((string1::string_list1)) = sub_check (V (string2)) (string_list1)

2 goal(s) more...

5 conjecture(s) more...
>>> simpl in goal(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
if string_eq (string1) (string2) then true else mem (string2) (string_list1) = mem (string2) (string_list1)

2 goal(s) more...

5 conjecture(s) more...
Tactic List : 5
case string_eq (string1) (string2)(rank:16.)
rewrite lemma3 in goal at 0(rank:31.)
rewrite lemma3 in goal at 1(rank:31.)
rewrite lemma3 in goal at 2(rank:31.)
rewrite <- Cond1 in goal at 0(rank:31.)
=================================================
Progress: 945


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
if string_eq (string1) (string2) then true else mem (string2) (string_list1) = mem (string2) (string_list1)

2 goal(s) more...

5 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 16.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = mem (string2) (string_list1)

3 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 1(rank:16.)
=================================================
Progress: 946


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = mem (string2) (string_list1)

3 goal(s) more...

5 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 1(rank : 16.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = mem (string2) (string_list1)

3 goal(s) more...

5 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:16.)
rewrite lemma3 in goal at 0(rank:32.)
rewrite <- Cond1 in goal at 0(rank:24.)
=================================================
Progress: 947


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = mem (string2) (string_list1)

3 goal(s) more...

5 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 16.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = mem (string1) (string_list1)

3 goal(s) more...

5 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:24.)
rewrite lemma3 in goal at 0(rank:32.)
rewrite <- Cond1 in goal at 0(rank:24.)
=================================================
Progress: 948


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 21.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
case mem (string2) (string_list1)
reflexivity
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: sub_check (C (V ("ovj")) (V ("lsn"))) (("ivw"::("zuy"::("mhj"::("aui"::(Nil)))))) = sub_check (C (V ("ovj")) (V ("lsn"))) (("zuy"::("mhj"::("aui"::(Nil)))))
Prop: sub_check (V ("fpo")) (("mpw"::("hed"::(Nil)))) = sub_check (V ("fpo")) (("hed"::(Nil)))
Prop: sub_check (C (V ("uvd")) (C (C (V ("vaq")) (C (V ("dyq")) (C (C (V ("yaj")) (V ("gco"))) (V ("akv"))))) (V ("cle")))) (("odr"::(Nil))) = sub_check (C (V ("uvd")) (C (C (V ("vaq")) (C (V ("dyq")) (C (C (V ("yaj")) (V ("gco"))) (V ("akv"))))) (V ("cle")))) ((Nil))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
case mem (string2) (string_list1)
reflexivity
validate generalize_common_subterm_goal
Prop: sub_check (P ("spa") (C (V ("abw")) (P ("agu") (P ("xbt") (P ("brm") (P ("wue") (V ("who")))))))) (("fbp"::("wne"::(Nil)))) = sub_check (P ("spa") (C (V ("abw")) (P ("agu") (P ("xbt") (P ("brm") (P ("wue") (V ("who")))))))) (("wne"::(Nil)))
Prop: sub_check (V ("zqi")) (("zvz"::("wau"::("yuq"::(Nil))))) = sub_check (V ("zqi")) (("wau"::("yuq"::(Nil))))
Prop: sub_check (C (V ("rbu")) (P ("iuo") (V ("hcl")))) (("ooj"::("kar"::(Nil)))) = sub_check (C (V ("rbu")) (P ("iuo") (V ("hcl")))) (("kar"::(Nil)))
=================================================
Progress: 949


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 21.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:29.)
rewrite Case1 in goal at 1(rank:29.)
rewrite Case1 in goal at 2(rank:29.)
=================================================
Progress: 950


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 21.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite <- Case1 in goal at 0
rewrite Cond1 in goal at 0
simpl in goal
validate generalize_common_subterm_goal
Prop: sub_check (V ("cxq")) ((Nil)) = sub_check (V ("cxq")) (("eqv"::(Nil)))
Prop: sub_check (P ("vzh") (V ("ush"))) (("obu"::(Nil))) = sub_check (P ("vzh") (V ("ush"))) (("ddp"::("obu"::(Nil))))
Prop: sub_check (V ("aix")) ((Nil)) = sub_check (V ("aix")) (("fjq"::(Nil)))
Lemma List
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 951


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro string1(rank:13.)
=================================================
Progress: 952


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

5 conjecture(s) more...
>>> intro string1(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:13.)
=================================================
Progress: 953


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

5 conjecture(s) more...
>>> intro string_list1(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:13.)
=================================================
Progress: 954


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

5 conjecture(s) more...
>>> intro Cond1(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
---------------------------------------
forall (lambda1:lambda), sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:15.)
=================================================
Progress: 955


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
---------------------------------------
forall (lambda1:lambda), sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

5 conjecture(s) more...
>>> induction lambda1(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
sub_check (V (string2)) (string_list1) = sub_check (V (string2)) ((string1::string_list1))

2 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:15.)
=================================================
Progress: 956


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
sub_check (V (string2)) (string_list1) = sub_check (V (string2)) ((string1::string_list1))

2 goal(s) more...

5 conjecture(s) more...
>>> simpl in goal(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
mem (string2) (string_list1) = if string_eq (string1) (string2) then true else mem (string2) (string_list1)

2 goal(s) more...

5 conjecture(s) more...
Tactic List : 5
case string_eq (string1) (string2)(rank:16.)
rewrite lemma3 in goal at 0(rank:31.)
rewrite lemma3 in goal at 1(rank:31.)
rewrite lemma3 in goal at 2(rank:31.)
rewrite <- Cond1 in goal at 0(rank:31.)
=================================================
Progress: 957


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
mem (string2) (string_list1) = if string_eq (string1) (string2) then true else mem (string2) (string_list1)

2 goal(s) more...

5 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 16.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
mem (string2) (string_list1) = true

3 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 1(rank:16.)
=================================================
Progress: 958


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
mem (string2) (string_list1) = true

3 goal(s) more...

5 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 1(rank : 16.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string2) (string_list1) = true

3 goal(s) more...

5 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:16.)
rewrite lemma3 in goal at 0(rank:32.)
rewrite <- Cond1 in goal at 0(rank:24.)
=================================================
Progress: 959


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string2) (string_list1) = true

3 goal(s) more...

5 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 16.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string1) (string_list1) = true

3 goal(s) more...

5 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:24.)
rewrite lemma3 in goal at 0(rank:32.)
rewrite <- Cond1 in goal at 0(rank:24.)
=================================================
Progress: 960


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string_eq (string1) (string2) = false -> mem (string2) (string_list1) = false -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string2::(string1::string_list1)))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string_eq (string1) (string2) = false -> mem (string2) (string_list1) = false -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string2::(string1::string_list1)))

0 goal(s) more...

5 conjecture(s) more...
>>> intro string2(rank : 21.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string_eq (string1) (string2) = false -> mem (string2) (string_list1) = false -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string2::(string1::string_list1)))
string1 : string
string2 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list1) = true -> string_eq (string1) (string2) = false -> mem (string2) (string_list1) = false -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string2::(string1::string_list1)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:21.)
=================================================
Progress: 961


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
case mem (string2) (string_list1)(rank:14.)
rewrite IH1 in goal at 0(rank:29.)
rewrite lemma3 in goal at 0(rank:29.)
=================================================
Progress: 962


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

4 conjecture(s) more...
>>> case mem (string2) (string_list1)(rank : 14.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string2::string_list1))

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:14.)
rewrite IH1 in goal at 0(rank:22.)
=================================================
Progress: 963


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string2::string_list1))

3 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 14.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:22.)
rewrite <- IH1 in goal at 0(rank:22.)
=================================================
Progress: 964


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if true then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 21.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if true then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite <- Case1 in goal at 1
rewrite Cond1 in goal at 0
rewrite IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: if true then sub_check (P ("tcf") (V ("wvh"))) ((Nil)) else sub_check (P ("tcf") (V ("wvh"))) (("beh"::(Nil))) = sub_check (P ("tcf") (V ("wvh"))) (("iei"::(Nil)))
Prop: if true then sub_check (V ("uyd")) ((Nil)) else sub_check (V ("uyd")) (("itr"::(Nil))) = sub_check (V ("uyd")) (("kqe"::(Nil)))
Prop: if true then sub_check (V ("lgz")) (("ayw"::(Nil))) else sub_check (V ("lgz")) (("xrg"::("ayw"::(Nil)))) = sub_check (V ("lgz")) (("ymm"::("ayw"::(Nil))))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite <- Case1 in goal at 1
rewrite Cond1 in goal at 0
validate generalize_common_subterm_goal
Prop: if true then sub_check (V ("vrp")) (("kie"::(Nil))) else sub_check (V ("vrp")) (("pku"::("kie"::(Nil)))) = sub_check (V ("vrp")) (("kie"::(Nil)))
Prop: if true then sub_check (V ("slm")) (("vwi"::(Nil))) else sub_check (V ("slm")) (("pjs"::("vwi"::(Nil)))) = sub_check (V ("slm")) (("vwi"::(Nil)))
Prop: if true then sub_check (C (P ("pxs") (P ("lud") (C (V ("vqc")) (P ("gtr") (V ("okj")))))) (V ("xyl"))) (("zzo"::(Nil))) else sub_check (C (P ("pxs") (P ("lud") (C (V ("vqc")) (P ("gtr") (V ("okj")))))) (V ("xyl"))) (("nht"::("zzo"::(Nil)))) = sub_check (C (P ("pxs") (P ("lud") (C (V ("vqc")) (P ("gtr") (V ("okj")))))) (V ("xyl"))) (("zzo"::(Nil)))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite <- Case1 in goal at 1
validate generalize_common_subterm_goal
Prop: if mem ("ddv") ((Nil)) then sub_check (V ("vzf")) ((Nil)) else sub_check (V ("vzf")) (("igs"::(Nil))) = sub_check (V ("vzf")) ((Nil))
Prop: if mem ("duz") (("swo"::("cgp"::(Nil)))) then sub_check (C (V ("cnm")) (V ("lhc"))) (("swo"::("cgp"::(Nil)))) else sub_check (C (V ("cnm")) (V ("lhc"))) (("oei"::("swo"::("cgp"::(Nil))))) = sub_check (C (V ("cnm")) (V ("lhc"))) (("swo"::("cgp"::(Nil))))
Prop: if mem ("fze") ((Nil)) then sub_check (V ("uvu")) ((Nil)) else sub_check (V ("uvu")) (("woz"::(Nil))) = sub_check (V ("uvu")) ((Nil))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
validate generalize_common_subterm_goal
Prop: if mem ("muo") ((Nil)) then sub_check (V ("eyc")) ((Nil)) else sub_check (V ("eyc")) (("muo"::(Nil))) = sub_check (V ("eyc")) ((Nil))
Prop: if mem ("sco") (("yns"::(Nil))) then sub_check (V ("dkm")) (("yns"::(Nil))) else sub_check (V ("dkm")) (("sco"::("yns"::(Nil)))) = sub_check (V ("dkm")) (("yns"::(Nil)))
Prop: if mem ("tew") ((Nil)) then sub_check (V ("wce")) ((Nil)) else sub_check (V ("wce")) (("tew"::(Nil))) = sub_check (V ("wce")) ((Nil))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
Prop: if mem ("ziw") ((Nil)) then sub_check (V ("maq")) ((Nil)) else sub_check (V ("maq")) (("ziw"::(Nil))) = sub_check (V ("maq")) ((Nil))
Prop: if mem ("uiy") ((Nil)) then sub_check (V ("sjl")) ((Nil)) else sub_check (V ("sjl")) (("uiy"::(Nil))) = sub_check (V ("sjl")) ((Nil))
Prop: if mem ("swl") ((Nil)) then sub_check (P ("isc") (P ("zfn") (V ("fzo")))) ((Nil)) else sub_check (P ("isc") (P ("zfn") (V ("fzo")))) (("swl"::(Nil))) = sub_check (P ("isc") (P ("zfn") (V ("fzo")))) ((Nil))
Lemma List
forall (lambda1:lambda) (string1:string) (string_list1:string list), if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
Lemma List
forall (lambda1:lambda) (string1:string) (string_list1:string list), if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
Lemma List
forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) (string_list1)
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
Lemma List
forall (lambda1:lambda) (string1:string) (string_list1:string list), if true then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if true then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
Lemma List
forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> if true then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string1::string_list1))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if true then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 965


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string_list1:string list), if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro string1(rank:13.)
=================================================
Progress: 966


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string_list1:string list), if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro string1(rank:13.)
=================================================
Progress: 967


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) (string_list1)(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) (string_list1)

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) (string_list1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro string1(rank:17.)
=================================================
Progress: 968


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if true then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string_list1:string list), if true then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), if true then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), if true then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13.)
=================================================
Progress: 969


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if true then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> if true then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string1::string_list1))(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> if true then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string1::string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> if true then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:17.)
=================================================
Progress: 970


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

0 goal(s) more...

5 conjecture(s) more...
>>> intro string1(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:13.)
=================================================
Progress: 971


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

0 goal(s) more...

5 conjecture(s) more...
>>> intro string1(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:13.)
=================================================
Progress: 972


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), if true then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), if true then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)

0 goal(s) more...

5 conjecture(s) more...
>>> reflexivity(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if true then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
original goal
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
lemma
forall (lambda1:lambda) (string1:string) (string_list1:string list), if true then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
tactics
assert forall (lambda1:lambda) (string1:string) (string_list1:string list), if true then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
reflexivity
Deduplication: 2
Tactic List : 1
reflexivity(rank:12.)
=================================================
Progress: 973


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
---------------------------------------
if true then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1)) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::(string1::string_list1)))

1 goal(s) more...

4 conjecture(s) more...
Deduplication: 64
Tactic List : 1
case mem (string2) (string_list1)(rank:13.)
=================================================
Progress: 974


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::string_list1)) = if mem (string2) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string2::(string1::string_list1)))

1 goal(s) more...

4 conjecture(s) more...
>>> case mem (string2) (string_list1)(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = false
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12.)
=================================================
Progress: 975


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = false
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string_eq (string1) (string2) = false
Case2 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string2::(string1::string_list1)))

1 goal(s) more...

4 conjecture(s) more...
Deduplication: 1
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite <- Case1 in goal at 1
rewrite Cond1 in goal at 0
assert forall (lambda1:lambda) (string1:string) (string_list1:string list), if true then sub_check (lambda1) (string_list1) else sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) (string_list1)
reflexivity
reflexivity
case mem (string2) (string_list1)
reflexivity
validate generalize_common_subterm_goal
Prop: sub_check (V ("tsb")) (("rty"::("tdu"::(Nil)))) = sub_check (V ("tsb")) (("rty"::("zgy"::("tdu"::(Nil)))))
Prop: sub_check (V ("dpt")) (("yzm"::(Nil))) = sub_check (V ("dpt")) (("yzm"::("rpb"::(Nil))))
Prop: sub_check (V ("rhs")) (("hlx"::(Nil))) = sub_check (V ("rhs")) (("hlx"::("qhh"::(Nil))))
=================================================
Progress: 976


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string2::(string1::string_list1)))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string2::(string1::string_list1)))

0 goal(s) more...

5 conjecture(s) more...
>>> intro string1(rank : 21.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string2::(string1::string_list1)))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string2::(string1::string_list1)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro string2(rank:21.)
=================================================
Progress: 977


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string2::(string1::string_list1)))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string2::(string1::string_list1)))

0 goal(s) more...

5 conjecture(s) more...
>>> intro string2(rank : 21.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string2::(string1::string_list1)))
string1 : string
string2 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string2::(string1::string_list1)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:21.)
=================================================
Progress: 978


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string2::(string1::string_list1)))
string1 : string
string2 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string2::(string1::string_list1)))

0 goal(s) more...

5 conjecture(s) more...
>>> intro string_list1(rank : 21.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string2::(string1::string_list1)))
string1 : string
string2 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda), mem (string1) (string_list1) = true -> mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string2::(string1::string_list1)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:21.)
=================================================
Progress: 979


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string2::(string1::string_list1)))
string1 : string
string2 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda), mem (string1) (string_list1) = true -> mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string2::(string1::string_list1)))

0 goal(s) more...

5 conjecture(s) more...
>>> intro Cond1(rank : 21.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string2::(string1::string_list1)))
string1 : string
string2 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
---------------------------------------
forall (lambda1:lambda), mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string2::(string1::string_list1)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:21.)
=================================================
Progress: 980


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string2::(string1::string_list1)))
string1 : string
string2 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
---------------------------------------
forall (lambda1:lambda), mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string2::(string1::string_list1)))

0 goal(s) more...

5 conjecture(s) more...
>>> intro Cond2(rank : 21.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string2::(string1::string_list1)))
string1 : string
string2 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
Cond2 : mem (string2) (string_list1) = false
---------------------------------------
forall (lambda1:lambda), string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string2::(string1::string_list1)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:21.)
=================================================
Progress: 981


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string2::(string1::string_list1)))
string1 : string
string2 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
Cond2 : mem (string2) (string_list1) = false
---------------------------------------
forall (lambda1:lambda), string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string2::(string1::string_list1)))

0 goal(s) more...

5 conjecture(s) more...
>>> intro Cond3(rank : 21.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> mem (string2) (string_list1) = false -> string_eq (string1) (string2) = false -> sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string2::(string1::string_list1)))
string1 : string
string2 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
Cond2 : mem (string2) (string_list1) = false
Cond3 : string_eq (string1) (string2) = false
---------------------------------------
forall (lambda1:lambda), sub_check (lambda1) ((string2::string_list1)) = sub_check (lambda1) ((string2::(string1::string_list1)))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:23.)
=================================================
Progress: 982


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 22.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string2) (string1)
reflexivity
rewrite IH1 in goal at 0
reflexivity
simpl in goal
intro string_list1
rewrite IH1 in goal at 0
rewrite <- IH1 in goal at 2
Prop: sub_check (V ("idu")) ((Nil)) = if mem ("xyj") ((Nil)) then sub_check_ta1 (V ("idu")) ((Nil)) else sub_check (V ("idu")) ((Nil))
Prop: sub_check (V ("ryj")) (("wmy"::(Nil))) = if mem ("tna") ((Nil)) then sub_check_ta1 (V ("ryj")) ((Nil)) else sub_check (V ("ryj")) (("wmy"::(Nil)))
Prop: sub_check (V ("gmz")) (("zic"::(Nil))) = if mem ("aqu") ((Nil)) then sub_check_ta1 (V ("gmz")) ((Nil)) else sub_check (V ("gmz")) (("zic"::(Nil)))
previous tactics
simpl in goal
case string_eq (string2) (string1)
reflexivity
rewrite IH1 in goal at 0
reflexivity
simpl in goal
intro string_list1
rewrite IH1 in goal at 0
Prop: sub_check (C (C (P ("swd") (V ("hsz"))) (C (V ("xde")) (C (V ("zvr")) (V ("wvx"))))) (V ("lzd"))) ((Nil)) = if mem ("ewi") (("fkk"::(Nil))) then sub_check (C (C (P ("swd") (V ("hsz"))) (C (V ("xde")) (C (V ("zvr")) (V ("wvx"))))) (V ("lzd"))) (("fkk"::(Nil))) else sub_check (C (C (P ("swd") (V ("hsz"))) (C (V ("xde")) (C (V ("zvr")) (V ("wvx"))))) (V ("lzd"))) ((Nil))
Prop: sub_check (P ("svf") (V ("cqi"))) ((Nil)) = if mem ("rrp") ((Nil)) then sub_check (P ("svf") (V ("cqi"))) ((Nil)) else sub_check (P ("svf") (V ("cqi"))) ((Nil))
Prop: sub_check (C (V ("qid")) (V ("jed"))) (("lfm"::(Nil))) = if mem ("uzk") (("cbk"::(Nil))) then sub_check (C (V ("qid")) (V ("jed"))) (("cbk"::(Nil))) else sub_check (C (V ("qid")) (V ("jed"))) (("lfm"::(Nil)))
previous tactics
simpl in goal
case string_eq (string2) (string1)
reflexivity
rewrite IH1 in goal at 0
reflexivity
simpl in goal
intro string_list1
Prop: sub_check_ta1 (V ("laj")) (("bjv"::("dmg"::(Nil)))) = if mem ("ops") (("akf"::(Nil))) then sub_check (V ("laj")) (("akf"::(Nil))) else sub_check (V ("laj")) (("bjv"::("dmg"::(Nil))))
Prop: sub_check_ta1 (V ("dsz")) ((Nil)) = if mem ("cun") (("rrx"::(Nil))) then sub_check (V ("dsz")) (("rrx"::(Nil))) else sub_check (V ("dsz")) ((Nil))
Prop: sub_check_ta1 (P ("psc") (V ("kgq"))) (("qnv"::(Nil))) = if mem ("jpz") (("uyy"::(Nil))) then sub_check (P ("psc") (V ("kgq"))) (("uyy"::(Nil))) else sub_check (P ("psc") (V ("kgq"))) (("qnv"::(Nil)))
Lemma List
forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
End of Lemma List


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1))

1 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
End of Lemma List


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1))

1 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 983


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)(rank : 0.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)

---------------------------------------
forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7.)
=================================================
Progress: 984


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda2) (string_list1) else sub_check (lambda2) ((string1::string_list1))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (lambda1) (string_list2) else sub_check (lambda1) (string_list1)(rank : 0.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (lambda1) (string_list2) else sub_check (lambda1) (string_list1)

---------------------------------------
forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (lambda1) (string_list2) else sub_check (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7.)
=================================================
Progress: 985


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)

---------------------------------------
forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
string1 : string
---------------------------------------
forall (string_list1:string list) (lambda1:lambda) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:7.)
=================================================
Progress: 986


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (lambda1) (string_list2) else sub_check (lambda1) (string_list1)

---------------------------------------
forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (lambda1) (string_list2) else sub_check (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
string1 : string
---------------------------------------
forall (string_list1:string list) (lambda1:lambda) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (lambda1) (string_list2) else sub_check (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:7.)
=================================================
Progress: 987


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
string1 : string
---------------------------------------
forall (string_list1:string list) (lambda1:lambda) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string_list1(rank : 7.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string_list2(rank:7.)
=================================================
Progress: 988


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
string1 : string
---------------------------------------
forall (string_list1:string list) (lambda1:lambda) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (lambda1) (string_list2) else sub_check (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string_list1(rank : 7.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (lambda1) (string_list2) else sub_check (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string_list2(rank:7.)
=================================================
Progress: 989


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string_list2(rank : 7.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
string_list2 : string list
---------------------------------------
forall (lambda1:lambda), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case mem (string1) (string_list2)(rank:8.)
=================================================
Progress: 990


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (lambda1) (string_list2) else sub_check (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string_list2(rank : 7.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
string_list2 : string list
---------------------------------------
forall (lambda1:lambda), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (lambda1) (string_list2) else sub_check (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case mem (string1) (string_list2)(rank:8.)
=================================================
Progress: 991


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
string_list2 : string list
---------------------------------------
forall (lambda1:lambda), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> case mem (string1) (string_list2)(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
string_list2 : string list
Case1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda), sub_check (lambda1) (string_list1) = sub_check (lambda1) (string_list2)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:10.)
=================================================
Progress: 992


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
string_list2 : string list
---------------------------------------
forall (lambda1:lambda), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (lambda1) (string_list2) else sub_check (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> case mem (string1) (string_list2)(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
string_list2 : string list
Case1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda), sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) (string_list2)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:10.)
=================================================
Progress: 993


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
string_list2 : string list
Case1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda), sub_check (lambda1) (string_list1) = sub_check (lambda1) (string_list2)

1 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 10.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
string_list2 : string list
Case1 : mem (string1) (string_list2) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
sub_check (V (string2)) (string_list1) = sub_check (V (string2)) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 994


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
string_list2 : string list
Case1 : mem (string1) (string_list2) = true
---------------------------------------
forall (lambda1:lambda), sub_check (lambda1) (string_list1) = sub_check_ta1 (lambda1) (string_list2)

1 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 10.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
string_list2 : string list
Case1 : mem (string1) (string_list2) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
sub_check (V (string2)) (string_list1) = sub_check_ta1 (V (string2)) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 995


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
string_list2 : string list
Case1 : mem (string1) (string_list2) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
sub_check (V (string2)) (string_list1) = sub_check (V (string2)) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
string_list2 : string list
Case1 : mem (string1) (string_list2) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
mem (string2) (string_list1) = mem (string2) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: mem ("fdg") ((Nil)) = mem ("fdg") ((Nil))
Prop: mem ("dij") ((Nil)) = mem ("dij") ((Nil))
Prop: mem ("exv") ((Nil)) = mem ("exv") ((Nil))
=================================================
Progress: 996


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
string_list2 : string list
Case1 : mem (string1) (string_list2) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
sub_check (V (string2)) (string_list1) = sub_check_ta1 (V (string2)) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
string_list2 : string list
Case1 : mem (string1) (string_list2) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
mem (string2) (string_list1) = is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: mem ("rzt") ((Nil)) = is_mem_ta1 (("rbk"::(Nil))) ("rzt")
Prop: mem ("dms") (("cnd"::("jcg"::(Nil)))) = is_mem_ta1 (("pzg"::("vtg"::(Nil)))) ("dms")
Prop: mem ("hev") (("fqw"::(Nil))) = is_mem_ta1 (("ofh"::("zqb"::(Nil)))) ("hev")
Lemma List
forall (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list1) = is_mem_ta1 (string_list2) (string1)
End of Lemma List


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
string_list2 : string list
Case1 : mem (string1) (string_list2) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
mem (string2) (string_list1) = is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 997


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
string1 : string
string_list1 : string list
string_list2 : string list
Case1 : mem (string1) (string_list2) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
mem (string2) (string_list1) = is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list1) = is_mem_ta1 (string_list2) (string1)(rank : 0.)


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list1) = is_mem_ta1 (string_list2) (string1)

---------------------------------------
forall (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list1) = is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction string_list1(rank:10.)
=================================================
Progress: 998


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list1) = is_mem_ta1 (string_list2) (string1)

---------------------------------------
forall (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list1) = is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> induction string_list1(rank : 10.)


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list1) = is_mem_ta1 (string_list2) (string1)
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
forall (string1:string) (string_list2:string list), mem (string1) ((Nil)) = is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 999


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list1) = is_mem_ta1 (string_list2) (string1)
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
forall (string1:string) (string_list2:string list), mem (string1) ((Nil)) = is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list1) = is_mem_ta1 (string_list2) (string1)
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
forall (string1:string) (string_list2:string list), false = is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction string_list2(rank:11.)
=================================================
Progress: 1000


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list1) = is_mem_ta1 (string_list2) (string1)
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
forall (string1:string) (string_list2:string list), false = is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> induction string_list2(rank : 11.)


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list1) = is_mem_ta1 (string_list2) (string1)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
Base2 : string_list2 = (Nil)
---------------------------------------
forall (string1:string), false = is_mem_ta1 ((Nil)) (string1)

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 1001


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list1) = is_mem_ta1 (string_list2) (string1)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
Base2 : string_list2 = (Nil)
---------------------------------------
forall (string1:string), false = is_mem_ta1 ((Nil)) (string1)

2 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list1) = is_mem_ta1 (string_list2) (string1)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = is_mem_ta1 (string_list3) (string1)
Inductive1 : string_list2 = (string2::string_list3)
---------------------------------------
forall (string1:string), false = is_mem_ta1 ((string2::string_list3)) (string1)

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1002


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list1) = is_mem_ta1 (string_list2) (string1)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = is_mem_ta1 (string_list3) (string1)
Inductive1 : string_list2 = (string2::string_list3)
---------------------------------------
forall (string1:string), false = is_mem_ta1 ((string2::string_list3)) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list1) = is_mem_ta1 (string_list2) (string1)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = is_mem_ta1 (string_list3) (string1)
Inductive1 : string_list2 = (string2::string_list3)
---------------------------------------
forall (string1:string), false = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list3) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:10.)
=================================================
Progress: 1003


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list1) = is_mem_ta1 (string_list2) (string1)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = is_mem_ta1 (string_list3) (string1)
Inductive1 : string_list2 = (string2::string_list3)
---------------------------------------
forall (string1:string), false = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list3) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 10.)


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list1) = is_mem_ta1 (string_list2) (string1)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = is_mem_ta1 (string_list3) (string1)
Inductive1 : string_list2 = (string2::string_list3)
string1 : string
---------------------------------------
false = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list3) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
case string_eq (string2) (string1)(rank:11.)
rewrite <- IH1 in goal at 0(rank:18.)
=================================================
Progress: 1004


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list1) = is_mem_ta1 (string_list2) (string1)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = is_mem_ta1 (string_list3) (string1)
Inductive1 : string_list2 = (string2::string_list3)
string1 : string
---------------------------------------
false = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list3) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 11.)


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list1) = is_mem_ta1 (string_list2) (string1)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = is_mem_ta1 (string_list3) (string1)
Inductive1 : string_list2 = (string2::string_list3)
string1 : string
Case1 : string_eq (string2) (string1) = true
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 1(rank:11.)
=================================================
Progress: 1005


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list1) = is_mem_ta1 (string_list2) (string1)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = is_mem_ta1 (string_list3) (string1)
Inductive1 : string_list2 = (string2::string_list3)
string1 : string
Case1 : string_eq (string2) (string1) = true
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 1(rank : 11.)


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list1) = is_mem_ta1 (string_list2) (string1)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = is_mem_ta1 (string_list3) (string1)
Inductive1 : string_list2 = (string2::string_list3)
string1 : string
Case1 : string2 = string1
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1006


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list1) = is_mem_ta1 (string_list2) (string1)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = is_mem_ta1 (string_list3) (string1)
Inductive1 : string_list2 = (string2::string_list3)
string1 : string
---------------------------------------
false = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list3) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 18.)


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list1) = is_mem_ta1 (string_list2) (string1)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = is_mem_ta1 (string_list3) (string1)
Inductive1 : string_list2 = (string2::string_list3)
string1 : string
---------------------------------------
false = if string_eq (string2) (string1) then true else false

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string1)(rank:11.)
=================================================
Progress: 1007


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list1) = is_mem_ta1 (string_list2) (string1)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = is_mem_ta1 (string_list3) (string1)
Inductive1 : string_list2 = (string2::string_list3)
string1 : string
---------------------------------------
false = if string_eq (string2) (string1) then true else false

1 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 11.)


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list1) = is_mem_ta1 (string_list2) (string1)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = is_mem_ta1 (string_list3) (string1)
Inductive1 : string_list2 = (string2::string_list3)
string1 : string
Case1 : string_eq (string2) (string1) = true
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 1(rank:11.)
=================================================
Progress: 1008


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list1) = is_mem_ta1 (string_list2) (string1)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = is_mem_ta1 (string_list3) (string1)
Inductive1 : string_list2 = (string2::string_list3)
string1 : string
Case1 : string_eq (string2) (string1) = true
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 1(rank : 11.)


1st goal of : forall (string1:string) (string_list1:string list) (string_list2:string list), mem (string1) (string_list1) = is_mem_ta1 (string_list2) (string1)
string_list1 : string list
Base1 : string_list1 = (Nil)
string_list2 : string list
string2 : string
string_list3 : string list
IH1 : forall (string1:string), false = is_mem_ta1 (string_list3) (string1)
Inductive1 : string_list2 = (string2::string_list3)
string1 : string
Case1 : string2 = string1
---------------------------------------
false = true

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1009


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))

3 goal(s) more...

4 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 22.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13.)
=================================================
Progress: 1010


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

3 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
Deduplication: 2
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:13.)
rewrite Case1 in goal at 0(rank:21.)
rewrite <- IH1 in goal at 0(rank:29.)
=================================================
Progress: 1011


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
rewrite <- IH1 in goal at 0(rank:29.)
rewrite <- IH1 in goal at 1(rank:29.)
rewrite <- IH1 in goal at 2(rank:29.)
=================================================
Progress: 1012


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 21.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = false
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string2::string_list1))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
case mem (string2) (string_list1)
rewrite IH1 in goal at 0
reflexivity
validate generalize_common_subterm_goal
Prop: sub_check (V ("xuc")) (("ftz"::(Nil))) = sub_check (V ("xuc")) (("dqy"::(Nil)))
Prop: sub_check (V ("cmy")) (("krc"::("hlw"::(Nil)))) = sub_check (V ("cmy")) (("aay"::("hlw"::(Nil))))
Prop: sub_check (V ("szd")) (("neu"::(Nil))) = sub_check (V ("szd")) (("tgd"::(Nil)))
=================================================
Progress: 1013


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))

3 goal(s) more...

4 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 22.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:30.)
rewrite Case1 in goal at 1(rank:30.)
rewrite Case1 in goal at 2(rank:30.)
=================================================
Progress: 1014


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))

3 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 22.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite <- Case1 in goal at 2
case mem (string2) (string_list1)
validate generalize_common_subterm_goal
Prop: sub_check (V ("liu")) ((Nil)) = sub_check (V ("liu")) (("acv"::(Nil)))
Prop: sub_check (V ("pau")) ((Nil)) = sub_check (V ("pau")) (("mmy"::(Nil)))
Prop: sub_check (V ("nyx")) ((Nil)) = sub_check (V ("nyx")) (("esu"::(Nil)))
=================================================
Progress: 1015


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
Case2 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))

3 goal(s) more...

4 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 22.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
Case2 : string1 = string2
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
rewrite Case2 in goal at 0(rank:30.)
rewrite Case2 in goal at 1(rank:30.)
rewrite Case2 in goal at 2(rank:30.)
=================================================
Progress: 1016


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
Case2 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))

3 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 22.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : mem (string2) (string_list1) = true
Case2 : string1 = string2
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case mem (string2) (string_list1)
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 1
validate generalize_common_subterm_goal
Prop: sub_check (C (V ("xev")) (P ("pgt") (V ("aqu")))) (("ipe"::(Nil))) = sub_check (C (V ("xev")) (P ("pgt") (V ("aqu")))) (("itx"::("ipe"::(Nil))))
Prop: sub_check (V ("hcx")) (("mhj"::(Nil))) = sub_check (V ("hcx")) (("wuv"::("mhj"::(Nil))))
Prop: sub_check (P ("ztv") (V ("ooe"))) (("czv"::(Nil))) = sub_check (P ("ztv") (V ("ooe"))) (("hbc"::("czv"::(Nil))))
previous tactics
simpl in goal
case mem (string2) (string_list1)
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
Prop: sub_check (V ("cyd")) ((Nil)) = sub_check (V ("cyd")) (("ncg"::(Nil)))
Prop: sub_check (C (V ("lec")) (V ("amt"))) ((Nil)) = sub_check (C (V ("lec")) (V ("amt"))) (("goy"::(Nil)))
Prop: sub_check (P ("foi") (V ("tcw"))) (("ojw"::(Nil))) = sub_check (P ("foi") (V ("tcw"))) (("hmm"::("ojw"::(Nil))))
=================================================
Progress: 1017


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string2::string_list1))

3 goal(s) more...

4 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 22.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string2::string_list1))

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:14.)
=================================================
Progress: 1018


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string2::string_list1))

3 goal(s) more...

4 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 14.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string2::string_list1)) = sub_check (lambda2) ((string2::string_list1))

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite Case1 in goal at 0
case mem (string2) (string_list1)
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: sub_check (V ("hyo")) (("lag"::(Nil))) = sub_check (V ("hyo")) (("kbc"::(Nil)))
Prop: sub_check (V ("bve")) (("kzm"::(Nil))) = sub_check (V ("bve")) (("xrs"::(Nil)))
Prop: sub_check (V ("xvw")) (("xtd"::("rvo"::(Nil)))) = sub_check (V ("xvw")) (("qvs"::("rvo"::(Nil))))
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite Case1 in goal at 0
case mem (string2) (string_list1)
validate generalize_common_subterm_goal
Prop: sub_check (V ("zbj")) ((Nil)) = sub_check (V ("zbj")) (("tvx"::(Nil)))
Prop: sub_check (V ("xuh")) ((Nil)) = sub_check (V ("xuh")) (("kod"::(Nil)))
Prop: sub_check (P ("zbj") (C (V ("xuc")) (C (C (P ("ycq") (V ("kzv"))) (V ("kxd"))) (V ("mot"))))) ((Nil)) = sub_check (P ("zbj") (C (V ("xuc")) (C (C (P ("ycq") (V ("kzv"))) (V ("kxd"))) (V ("mot"))))) (("itp"::(Nil)))
Lemma List
forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) ((string2::string_list1))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string2::string_list1))

3 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 1019


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string2::string_list1))

3 goal(s) more...

4 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) ((string2::string_list1))(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) ((string2::string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro string1(rank:21.)
=================================================
Progress: 1020


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) ((string2::string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

5 conjecture(s) more...
>>> intro string1(rank : 21.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) ((string2::string_list1))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro string2(rank:21.)
=================================================
Progress: 1021


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) ((string2::string_list1))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

5 conjecture(s) more...
>>> intro string2(rank : 21.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) ((string2::string_list1))
string1 : string
string2 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:21.)
=================================================
Progress: 1022


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) ((string2::string_list1))
string1 : string
string2 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

5 conjecture(s) more...
>>> intro string_list1(rank : 21.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) ((string2::string_list1))
string1 : string
string2 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:21.)
=================================================
Progress: 1023


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) ((string2::string_list1))
string1 : string
string2 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

5 conjecture(s) more...
>>> intro Cond1(rank : 21.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) ((string2::string_list1))
string1 : string
string2 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
---------------------------------------
forall (lambda1:lambda), string1 = string2 -> mem (string2) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:21.)
=================================================
Progress: 1024


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) ((string2::string_list1))
string1 : string
string2 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
---------------------------------------
forall (lambda1:lambda), string1 = string2 -> mem (string2) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

5 conjecture(s) more...
>>> intro Cond2(rank : 21.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) ((string2::string_list1))
string1 : string
string2 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
Cond2 : string1 = string2
---------------------------------------
forall (lambda1:lambda), mem (string2) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:21.)
=================================================
Progress: 1025


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) ((string2::string_list1))
string1 : string
string2 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
Cond2 : string1 = string2
---------------------------------------
forall (lambda1:lambda), mem (string2) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

5 conjecture(s) more...
>>> intro Cond3(rank : 21.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> string1 = string2 -> mem (string2) (string_list1) = true -> sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) ((string2::string_list1))
string1 : string
string2 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
Cond2 : string1 = string2
Cond3 : mem (string2) (string_list1) = true
---------------------------------------
forall (lambda1:lambda), sub_check (lambda1) ((string1::string_list1)) = sub_check (lambda1) ((string2::string_list1))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 3
rewrite Cond2 in goal at 0(rank:29.)
induction lambda1(rank:31.)
rewrite <- Cond2 in goal at 0(rank:29.)
=================================================
Progress: 1026


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))

3 goal(s) more...

4 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 22.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite Case1 in goal at 0
case mem (string2) (string_list1)
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: sub_check (P ("jgt") (V ("qgt"))) ((Nil)) = sub_check (P ("jgt") (V ("qgt"))) (("zax"::(Nil)))
Prop: sub_check (V ("bxv")) ((Nil)) = sub_check (V ("bxv")) (("ken"::(Nil)))
Prop: sub_check (V ("jlv")) (("glb"::(Nil))) = sub_check (V ("jlv")) (("tvp"::("glb"::(Nil))))
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite Case1 in goal at 0
case mem (string2) (string_list1)
validate generalize_common_subterm_goal
Prop: sub_check (V ("qpk")) ((Nil)) = sub_check (V ("qpk")) (("kyn"::(Nil)))
Prop: sub_check (V ("vuq")) (("zbn"::("zgv"::("xxx"::(Nil))))) = sub_check (V ("vuq")) (("gho"::("zbn"::("zgv"::("xxx"::(Nil))))))
Prop: sub_check (P ("sdt") (V ("vfl"))) (("cdc"::(Nil))) = sub_check (P ("sdt") (V ("vfl"))) (("gdw"::("cdc"::(Nil))))
=================================================
Progress: 1027


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))

3 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 22.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite Case1 in goal at 0
case mem (string2) (string_list1)
rewrite <- Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: sub_check (V ("hyp")) ((Nil)) = sub_check (V ("hyp")) (("hal"::(Nil)))
Prop: sub_check (V ("cfx")) ((Nil)) = sub_check (V ("cfx")) (("xtq"::(Nil)))
Prop: sub_check (V ("kas")) ((Nil)) = sub_check (V ("kas")) (("mfv"::(Nil)))
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite Case1 in goal at 0
case mem (string2) (string_list1)
validate generalize_common_subterm_goal
Prop: sub_check (C (P ("vxk") (V ("pqt"))) (V ("mxz"))) ((Nil)) = sub_check (C (P ("vxk") (V ("pqt"))) (V ("mxz"))) (("jxr"::(Nil)))
Prop: sub_check (V ("oek")) ((Nil)) = sub_check (V ("oek")) (("fgm"::(Nil)))
Prop: sub_check (P ("xnn") (V ("hgc"))) ((Nil)) = sub_check (P ("xnn") (V ("hgc"))) (("vpo"::(Nil)))
=================================================
Progress: 1028


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))

3 goal(s) more...

4 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 22.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13.)
=================================================
Progress: 1029


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

3 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 13.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : is_mem_ta1 (string_list1) (string1) = false
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
Deduplication: 2
Tactic List : 3
rewrite IH1 in goal at 0(rank:21.)
rewrite Case1 in goal at 0(rank:29.)
rewrite <- IH1 in goal at 0(rank:21.)
=================================================
Progress: 1030


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : is_mem_ta1 (string_list1) (string1) = false
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 21.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : is_mem_ta1 (string_list1) (string1) = false
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:29.)
rewrite Case1 in goal at 1(rank:29.)
rewrite Case1 in goal at 2(rank:29.)
=================================================
Progress: 1031


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : is_mem_ta1 (string_list1) (string1) = false
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 21.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : is_mem_ta1 (string_list1) (string1) = false
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite <- Case1 in goal at 0
rewrite <- IH1 in goal at 1
rewrite lemma3 in goal at 0
case is_mem_ta1 (string_list1) (string1)
rewrite IH1 in goal at 0
reflexivity
validate generalize_common_subterm_goal
Prop: sub_check (V ("jvq")) (("jen"::(Nil))) = sub_check (V ("jvq")) (("xvq"::("jen"::(Nil))))
Prop: sub_check (V ("jmk")) ((Nil)) = sub_check (V ("jmk")) (("bsw"::(Nil)))
Prop: sub_check (C (P ("nbs") (P ("num") (V ("wsc")))) (P ("vbr") (V ("haj")))) ((Nil)) = sub_check (C (P ("nbs") (P ("num") (V ("wsc")))) (P ("vbr") (V ("haj")))) (("xqh"::(Nil)))
Lemma List
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> is_mem_ta1 (string_list1) (string1) = false -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
End of Lemma List


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : is_mem_ta1 (string_list1) (string1) = false
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
=================================================
Progress: 1032


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : is_mem_ta1 (string_list1) (string1) = false
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))

2 goal(s) more...

4 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> is_mem_ta1 (string_list1) (string1) = false -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))(rank : 0.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> is_mem_ta1 (string_list1) (string1) = false -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> is_mem_ta1 (string_list1) (string1) = false -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro string1(rank:17.)
=================================================
Progress: 1033


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> is_mem_ta1 (string_list1) (string1) = false -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> is_mem_ta1 (string_list1) (string1) = false -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

5 conjecture(s) more...
>>> intro string1(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> is_mem_ta1 (string_list1) (string1) = false -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list1) = true -> is_mem_ta1 (string_list1) (string1) = false -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:17.)
=================================================
Progress: 1034


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> is_mem_ta1 (string_list1) (string1) = false -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), mem (string1) (string_list1) = true -> is_mem_ta1 (string_list1) (string1) = false -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

5 conjecture(s) more...
>>> intro string_list1(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> is_mem_ta1 (string_list1) (string1) = false -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda), mem (string1) (string_list1) = true -> is_mem_ta1 (string_list1) (string1) = false -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:17.)
=================================================
Progress: 1035


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> is_mem_ta1 (string_list1) (string1) = false -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda), mem (string1) (string_list1) = true -> is_mem_ta1 (string_list1) (string1) = false -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

5 conjecture(s) more...
>>> intro Cond1(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> is_mem_ta1 (string_list1) (string1) = false -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
---------------------------------------
forall (lambda1:lambda), is_mem_ta1 (string_list1) (string1) = false -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:17.)
=================================================
Progress: 1036


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> is_mem_ta1 (string_list1) (string1) = false -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
---------------------------------------
forall (lambda1:lambda), is_mem_ta1 (string_list1) (string1) = false -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

5 conjecture(s) more...
>>> intro Cond2(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> is_mem_ta1 (string_list1) (string1) = false -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
Cond2 : is_mem_ta1 (string_list1) (string1) = false
---------------------------------------
forall (lambda1:lambda), sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:19.)
=================================================
Progress: 1037


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> is_mem_ta1 (string_list1) (string1) = false -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
Cond2 : is_mem_ta1 (string_list1) (string1) = false
---------------------------------------
forall (lambda1:lambda), sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))

0 goal(s) more...

5 conjecture(s) more...
>>> induction lambda1(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> is_mem_ta1 (string_list1) (string1) = false -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
Cond2 : is_mem_ta1 (string_list1) (string1) = false
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
sub_check (V (string2)) (string_list1) = sub_check (V (string2)) ((string1::string_list1))

2 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:19.)
=================================================
Progress: 1038


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> is_mem_ta1 (string_list1) (string1) = false -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
Cond2 : is_mem_ta1 (string_list1) (string1) = false
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
sub_check (V (string2)) (string_list1) = sub_check (V (string2)) ((string1::string_list1))

2 goal(s) more...

5 conjecture(s) more...
>>> simpl in goal(rank : 19.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> is_mem_ta1 (string_list1) (string1) = false -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
Cond2 : is_mem_ta1 (string_list1) (string1) = false
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
mem (string2) (string_list1) = if string_eq (string1) (string2) then true else mem (string2) (string_list1)

2 goal(s) more...

5 conjecture(s) more...
Tactic List : 5
case string_eq (string1) (string2)(rank:20.)
rewrite lemma3 in goal at 0(rank:35.)
rewrite lemma3 in goal at 1(rank:35.)
rewrite lemma3 in goal at 2(rank:35.)
rewrite <- Cond1 in goal at 0(rank:35.)
=================================================
Progress: 1039


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> is_mem_ta1 (string_list1) (string1) = false -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
Cond2 : is_mem_ta1 (string_list1) (string1) = false
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
mem (string2) (string_list1) = if string_eq (string1) (string2) then true else mem (string2) (string_list1)

2 goal(s) more...

5 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> is_mem_ta1 (string_list1) (string1) = false -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
Cond2 : is_mem_ta1 (string_list1) (string1) = false
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
mem (string2) (string_list1) = true

3 goal(s) more...

5 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 1(rank:20.)
=================================================
Progress: 1040


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> is_mem_ta1 (string_list1) (string1) = false -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
Cond2 : is_mem_ta1 (string_list1) (string1) = false
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
mem (string2) (string_list1) = true

3 goal(s) more...

5 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 1(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> is_mem_ta1 (string_list1) (string1) = false -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
Cond2 : is_mem_ta1 (string_list1) (string1) = false
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string2) (string_list1) = true

3 goal(s) more...

5 conjecture(s) more...
Tactic List : 3
rewrite <- Case1 in goal at 0(rank:20.)
rewrite lemma3 in goal at 0(rank:36.)
rewrite <- Cond1 in goal at 0(rank:28.)
=================================================
Progress: 1041


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> is_mem_ta1 (string_list1) (string1) = false -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
Cond2 : is_mem_ta1 (string_list1) (string1) = false
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string2) (string_list1) = true

3 goal(s) more...

5 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> is_mem_ta1 (string_list1) (string1) = false -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
Cond2 : is_mem_ta1 (string_list1) (string1) = false
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
mem (string1) (string_list1) = true

3 goal(s) more...

5 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:28.)
rewrite lemma3 in goal at 0(rank:36.)
rewrite <- Cond1 in goal at 0(rank:28.)
=================================================
Progress: 1042


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))

3 goal(s) more...

4 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 22.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:30.)
rewrite Case1 in goal at 1(rank:30.)
rewrite Case1 in goal at 2(rank:30.)
=================================================
Progress: 1043


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))

3 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 22.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (string_list1) = sub_check (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (string_list1) = sub_check (lambda2) ((string1::string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
Case1 : string1 = string2
Case2 : mem (string2) (string_list1) = true
---------------------------------------
sub_check (lambda2) (string_list1) = sub_check (lambda2) (string_list1)

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite <- Case1 in goal at 2
rewrite <- IH1 in goal at 1
case mem (string2) (string_list1)
validate generalize_common_subterm_goal
Prop: sub_check (C (V ("pgw")) (V ("yxh"))) (("kuz"::(Nil))) = sub_check (C (V ("pgw")) (V ("yxh"))) (("cps"::("kuz"::(Nil))))
Prop: sub_check (V ("sah")) (("ivi"::(Nil))) = sub_check (V ("sah")) (("nlu"::("ivi"::(Nil))))
Prop: sub_check (V ("sbm")) ((Nil)) = sub_check (V ("sbm")) (("pmc"::(Nil)))
=================================================
Progress: 1044


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = is_mem_ta1 (string_list2) (string3)

4 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 23.)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string3)

4 goal(s) more...

4 conjecture(s) more...
Tactic List : 3
rewrite lemma3 in goal at 0(rank:23.)
rewrite Case2 in goal at 0(rank:31.)
rewrite <- lemma3 in goal at 0(rank:23.)
=================================================
Progress: 1045


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = is_mem_ta1 (string_list2) (string3)

4 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- lemma3 in goal at 0(rank : 23.)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = mem (string3) (string_list2)

4 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
case string_eq (string2) (string3)
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 1
rewrite <- lemma3 in goal at 0
validate generalize_common_subterm_goal
Prop: true = mem ("ihj") (("qvi"::(Nil)))
Prop: true = mem ("blj") (("nyr"::(Nil)))
Prop: true = mem ("wzd") ((Nil))
asdf
previous tactics
simpl in goal
intro string2
case string_eq (string2) (string3)
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 1
validate generalize_common_subterm_goal
Prop: true = is_mem_ta1 ((Nil)) ("hzv")
Prop: true = is_mem_ta1 ((Nil)) ("pim")
Prop: true = is_mem_ta1 ((Nil)) ("voe")
asdf
previous tactics
simpl in goal
intro string2
case string_eq (string2) (string3)
reflexivity
case string_eq (string1) (string3)
validate generalize_common_subterm_goal
Prop: true = is_mem_ta1 ((Nil)) ("zky")
Prop: true = is_mem_ta1 ((Nil)) ("ffi")
Prop: true = is_mem_ta1 ((Nil)) ("iyt")
asdf
=================================================
Progress: 1046


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

4 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 23.)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
mem (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)

4 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
rewrite lemma3 in goal at 0(rank:23.)
rewrite <- lemma3 in goal at 0(rank:23.)
=================================================
Progress: 1047


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

4 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- lemma3 in goal at 0(rank : 23.)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = mem (string1) (string_list2)

4 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:15.)
=================================================
Progress: 1048


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = mem (string1) (string_list2)

4 goal(s) more...

4 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 15.)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = true

4 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:14.)
=================================================
Progress: 1049


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = true

4 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 14.)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
is_mem_ta1 (string_list2) (string3) = is_mem_ta1 (string_list2) (string3)

3 goal(s) more...

4 conjecture(s) more...
Deduplication: 5
Tactic List : 1
reflexivity(rank:13.)
=================================================
Progress: 1050


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
is_mem_ta1 (string_list2) (string3) = is_mem_ta1 (string_list2) (string3)

3 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 13.)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string2:string), is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
---------------------------------------
forall (string2:string), is_mem_ta1 (mk_lhs1 ((string4::string_list3)) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 ((string4::string_list3)) (string2) (string_list2)) (string3)

2 goal(s) more...

4 conjecture(s) more...
Deduplication: 4
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1051


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string2:string), is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
---------------------------------------
forall (string2:string), is_mem_ta1 (mk_lhs1 ((string4::string_list3)) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 ((string4::string_list3)) (string2) (string_list2)) (string3)

2 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string2:string), is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
---------------------------------------
forall (string2:string), if string_eq (string4) (string3) then true else is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:13.)
=================================================
Progress: 1052


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string2:string), is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
---------------------------------------
forall (string2:string), if string_eq (string4) (string3) then true else is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)

2 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 13.)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string2:string), is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string2 : string
---------------------------------------
if string_eq (string4) (string3) then true else is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
case string_eq (string4) (string3)(rank:14.)
=================================================
Progress: 1053


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string2:string), is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string2 : string
---------------------------------------
if string_eq (string4) (string3) then true else is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)

2 goal(s) more...

4 conjecture(s) more...
>>> case string_eq (string4) (string3)(rank : 14.)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string2:string), is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string2 : string
Case1 : string_eq (string4) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13.)
=================================================
Progress: 1054


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string2:string), is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string2 : string
Case1 : string_eq (string4) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 13.)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string2:string), is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string2 : string
Case1 : string_eq (string4) (string3) = false
---------------------------------------
is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)

2 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 5
rewrite IH1 in goal at 0(rank:21.)
rewrite <- lemma3 in goal at 0(rank:29.)
rewrite <- lemma3 in goal at 1(rank:29.)
rewrite <- lemma3 in goal at 2(rank:29.)
rewrite <- IH1 in goal at 0(rank:21.)
=================================================
Progress: 1055


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string2:string), is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string2 : string
Case1 : string_eq (string4) (string3) = false
---------------------------------------
is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 21.)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string2:string), is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string2 : string
Case1 : string_eq (string4) (string3) = false
---------------------------------------
is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12.)
=================================================
Progress: 1056


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string2:string), is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string2 : string
Case1 : string_eq (string4) (string3) = false
---------------------------------------
is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)

2 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 12.)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
---------------------------------------
forall (string_list1:string list) (string2:string), sub_check_ta1 (P (string3) (lambda2)) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (P (string3) (lambda2)) (mk_rhs1 (string_list1) (string2) (string_list2))

1 goal(s) more...

4 conjecture(s) more...
Deduplication: 4
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 1057


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
---------------------------------------
forall (string_list1:string list) (string2:string), sub_check_ta1 (P (string3) (lambda2)) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (P (string3) (lambda2)) (mk_rhs1 (string_list1) (string2) (string_list2))

1 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
---------------------------------------
forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) ((string3::mk_lhs1 (string_list1) (string2) (string1) (string_list2))) = sub_check_ta1 (lambda2) ((string3::mk_rhs1 (string_list1) (string2) (string_list2)))

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
induction string_list1(rank:13.)
=================================================
Progress: 1058


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
---------------------------------------
forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) ((string3::mk_lhs1 (string_list1) (string2) (string1) (string_list2))) = sub_check_ta1 (lambda2) ((string3::mk_rhs1 (string_list1) (string2) (string_list2)))

1 goal(s) more...

4 conjecture(s) more...
>>> induction string_list1(rank : 13.)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
forall (string2:string), sub_check_ta1 (lambda2) ((string3::mk_lhs1 ((Nil)) (string2) (string1) (string_list2))) = sub_check_ta1 (lambda2) ((string3::mk_rhs1 ((Nil)) (string2) (string_list2)))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite <- lhs_lemma5 in goal at 0(rank:13.)
=================================================
Progress: 1059


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
forall (string2:string), sub_check_ta1 (lambda2) ((string3::mk_lhs1 ((Nil)) (string2) (string1) (string_list2))) = sub_check_ta1 (lambda2) ((string3::mk_rhs1 ((Nil)) (string2) (string_list2)))

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- lhs_lemma5 in goal at 0(rank : 13.)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
forall (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 ((string3::(Nil))) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) ((string3::mk_rhs1 ((Nil)) (string2) (string_list2)))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:13.)
=================================================
Progress: 1060


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
forall (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 ((string3::(Nil))) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) ((string3::mk_rhs1 ((Nil)) (string2) (string_list2)))

2 goal(s) more...

4 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 13.)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
forall (string2:string), sub_check_ta1 (lambda2) (mk_rhs1 ((string3::(Nil))) (string2) (string_list2)) = sub_check_ta1 (lambda2) ((string3::mk_rhs1 ((Nil)) (string2) (string_list2)))

2 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12.)
=================================================
Progress: 1061


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
forall (string2:string), sub_check_ta1 (lambda2) (mk_rhs1 ((string3::(Nil))) (string2) (string_list2)) = sub_check_ta1 (lambda2) ((string3::mk_rhs1 ((Nil)) (string2) (string_list2)))

2 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 12.)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
string4 : string
string_list3 : string list
IH2 : forall (string2:string), sub_check_ta1 (lambda2) ((string3::mk_lhs1 (string_list3) (string2) (string1) (string_list2))) = sub_check_ta1 (lambda2) ((string3::mk_rhs1 (string_list3) (string2) (string_list2)))
Inductive2 : string_list1 = (string4::string_list3)
---------------------------------------
forall (string2:string), sub_check_ta1 (lambda2) ((string3::mk_lhs1 ((string4::string_list3)) (string2) (string1) (string_list2))) = sub_check_ta1 (lambda2) ((string3::mk_rhs1 ((string4::string_list3)) (string2) (string_list2)))

1 goal(s) more...

4 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- lhs_lemma5 in goal at 0(rank:12.)
=================================================
Progress: 1062


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
string4 : string
string_list3 : string list
IH2 : forall (string2:string), sub_check_ta1 (lambda2) ((string3::mk_lhs1 (string_list3) (string2) (string1) (string_list2))) = sub_check_ta1 (lambda2) ((string3::mk_rhs1 (string_list3) (string2) (string_list2)))
Inductive2 : string_list1 = (string4::string_list3)
---------------------------------------
forall (string2:string), sub_check_ta1 (lambda2) ((string3::mk_lhs1 ((string4::string_list3)) (string2) (string1) (string_list2))) = sub_check_ta1 (lambda2) ((string3::mk_rhs1 ((string4::string_list3)) (string2) (string_list2)))

1 goal(s) more...

4 conjecture(s) more...
>>> rewrite <- lhs_lemma5 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
string4 : string
string_list3 : string list
IH2 : forall (string2:string), sub_check_ta1 (lambda2) ((string3::mk_lhs1 (string_list3) (string2) (string1) (string_list2))) = sub_check_ta1 (lambda2) ((string3::mk_rhs1 (string_list3) (string2) (string_list2)))
Inductive2 : string_list1 = (string4::string_list3)
---------------------------------------
forall (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 ((string3::(string4::string_list3))) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) ((string3::mk_rhs1 ((string4::string_list3)) (string2) (string_list2)))

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:20.)
rewrite <- lhs_lemma4 in goal at 0(rank:20.)
=================================================
Progress: 1063


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
string4 : string
string_list3 : string list
IH2 : forall (string2:string), sub_check_ta1 (lambda2) ((string3::mk_lhs1 (string_list3) (string2) (string1) (string_list2))) = sub_check_ta1 (lambda2) ((string3::mk_rhs1 (string_list3) (string2) (string_list2)))
Inductive2 : string_list1 = (string4::string_list3)
---------------------------------------
forall (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 ((string3::(string4::string_list3))) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) ((string3::mk_rhs1 ((string4::string_list3)) (string2) (string_list2)))

1 goal(s) more...

4 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 20.)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
string4 : string
string_list3 : string list
IH2 : forall (string2:string), sub_check_ta1 (lambda2) ((string3::mk_lhs1 (string_list3) (string2) (string1) (string_list2))) = sub_check_ta1 (lambda2) ((string3::mk_rhs1 (string_list3) (string2) (string_list2)))
Inductive2 : string_list1 = (string4::string_list3)
---------------------------------------
forall (string2:string), sub_check_ta1 (lambda2) (mk_rhs1 ((string3::(string4::string_list3))) (string2) (string_list2)) = sub_check_ta1 (lambda2) ((string3::mk_rhs1 ((string4::string_list3)) (string2) (string_list2)))

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 1064


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
string4 : string
string_list3 : string list
IH2 : forall (string2:string), sub_check_ta1 (lambda2) ((string3::mk_lhs1 (string_list3) (string2) (string1) (string_list2))) = sub_check_ta1 (lambda2) ((string3::mk_rhs1 (string_list3) (string2) (string_list2)))
Inductive2 : string_list1 = (string4::string_list3)
---------------------------------------
forall (string2:string), sub_check_ta1 (lambda2) (mk_rhs1 ((string3::(string4::string_list3))) (string2) (string_list2)) = sub_check_ta1 (lambda2) ((string3::mk_rhs1 ((string4::string_list3)) (string2) (string_list2)))

1 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
IH2 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda3) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string_list1:string list) (string2:string), sub_check_ta1 (C (lambda2) (lambda3)) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (C (lambda2) (lambda3)) (mk_rhs1 (string_list1) (string2) (string_list2))

0 goal(s) more...

4 conjecture(s) more...
Deduplication: 1
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1065


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
IH2 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda3) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string_list1:string list) (string2:string), sub_check_ta1 (C (lambda2) (lambda3)) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (C (lambda2) (lambda3)) (mk_rhs1 (string_list1) (string2) (string_list2))

0 goal(s) more...

4 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
IH2 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda3) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string_list1:string list) (string2:string), if sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) then sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) else false = if sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2)) then sub_check_ta1 (lambda3) (mk_rhs1 (string_list1) (string2) (string_list2)) else false

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:11.)
=================================================
Progress: 1066


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
IH2 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda3) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string_list1:string list) (string2:string), if sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) then sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) else false = if sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2)) then sub_check_ta1 (lambda3) (mk_rhs1 (string_list1) (string2) (string_list2)) else false

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 11.)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
IH2 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda3) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
---------------------------------------
forall (string_list1:string list), if sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) then sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) else false = if sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2)) then sub_check_ta1 (lambda3) (mk_rhs1 (string_list1) (string2) (string_list2)) else false

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:11.)
=================================================
Progress: 1067


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
IH2 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda3) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
---------------------------------------
forall (string_list1:string list), if sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) then sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) else false = if sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2)) then sub_check_ta1 (lambda3) (mk_rhs1 (string_list1) (string2) (string_list2)) else false

0 goal(s) more...

4 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
IH2 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda3) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
---------------------------------------
forall (string_list1:string list), if sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2)) then sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) else false = if sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2)) then sub_check_ta1 (lambda3) (mk_rhs1 (string_list1) (string2) (string_list2)) else false

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite IH2 in goal at 0(rank:11.)
=================================================
Progress: 1068


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
IH2 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda3) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
---------------------------------------
forall (string_list1:string list), if sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2)) then sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) else false = if sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2)) then sub_check_ta1 (lambda3) (mk_rhs1 (string_list1) (string2) (string_list2)) else false

0 goal(s) more...

4 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
IH2 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda3) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
---------------------------------------
forall (string_list1:string list), if sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2)) then sub_check_ta1 (lambda3) (mk_rhs1 (string_list1) (string2) (string_list2)) else false = if sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2)) then sub_check_ta1 (lambda3) (mk_rhs1 (string_list1) (string2) (string_list2)) else false

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 1069


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : mem (string1) (string_list2) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
IH2 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda3) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
---------------------------------------
forall (string_list1:string list), if sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2)) then sub_check_ta1 (lambda3) (mk_rhs1 (string_list1) (string2) (string_list2)) else false = if sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2)) then sub_check_ta1 (lambda3) (mk_rhs1 (string_list1) (string2) (string_list2)) else false

0 goal(s) more...

4 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
Inductive1 : lambda1 = P (string3) (lambda2)
string2 : string
---------------------------------------
sub_check_ta1 (lambda2) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda2) ((string3::(string2::string_list1)))

1 goal(s) more...

3 conjecture(s) more...
original goal
forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
lemma
forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
tactics
assert forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
intro string1
intro string_list2
intro Cond1
induction lambda1
simpl in goal
induction string_list1
simpl in goal
intro string2
case string_eq (string2) (string3)
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 1
rewrite <- Case2 in goal at 0
rewrite <- lemma3 in goal at 0
rewrite Cond1 in goal at 0
reflexivity
reflexivity
simpl in goal
intro string2
case string_eq (string4) (string3)
reflexivity
rewrite IH1 in goal at 0
reflexivity
simpl in goal
induction string_list1
rewrite <- lhs_lemma5 in goal at 0
rewrite IH1 in goal at 0
reflexivity
rewrite <- lhs_lemma5 in goal at 0
rewrite IH1 in goal at 0
reflexivity
simpl in goal
intro string2
rewrite IH1 in goal at 0
rewrite IH2 in goal at 0
reflexivity
Deduplication: 0
Tactic List : 2
rewrite <- lhs_lemma4 in goal at 1(rank:18.)
rewrite <- lhs_lemma4 in goal at 2(rank:18.)
=================================================
Progress: 1070


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
Inductive1 : lambda1 = P (string3) (lambda2)
string2 : string
---------------------------------------
sub_check_ta1 (lambda2) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda2) ((string3::(string2::string_list1)))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- lhs_lemma4 in goal at 1(rank : 18.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
Inductive1 : lambda1 = P (string3) (lambda2)
string2 : string
---------------------------------------
sub_check_ta1 (lambda2) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list1))) = sub_check_ta1 (lambda2) ((string3::(string2::string_list1)))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite lemma8 in goal at 1(rank:11.)
=================================================
Progress: 1071


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
Inductive1 : lambda1 = P (string3) (lambda2)
string2 : string
---------------------------------------
sub_check_ta1 (lambda2) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list1))) = sub_check_ta1 (lambda2) ((string3::(string2::string_list1)))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite lemma8 in goal at 1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
Inductive1 : lambda1 = P (string3) (lambda2)
string2 : string
---------------------------------------
sub_check_ta1 (lambda2) (mk_rhs1 ((Nil)) (string3) ((string1::string_list1))) = sub_check_ta1 (lambda2) ((string3::(string2::string_list1)))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1072


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
Inductive1 : lambda1 = P (string3) (lambda2)
string2 : string
---------------------------------------
sub_check_ta1 (lambda2) (mk_rhs1 ((Nil)) (string3) ((string1::string_list1))) = sub_check_ta1 (lambda2) ((string3::(string2::string_list1)))

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
Inductive1 : lambda1 = P (string3) (lambda2)
string2 : string
---------------------------------------
sub_check_ta1 (lambda2) ((string3::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string3::(string2::string_list1)))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
rewrite <- lhs_lemma4 in goal at 1(rank:19.)
rewrite IH1 in goal at 0(rank:27.)
=================================================
Progress: 1073


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
Inductive1 : lambda1 = P (string3) (lambda2)
string2 : string
---------------------------------------
sub_check_ta1 (lambda2) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda2) ((string3::(string2::string_list1)))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- lhs_lemma4 in goal at 2(rank : 18.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
Inductive1 : lambda1 = P (string3) (lambda2)
string2 : string
---------------------------------------
sub_check_ta1 (lambda2) ((string3::mk_lhs1 ((Nil)) (string2) (string1) (string_list1))) = sub_check_ta1 (lambda2) ((string3::(string2::string_list1)))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- lhs_lemma5 in goal at 0(rank:10.)
=================================================
Progress: 1074


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
Inductive1 : lambda1 = P (string3) (lambda2)
string2 : string
---------------------------------------
sub_check_ta1 (lambda2) ((string3::mk_lhs1 ((Nil)) (string2) (string1) (string_list1))) = sub_check_ta1 (lambda2) ((string3::(string2::string_list1)))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- lhs_lemma5 in goal at 0(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
Inductive1 : lambda1 = P (string3) (lambda2)
string2 : string
---------------------------------------
sub_check_ta1 (lambda2) (mk_lhs1 ((string3::(Nil))) (string2) (string1) (string_list1)) = sub_check_ta1 (lambda2) ((string3::(string2::string_list1)))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite lemma8 in goal at 1(rank:11.)
=================================================
Progress: 1075


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
Inductive1 : lambda1 = P (string3) (lambda2)
string2 : string
---------------------------------------
sub_check_ta1 (lambda2) (mk_lhs1 ((string3::(Nil))) (string2) (string1) (string_list1)) = sub_check_ta1 (lambda2) ((string3::(string2::string_list1)))

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite lemma8 in goal at 1(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
Inductive1 : lambda1 = P (string3) (lambda2)
string2 : string
---------------------------------------
sub_check_ta1 (lambda2) (mk_rhs1 ((string3::(Nil))) (string2) (string_list1)) = sub_check_ta1 (lambda2) ((string3::(string2::string_list1)))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 1076


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
Inductive1 : lambda1 = P (string3) (lambda2)
string2 : string
---------------------------------------
sub_check_ta1 (lambda2) (mk_rhs1 ((string3::(Nil))) (string2) (string_list1)) = sub_check_ta1 (lambda2) ((string3::(string2::string_list1)))

2 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
Inductive1 : lambda1 = P (string3) (lambda2)
string2 : string
---------------------------------------
mem (string1) (string_list1) = true

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 3
rewrite Cond1 in goal at 0(rank:18.)
rewrite lemma3 in goal at 0(rank:26.)
rewrite <- Cond1 in goal at 0(rank:18.)
=================================================
Progress: 1077


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
Inductive1 : lambda1 = P (string3) (lambda2)
string2 : string
---------------------------------------
mem (string1) (string_list1) = true

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 18.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
Inductive1 : lambda1 = P (string3) (lambda2)
string2 : string
---------------------------------------
true = true

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 1078


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
Inductive1 : lambda1 = P (string3) (lambda2)
string2 : string
---------------------------------------
true = true

1 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string2:string), sub_check_ta1 (C (lambda2) (lambda3)) ((string2::(string1::string_list1))) = sub_check_ta1 (C (lambda2) (lambda3)) ((string2::string_list1))

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 4
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 1079


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string2:string), sub_check_ta1 (C (lambda2) (lambda3)) ((string2::(string1::string_list1))) = sub_check_ta1 (C (lambda2) (lambda3)) ((string2::string_list1))

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string2:string), if sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) then sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) else false = if sub_check_ta1 (lambda2) ((string2::string_list1)) then sub_check_ta1 (lambda3) ((string2::string_list1)) else false

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string2(rank:9.)
=================================================
Progress: 1080


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string2:string), if sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) then sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) else false = if sub_check_ta1 (lambda2) ((string2::string_list1)) then sub_check_ta1 (lambda3) ((string2::string_list1)) else false

0 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
---------------------------------------
if sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) then sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) else false = if sub_check_ta1 (lambda2) ((string2::string_list1)) then sub_check_ta1 (lambda3) ((string2::string_list1)) else false

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
case sub_check_ta1 (lambda2) ((string2::string_list1))(rank:10.)
rewrite IH1 in goal at 0(rank:17.)
rewrite <- IH1 in goal at 0(rank:17.)
rewrite <- IH2 in goal at 0(rank:17.)
rewrite <- lhs_lemma4 in goal at 0(rank:17.)
rewrite <- lhs_lemma4 in goal at 1(rank:17.)
rewrite IH2 in goal at 0(rank:17.)
case sub_check_ta1 (lambda2) ((string2::(string1::string_list1)))(rank:10.)
rewrite <- lhs_lemma4 in goal at 2(rank:17.)
=================================================
Progress: 1081


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
---------------------------------------
if sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) then sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) else false = if sub_check_ta1 (lambda2) ((string2::string_list1)) then sub_check_ta1 (lambda3) ((string2::string_list1)) else false

0 goal(s) more...

3 conjecture(s) more...
>>> case sub_check_ta1 (lambda2) ((string2::string_list1))(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
Case1 : sub_check_ta1 (lambda2) ((string2::string_list1)) = true
---------------------------------------
if sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) then sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) else false = sub_check_ta1 (lambda3) ((string2::string_list1))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
case sub_check_ta1 (lambda2) ((string2::(string1::string_list1)))(rank:11.)
rewrite IH1 in goal at 0(rank:18.)
rewrite IH2 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite <- lhs_lemma4 in goal at 0(rank:18.)
rewrite <- lhs_lemma4 in goal at 1(rank:18.)
rewrite <- lhs_lemma4 in goal at 2(rank:18.)
=================================================
Progress: 1082


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
---------------------------------------
if sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) then sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) else false = if sub_check_ta1 (lambda2) ((string2::string_list1)) then sub_check_ta1 (lambda3) ((string2::string_list1)) else false

0 goal(s) more...

3 conjecture(s) more...
>>> case sub_check_ta1 (lambda2) ((string2::(string1::string_list1)))(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
Case1 : sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = true
---------------------------------------
sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = if sub_check_ta1 (lambda2) ((string2::string_list1)) then sub_check_ta1 (lambda3) ((string2::string_list1)) else false

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
case sub_check_ta1 (lambda2) ((string2::string_list1))(rank:11.)
rewrite <- lhs_lemma4 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 0(rank:26.)
rewrite IH2 in goal at 0(rank:26.)
rewrite <- IH1 in goal at 0(rank:26.)
=================================================
Progress: 1083


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
Case1 : sub_check_ta1 (lambda2) ((string2::string_list1)) = true
---------------------------------------
if sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) then sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) else false = sub_check_ta1 (lambda3) ((string2::string_list1))

1 goal(s) more...

3 conjecture(s) more...
>>> case sub_check_ta1 (lambda2) ((string2::(string1::string_list1)))(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
Case1 : sub_check_ta1 (lambda2) ((string2::string_list1)) = true
Case2 : sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = true
---------------------------------------
sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
rewrite <- lhs_lemma4 in goal at 0(rank:19.)
=================================================
Progress: 1084


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
Case1 : sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = true
---------------------------------------
sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = if sub_check_ta1 (lambda2) ((string2::string_list1)) then sub_check_ta1 (lambda3) ((string2::string_list1)) else false

1 goal(s) more...

3 conjecture(s) more...
>>> case sub_check_ta1 (lambda2) ((string2::string_list1))(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
Case1 : sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = true
Case2 : sub_check_ta1 (lambda2) ((string2::string_list1)) = true
---------------------------------------
sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
rewrite <- lhs_lemma4 in goal at 0(rank:19.)
=================================================
Progress: 1085


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
---------------------------------------
if sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) then sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) else false = if sub_check_ta1 (lambda2) ((string2::string_list1)) then sub_check_ta1 (lambda3) ((string2::string_list1)) else false

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
---------------------------------------
if sub_check_ta1 (lambda2) ((string2::string_list1)) then sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) else false = if sub_check_ta1 (lambda2) ((string2::string_list1)) then sub_check_ta1 (lambda3) ((string2::string_list1)) else false

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case sub_check_ta1 (lambda2) ((string2::string_list1))(rank:10.)
=================================================
Progress: 1086


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
---------------------------------------
if sub_check_ta1 (lambda2) ((string2::string_list1)) then sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) else false = if sub_check_ta1 (lambda2) ((string2::string_list1)) then sub_check_ta1 (lambda3) ((string2::string_list1)) else false

0 goal(s) more...

3 conjecture(s) more...
>>> case sub_check_ta1 (lambda2) ((string2::string_list1))(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
Case1 : sub_check_ta1 (lambda2) ((string2::string_list1)) = true
---------------------------------------
sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite <- lhs_lemma4 in goal at 0(rank:18.)
=================================================
Progress: 1087


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
---------------------------------------
if sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) then sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) else false = if sub_check_ta1 (lambda2) ((string2::string_list1)) then sub_check_ta1 (lambda3) ((string2::string_list1)) else false

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
---------------------------------------
if sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) then sub_check_ta1 (lambda3) ((string2::string_list1)) else false = if sub_check_ta1 (lambda2) ((string2::string_list1)) then sub_check_ta1 (lambda3) ((string2::string_list1)) else false

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case sub_check_ta1 (lambda2) ((string2::string_list1))(rank:10.)
rewrite <- IH1 in goal at 0(rank:17.)
rewrite <- lhs_lemma4 in goal at 0(rank:17.)
=================================================
Progress: 1088


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
---------------------------------------
if sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) then sub_check_ta1 (lambda3) ((string2::string_list1)) else false = if sub_check_ta1 (lambda2) ((string2::string_list1)) then sub_check_ta1 (lambda3) ((string2::string_list1)) else false

0 goal(s) more...

3 conjecture(s) more...
>>> case sub_check_ta1 (lambda2) ((string2::string_list1))(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
Case1 : sub_check_ta1 (lambda2) ((string2::string_list1)) = true
---------------------------------------
if sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) then sub_check_ta1 (lambda3) ((string2::string_list1)) else false = sub_check_ta1 (lambda3) ((string2::string_list1))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case sub_check_ta1 (lambda2) ((string2::(string1::string_list1)))(rank:11.)
rewrite IH1 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 0(rank:26.)
rewrite <- IH2 in goal at 2(rank:18.)
rewrite <- IH2 in goal at 1(rank:26.)
rewrite <- lhs_lemma4 in goal at 0(rank:18.)
=================================================
Progress: 1089


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
Case1 : sub_check_ta1 (lambda2) ((string2::string_list1)) = true
---------------------------------------
if sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) then sub_check_ta1 (lambda3) ((string2::string_list1)) else false = sub_check_ta1 (lambda3) ((string2::string_list1))

1 goal(s) more...

3 conjecture(s) more...
>>> case sub_check_ta1 (lambda2) ((string2::(string1::string_list1)))(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
Case1 : sub_check_ta1 (lambda2) ((string2::string_list1)) = true
Case2 : sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = true
---------------------------------------
sub_check_ta1 (lambda3) ((string2::string_list1)) = sub_check_ta1 (lambda3) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 1090


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
Case1 : sub_check_ta1 (lambda2) ((string2::string_list1)) = true
Case2 : sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = true
---------------------------------------
sub_check_ta1 (lambda3) ((string2::string_list1)) = sub_check_ta1 (lambda3) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
Case1 : sub_check_ta1 (lambda2) ((string2::string_list1)) = true
Case2 : sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = false
---------------------------------------
false = sub_check_ta1 (lambda3) ((string2::string_list1))

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 0(rank:26.)
=================================================
Progress: 1091


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
---------------------------------------
if sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) then sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) else false = if sub_check_ta1 (lambda2) ((string2::string_list1)) then sub_check_ta1 (lambda3) ((string2::string_list1)) else false

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
---------------------------------------
if sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) then sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) else false = if sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) then sub_check_ta1 (lambda3) ((string2::string_list1)) else false

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case sub_check_ta1 (lambda2) ((string2::(string1::string_list1)))(rank:10.)
=================================================
Progress: 1092


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
---------------------------------------
if sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) then sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) else false = if sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) then sub_check_ta1 (lambda3) ((string2::string_list1)) else false

0 goal(s) more...

3 conjecture(s) more...
>>> case sub_check_ta1 (lambda2) ((string2::(string1::string_list1)))(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
Case1 : sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = true
---------------------------------------
sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite <- lhs_lemma4 in goal at 0(rank:18.)
=================================================
Progress: 1093


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
---------------------------------------
if sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) then sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) else false = if sub_check_ta1 (lambda2) ((string2::string_list1)) then sub_check_ta1 (lambda3) ((string2::string_list1)) else false

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
---------------------------------------
if sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) then sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) else false = if sub_check_ta1 (lambda2) ((string2::string_list1)) then sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) else false

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
case sub_check_ta1 (lambda2) ((string2::(string1::string_list1)))(rank:10.)
rewrite <- lhs_lemma4 in goal at 1(rank:17.)
rewrite <- lhs_lemma4 in goal at 2(rank:17.)
=================================================
Progress: 1094


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
---------------------------------------
if sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) then sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) else false = if sub_check_ta1 (lambda2) ((string2::string_list1)) then sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) else false

0 goal(s) more...

3 conjecture(s) more...
>>> case sub_check_ta1 (lambda2) ((string2::(string1::string_list1)))(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
Case1 : sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = true
---------------------------------------
sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = if sub_check_ta1 (lambda2) ((string2::string_list1)) then sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) else false

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
case sub_check_ta1 (lambda2) ((string2::string_list1))(rank:11.)
rewrite IH2 in goal at 2(rank:18.)
rewrite <- IH1 in goal at 0(rank:26.)
rewrite IH2 in goal at 0(rank:26.)
rewrite IH2 in goal at 1(rank:26.)
rewrite <- lhs_lemma4 in goal at 1(rank:18.)
=================================================
Progress: 1095


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
Case1 : sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = true
---------------------------------------
sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = if sub_check_ta1 (lambda2) ((string2::string_list1)) then sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) else false

1 goal(s) more...

3 conjecture(s) more...
>>> case sub_check_ta1 (lambda2) ((string2::string_list1))(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
Case1 : sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = true
Case2 : sub_check_ta1 (lambda2) ((string2::string_list1)) = true
---------------------------------------
sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::(string1::string_list1)))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 1096


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
Case1 : sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = true
Case2 : sub_check_ta1 (lambda2) ((string2::string_list1)) = true
---------------------------------------
sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::(string1::string_list1)))

2 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
Case1 : sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = true
Case2 : sub_check_ta1 (lambda2) ((string2::string_list1)) = false
---------------------------------------
sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = false

1 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 3
rewrite IH2 in goal at 0(rank:18.)
rewrite <- Case2 in goal at 0(rank:18.)
rewrite <- lhs_lemma4 in goal at 0(rank:18.)
=================================================
Progress: 1097


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
---------------------------------------
if sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) then sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) else false = if sub_check_ta1 (lambda2) ((string2::string_list1)) then sub_check_ta1 (lambda3) ((string2::string_list1)) else false

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- lhs_lemma4 in goal at 0(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
---------------------------------------
if sub_check_ta1 (lambda2) (mk_lhs1 ((Nil)) (string2) (string1) (string_list1)) then sub_check_ta1 (lambda3) (mk_lhs1 ((Nil)) (string2) (string1) (string_list1)) else false = if sub_check_ta1 (lambda2) ((string2::string_list1)) then sub_check_ta1 (lambda3) ((string2::string_list1)) else false

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
rewrite <- IH1 in goal at 0(rank:17.)
rewrite <- IH2 in goal at 0(rank:17.)
rewrite lemma8 in goal at 1(rank:18.)
rewrite lemma8 in goal at 2(rank:18.)
=================================================
Progress: 1098


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
---------------------------------------
if sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) then sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) else false = if sub_check_ta1 (lambda2) ((string2::string_list1)) then sub_check_ta1 (lambda3) ((string2::string_list1)) else false

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- lhs_lemma4 in goal at 1(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
---------------------------------------
if sub_check_ta1 (lambda2) (mk_lhs1 ((Nil)) (string2) (string1) (string_list1)) then sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) else false = if sub_check_ta1 (lambda2) ((string2::string_list1)) then sub_check_ta1 (lambda3) ((string2::string_list1)) else false

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite lemma8 in goal at 1(rank:10.)
=================================================
Progress: 1099


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
---------------------------------------
if sub_check_ta1 (lambda2) (mk_lhs1 ((Nil)) (string2) (string1) (string_list1)) then sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) else false = if sub_check_ta1 (lambda2) ((string2::string_list1)) then sub_check_ta1 (lambda3) ((string2::string_list1)) else false

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite lemma8 in goal at 1(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
---------------------------------------
if sub_check_ta1 (lambda2) (mk_rhs1 ((Nil)) (string2) (string_list1)) then sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) else false = if sub_check_ta1 (lambda2) ((string2::string_list1)) then sub_check_ta1 (lambda3) ((string2::string_list1)) else false

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 1100


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
---------------------------------------
if sub_check_ta1 (lambda2) (mk_rhs1 ((Nil)) (string2) (string_list1)) then sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) else false = if sub_check_ta1 (lambda2) ((string2::string_list1)) then sub_check_ta1 (lambda3) ((string2::string_list1)) else false

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
---------------------------------------
if sub_check_ta1 (lambda2) ((string2::string_list1)) then sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) else false = if sub_check_ta1 (lambda2) ((string2::string_list1)) then sub_check_ta1 (lambda3) ((string2::string_list1)) else false

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case sub_check_ta1 (lambda2) ((string2::string_list1))(rank:11.)
=================================================
Progress: 1101


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
---------------------------------------
if sub_check_ta1 (lambda2) ((string2::string_list1)) then sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) else false = if sub_check_ta1 (lambda2) ((string2::string_list1)) then sub_check_ta1 (lambda3) ((string2::string_list1)) else false

1 goal(s) more...

3 conjecture(s) more...
>>> case sub_check_ta1 (lambda2) ((string2::string_list1))(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
Case1 : sub_check_ta1 (lambda2) ((string2::string_list1)) = true
---------------------------------------
sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
rewrite <- lhs_lemma4 in goal at 0(rank:19.)
=================================================
Progress: 1102


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
---------------------------------------
if sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) then sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) else false = if sub_check_ta1 (lambda2) ((string2::string_list1)) then sub_check_ta1 (lambda3) ((string2::string_list1)) else false

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- lhs_lemma4 in goal at 2(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
---------------------------------------
if sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) then sub_check_ta1 (lambda3) (mk_lhs1 ((Nil)) (string2) (string1) (string_list1)) else false = if sub_check_ta1 (lambda2) ((string2::string_list1)) then sub_check_ta1 (lambda3) ((string2::string_list1)) else false

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite lemma8 in goal at 1(rank:10.)
=================================================
Progress: 1103


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
---------------------------------------
if sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) then sub_check_ta1 (lambda3) (mk_lhs1 ((Nil)) (string2) (string1) (string_list1)) else false = if sub_check_ta1 (lambda2) ((string2::string_list1)) then sub_check_ta1 (lambda3) ((string2::string_list1)) else false

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite lemma8 in goal at 1(rank : 10.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
---------------------------------------
if sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) then sub_check_ta1 (lambda3) (mk_rhs1 ((Nil)) (string2) (string_list1)) else false = if sub_check_ta1 (lambda2) ((string2::string_list1)) then sub_check_ta1 (lambda3) ((string2::string_list1)) else false

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
case sub_check_ta1 (lambda2) ((string2::string_list1))(rank:11.)
rewrite <- IH2 in goal at 0(rank:26.)
case sub_check_ta1 (lambda2) ((string2::(string1::string_list1)))(rank:11.)
rewrite IH1 in goal at 0(rank:18.)
rewrite <- IH1 in goal at 0(rank:18.)
=================================================
Progress: 1104


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
---------------------------------------
if sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) then sub_check_ta1 (lambda3) (mk_rhs1 ((Nil)) (string2) (string_list1)) else false = if sub_check_ta1 (lambda2) ((string2::string_list1)) then sub_check_ta1 (lambda3) ((string2::string_list1)) else false

1 goal(s) more...

3 conjecture(s) more...
>>> case sub_check_ta1 (lambda2) ((string2::string_list1))(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
Case1 : sub_check_ta1 (lambda2) ((string2::string_list1)) = true
---------------------------------------
if sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) then sub_check_ta1 (lambda3) (mk_rhs1 ((Nil)) (string2) (string_list1)) else false = sub_check_ta1 (lambda3) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
case sub_check_ta1 (lambda2) ((string2::(string1::string_list1)))(rank:12.)
rewrite <- lhs_lemma4 in goal at 0(rank:19.)
rewrite IH1 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 1105


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
---------------------------------------
if sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) then sub_check_ta1 (lambda3) (mk_rhs1 ((Nil)) (string2) (string_list1)) else false = if sub_check_ta1 (lambda2) ((string2::string_list1)) then sub_check_ta1 (lambda3) ((string2::string_list1)) else false

1 goal(s) more...

3 conjecture(s) more...
>>> case sub_check_ta1 (lambda2) ((string2::(string1::string_list1)))(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
Case1 : sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = true
---------------------------------------
sub_check_ta1 (lambda3) ((string2::string_list1)) = if sub_check_ta1 (lambda2) ((string2::string_list1)) then sub_check_ta1 (lambda3) ((string2::string_list1)) else false

2 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
case sub_check_ta1 (lambda2) ((string2::string_list1))(rank:12.)
rewrite <- IH2 in goal at 1(rank:19.)
rewrite <- IH2 in goal at 2(rank:27.)
rewrite <- IH1 in goal at 0(rank:27.)
rewrite <- IH2 in goal at 0(rank:27.)
=================================================
Progress: 1106


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
Case1 : sub_check_ta1 (lambda2) ((string2::string_list1)) = true
---------------------------------------
if sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) then sub_check_ta1 (lambda3) (mk_rhs1 ((Nil)) (string2) (string_list1)) else false = sub_check_ta1 (lambda3) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
>>> case sub_check_ta1 (lambda2) ((string2::(string1::string_list1)))(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
Case1 : sub_check_ta1 (lambda2) ((string2::string_list1)) = true
Case2 : sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = true
---------------------------------------
sub_check_ta1 (lambda3) ((string2::string_list1)) = sub_check_ta1 (lambda3) ((string2::string_list1))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 1107


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
Case1 : sub_check_ta1 (lambda2) ((string2::string_list1)) = true
Case2 : sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = true
---------------------------------------
sub_check_ta1 (lambda3) ((string2::string_list1)) = sub_check_ta1 (lambda3) ((string2::string_list1))

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
Case1 : sub_check_ta1 (lambda2) ((string2::string_list1)) = true
Case2 : sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = false
---------------------------------------
false = sub_check_ta1 (lambda3) ((string2::string_list1))

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:27.)
=================================================
Progress: 1108


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
Case1 : sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = true
---------------------------------------
sub_check_ta1 (lambda3) ((string2::string_list1)) = if sub_check_ta1 (lambda2) ((string2::string_list1)) then sub_check_ta1 (lambda3) ((string2::string_list1)) else false

2 goal(s) more...

3 conjecture(s) more...
>>> case sub_check_ta1 (lambda2) ((string2::string_list1))(rank : 12.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
Case1 : sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = true
Case2 : sub_check_ta1 (lambda2) ((string2::string_list1)) = true
---------------------------------------
sub_check_ta1 (lambda3) ((string2::string_list1)) = sub_check_ta1 (lambda3) ((string2::string_list1))

3 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:11.)
=================================================
Progress: 1109


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
Case1 : sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = true
Case2 : sub_check_ta1 (lambda2) ((string2::string_list1)) = true
---------------------------------------
sub_check_ta1 (lambda3) ((string2::string_list1)) = sub_check_ta1 (lambda3) ((string2::string_list1))

3 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 11.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
Case1 : sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = true
Case2 : sub_check_ta1 (lambda2) ((string2::string_list1)) = false
---------------------------------------
sub_check_ta1 (lambda3) ((string2::string_list1)) = false

2 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:27.)
=================================================
Progress: 1110


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
---------------------------------------
if sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) then sub_check_ta1 (lambda3) ((string2::string_list1)) else false = if sub_check_ta1 (lambda2) ((string2::string_list1)) then sub_check_ta1 (lambda3) ((string2::string_list1)) else false

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 17.)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
---------------------------------------
if sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) then sub_check_ta1 (lambda3) ((string2::string_list1)) else false = if sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) then sub_check_ta1 (lambda3) ((string2::string_list1)) else false

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8.)
=================================================
Progress: 1111


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string2:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
IH2 : forall (string2:string), sub_check_ta1 (lambda3) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda3) ((string2::string_list1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
---------------------------------------
if sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) then sub_check_ta1 (lambda3) ((string2::string_list1)) else false = if sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) then sub_check_ta1 (lambda3) ((string2::string_list1)) else false

0 goal(s) more...

3 conjecture(s) more...
>>> reflexivity(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))

1 goal(s) more...

2 conjecture(s) more...
original goal
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
lemma
forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
tactics
assert forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
intro string1
intro string_list1
intro Cond1
induction lambda1
simpl in goal
intro string2
case string_eq (string2) (string3)
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 1
rewrite <- Case2 in goal at 0
rewrite <- lemma3 in goal at 0
rewrite Cond1 in goal at 0
reflexivity
reflexivity
simpl in goal
intro string2
define mk_lhs1 arg_10 arg_11 arg_12 arg_13 =
match (arg_10) with
| Nil -> (arg_11::(arg_12::arg_13))
| Cons hd tl -> (hd::mk_lhs1 (tl) (arg_11) (arg_12) (arg_13))
define mk_rhs1 arg_14 arg_15 arg_16 =
match (arg_14) with
| Nil -> (arg_15::arg_16)
| Cons hd tl -> (hd::mk_rhs1 (tl) (arg_15) (arg_16))
assert forall (string1:string) (string2:string) (string_list1:string list), mk_lhs1 ((Nil)) (string1) (string2) (string_list1) = (string1::(string2::string_list1))
reflexivity
assert forall (string1:string) (string_list1:string list) (string2:string) (string3:string) (string_list2:string list), mk_lhs1 ((string1::string_list1)) (string2) (string3) (string_list2) = (string1::mk_lhs1 (string_list1) (string2) (string3) (string_list2))
reflexivity
assert forall (string1:string) (string_list1:string list), mk_rhs1 ((Nil)) (string1) (string_list1) = (string1::string_list1)
reflexivity
assert forall (string1:string) (string_list1:string list) (string2:string) (string_list2:string list), mk_rhs1 ((string1::string_list1)) (string2) (string_list2) = (string1::mk_rhs1 (string_list1) (string2) (string_list2))
reflexivity
assert forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
intro string1
intro string_list2
intro Cond1
induction lambda1
simpl in goal
induction string_list1
simpl in goal
intro string2
case string_eq (string2) (string3)
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 1
rewrite <- Case2 in goal at 0
rewrite <- lemma3 in goal at 0
rewrite Cond1 in goal at 0
reflexivity
reflexivity
simpl in goal
intro string2
case string_eq (string4) (string3)
reflexivity
rewrite IH1 in goal at 0
reflexivity
simpl in goal
induction string_list1
rewrite <- lhs_lemma5 in goal at 0
rewrite IH1 in goal at 0
reflexivity
rewrite <- lhs_lemma5 in goal at 0
rewrite IH1 in goal at 0
reflexivity
simpl in goal
intro string2
rewrite IH1 in goal at 0
rewrite IH2 in goal at 0
reflexivity
rewrite <- lhs_lemma4 in goal at 2
rewrite <- lhs_lemma5 in goal at 0
rewrite lemma8 in goal at 1
reflexivity
rewrite Cond1 in goal at 0
reflexivity
simpl in goal
intro string2
rewrite IH2 in goal at 0
rewrite <- IH1 in goal at 0
reflexivity
Deduplication: 61
Tactic List : 1
rewrite lemma9 in goal at 1(rank:9.)
=================================================
Progress: 1112


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma9 in goal at 1(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) ((string2::string_list1)) = sub_check_ta1 (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8.)
=================================================
Progress: 1113


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) ((string2::string_list1)) = sub_check_ta1 (lambda2) ((string2::string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
mem (string1) (string_list1) = true

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 3
rewrite Cond1 in goal at 0(rank:16.)
rewrite lemma3 in goal at 0(rank:24.)
rewrite <- Cond1 in goal at 0(rank:16.)
=================================================
Progress: 1114


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
mem (string1) (string_list1) = true

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 16.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
true = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 1115


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
true = true

1 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
sub_check_ta1 (C (lambda2) (lambda3)) ((string1::string_list1)) = sub_check_ta1 (C (lambda2) (lambda3)) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 2
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 1116


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
sub_check_ta1 (C (lambda2) (lambda3)) ((string1::string_list1)) = sub_check_ta1 (C (lambda2) (lambda3)) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((string1::string_list1)) then sub_check_ta1 (lambda3) ((string1::string_list1)) else false = if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
case sub_check_ta1 (lambda2) (string_list1)(rank:8.)
rewrite IH1 in goal at 0(rank:15.)
rewrite IH2 in goal at 0(rank:15.)
rewrite <- IH1 in goal at 0(rank:15.)
rewrite <- IH2 in goal at 0(rank:15.)
case sub_check_ta1 (lambda2) ((string1::string_list1))(rank:8.)
=================================================
Progress: 1117


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((string1::string_list1)) then sub_check_ta1 (lambda3) ((string1::string_list1)) else false = if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false

0 goal(s) more...

2 conjecture(s) more...
>>> case sub_check_ta1 (lambda2) (string_list1)(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = true
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check_ta1 (lambda2) (string_list1) = true
---------------------------------------
if sub_check_ta1 (lambda2) ((string1::string_list1)) then sub_check_ta1 (lambda3) ((string1::string_list1)) else false = sub_check_ta1 (lambda3) (string_list1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:16.)
rewrite IH2 in goal at 0(rank:16.)
rewrite <- IH2 in goal at 0(rank:16.)
=================================================
Progress: 1118


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((string1::string_list1)) then sub_check_ta1 (lambda3) ((string1::string_list1)) else false = if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false

0 goal(s) more...

2 conjecture(s) more...
>>> case sub_check_ta1 (lambda2) ((string1::string_list1))(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : true = sub_check_ta1 (lambda2) (string_list1)
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = true
---------------------------------------
sub_check_ta1 (lambda3) ((string1::string_list1)) = if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
case sub_check_ta1 (lambda2) (string_list1)(rank:9.)
rewrite <- IH2 in goal at 0(rank:24.)
rewrite <- IH1 in goal at 0(rank:16.)
rewrite IH2 in goal at 0(rank:24.)
=================================================
Progress: 1119


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : true = sub_check_ta1 (lambda2) (string_list1)
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = true
---------------------------------------
sub_check_ta1 (lambda3) ((string1::string_list1)) = if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false

1 goal(s) more...

2 conjecture(s) more...
>>> case sub_check_ta1 (lambda2) (string_list1)(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : true = true
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = true
Case2 : sub_check_ta1 (lambda2) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:17.)
rewrite <- IH2 in goal at 0(rank:17.)
=================================================
Progress: 1120


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((string1::string_list1)) then sub_check_ta1 (lambda3) ((string1::string_list1)) else false = if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) ((string1::string_list1)) else false = if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case sub_check_ta1 (lambda2) (string_list1)(rank:8.)
=================================================
Progress: 1121


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) ((string1::string_list1)) else false = if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false

0 goal(s) more...

2 conjecture(s) more...
>>> case sub_check_ta1 (lambda2) (string_list1)(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = true
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check_ta1 (lambda2) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:16.)
rewrite <- IH2 in goal at 0(rank:16.)
=================================================
Progress: 1122


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((string1::string_list1)) then sub_check_ta1 (lambda3) ((string1::string_list1)) else false = if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((string1::string_list1)) then sub_check_ta1 (lambda3) (string_list1) else false = if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case sub_check_ta1 (lambda2) (string_list1)(rank:8.)
rewrite <- IH1 in goal at 0(rank:15.)
=================================================
Progress: 1123


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((string1::string_list1)) then sub_check_ta1 (lambda3) (string_list1) else false = if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false

0 goal(s) more...

2 conjecture(s) more...
>>> case sub_check_ta1 (lambda2) (string_list1)(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = true
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check_ta1 (lambda2) (string_list1) = true
---------------------------------------
if sub_check_ta1 (lambda2) ((string1::string_list1)) then sub_check_ta1 (lambda3) (string_list1) else false = sub_check_ta1 (lambda3) (string_list1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite IH1 in goal at 0(rank:16.)
rewrite <- IH2 in goal at 0(rank:24.)
rewrite <- IH2 in goal at 2(rank:16.)
rewrite <- IH2 in goal at 1(rank:24.)
=================================================
Progress: 1124


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((string1::string_list1)) then sub_check_ta1 (lambda3) ((string1::string_list1)) else false = if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((string1::string_list1)) then sub_check_ta1 (lambda3) ((string1::string_list1)) else false = if sub_check_ta1 (lambda2) ((string1::string_list1)) then sub_check_ta1 (lambda3) (string_list1) else false

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case sub_check_ta1 (lambda2) ((string1::string_list1))(rank:8.)
=================================================
Progress: 1125


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((string1::string_list1)) then sub_check_ta1 (lambda3) ((string1::string_list1)) else false = if sub_check_ta1 (lambda2) ((string1::string_list1)) then sub_check_ta1 (lambda3) (string_list1) else false

0 goal(s) more...

2 conjecture(s) more...
>>> case sub_check_ta1 (lambda2) ((string1::string_list1))(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : true = sub_check_ta1 (lambda2) (string_list1)
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = true
---------------------------------------
sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:16.)
rewrite <- IH2 in goal at 0(rank:16.)
=================================================
Progress: 1126


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((string1::string_list1)) then sub_check_ta1 (lambda3) ((string1::string_list1)) else false = if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 15.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((string1::string_list1)) then sub_check_ta1 (lambda3) ((string1::string_list1)) else false = if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) ((string1::string_list1)) else false

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case sub_check_ta1 (lambda2) ((string1::string_list1))(rank:8.)
=================================================
Progress: 1127


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((string1::string_list1)) then sub_check_ta1 (lambda3) ((string1::string_list1)) else false = if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) ((string1::string_list1)) else false

0 goal(s) more...

2 conjecture(s) more...
>>> case sub_check_ta1 (lambda2) ((string1::string_list1))(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : true = sub_check_ta1 (lambda2) (string_list1)
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = true
---------------------------------------
sub_check_ta1 (lambda3) ((string1::string_list1)) = if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) ((string1::string_list1)) else false

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
case sub_check_ta1 (lambda2) (string_list1)(rank:9.)
rewrite IH2 in goal at 2(rank:16.)
rewrite <- IH1 in goal at 0(rank:16.)
rewrite IH2 in goal at 0(rank:24.)
rewrite IH2 in goal at 1(rank:24.)
=================================================
Progress: 1128


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : true = sub_check_ta1 (lambda2) (string_list1)
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = true
---------------------------------------
sub_check_ta1 (lambda3) ((string1::string_list1)) = if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) ((string1::string_list1)) else false

1 goal(s) more...

2 conjecture(s) more...
>>> case sub_check_ta1 (lambda2) (string_list1)(rank : 9.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : true = true
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = true
Case2 : sub_check_ta1 (lambda2) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) ((string1::string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8.)
=================================================
Progress: 1129


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : true = true
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = true
Case2 : sub_check_ta1 (lambda2) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) ((string1::string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : true = false
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = true
Case2 : sub_check_ta1 (lambda2) (string_list1) = false
---------------------------------------
sub_check_ta1 (lambda3) ((string1::string_list1)) = false

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
discriminate(rank:7.)
=================================================
Progress: 1130


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : true = false
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = true
Case2 : sub_check_ta1 (lambda2) (string_list1) = false
---------------------------------------
sub_check_ta1 (lambda3) ((string1::string_list1)) = false

1 goal(s) more...

2 conjecture(s) more...
>>> discriminate(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : false = sub_check_ta1 (lambda2) (string_list1)
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = false
---------------------------------------
false = if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) ((string1::string_list1)) else false

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 4
Tactic List : 9
case sub_check_ta1 (lambda2) (string_list1)(rank:8.)
rewrite IH1 in goal at 1(rank:15.)
rewrite IH2 in goal at 0(rank:15.)
rewrite <- Case1 in goal at 1(rank:15.)
rewrite <- Case1 in goal at 0(rank:23.)
rewrite <- IH1 in goal at 0(rank:15.)
rewrite <- Case1 in goal at 2(rank:23.)
rewrite IH1 in goal at 2(rank:23.)
rewrite IH1 in goal at 0(rank:23.)
=================================================
Progress: 1131


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : false = sub_check_ta1 (lambda2) (string_list1)
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = false
---------------------------------------
false = if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) ((string1::string_list1)) else false

0 goal(s) more...

2 conjecture(s) more...
>>> case sub_check_ta1 (lambda2) (string_list1)(rank : 8.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : false = true
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = false
Case2 : sub_check_ta1 (lambda2) (string_list1) = true
---------------------------------------
false = sub_check_ta1 (lambda3) ((string1::string_list1))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
discriminate(rank:7.)
=================================================
Progress: 1132


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : false = true
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = false
Case2 : sub_check_ta1 (lambda2) (string_list1) = true
---------------------------------------
false = sub_check_ta1 (lambda3) ((string1::string_list1))

1 goal(s) more...

2 conjecture(s) more...
>>> discriminate(rank : 7.)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : false = false
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = false
Case2 : sub_check_ta1 (lambda2) (string_list1) = false
---------------------------------------
false = false

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 1133


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string1 : string
string_list1 : string list
Cond1 : mem (string1) (string_list1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : false = false
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = false
Case2 : sub_check_ta1 (lambda2) (string_list1) = false
---------------------------------------
false = false

0 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
original goal
forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lemma
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
tactics
assert forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
intro string1
intro string_list1
intro Cond1
induction lambda1
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite <- Cond1 in goal at 0
rewrite Case1 in goal at 0
assert forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
induction string_list1
reflexivity
simpl in goal
intro string1
case string_eq (string2) (string1)
reflexivity
rewrite IH1 in goal at 0
reflexivity
simpl in goal
rewrite lemma3 in goal at 0
reflexivity
reflexivity
simpl in goal
assert forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
intro string1
intro string_list1
intro Cond1
induction lambda1
simpl in goal
intro string2
case string_eq (string2) (string3)
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 1
rewrite <- Case2 in goal at 0
rewrite <- lemma3 in goal at 0
rewrite Cond1 in goal at 0
reflexivity
reflexivity
simpl in goal
intro string2
define mk_lhs1 arg_10 arg_11 arg_12 arg_13 =
match (arg_10) with
| Nil -> (arg_11::(arg_12::arg_13))
| Cons hd tl -> (hd::mk_lhs1 (tl) (arg_11) (arg_12) (arg_13))
define mk_rhs1 arg_14 arg_15 arg_16 =
match (arg_14) with
| Nil -> (arg_15::arg_16)
| Cons hd tl -> (hd::mk_rhs1 (tl) (arg_15) (arg_16))
assert forall (string1:string) (string2:string) (string_list1:string list), mk_lhs1 ((Nil)) (string1) (string2) (string_list1) = (string1::(string2::string_list1))
reflexivity
assert forall (string1:string) (string_list1:string list) (string2:string) (string3:string) (string_list2:string list), mk_lhs1 ((string1::string_list1)) (string2) (string3) (string_list2) = (string1::mk_lhs1 (string_list1) (string2) (string3) (string_list2))
reflexivity
assert forall (string1:string) (string_list1:string list), mk_rhs1 ((Nil)) (string1) (string_list1) = (string1::string_list1)
reflexivity
assert forall (string1:string) (string_list1:string list) (string2:string) (string_list2:string list), mk_rhs1 ((string1::string_list1)) (string2) (string_list2) = (string1::mk_rhs1 (string_list1) (string2) (string_list2))
reflexivity
assert forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
intro string1
intro string_list2
intro Cond1
induction lambda1
simpl in goal
induction string_list1
simpl in goal
intro string2
case string_eq (string2) (string3)
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 1
rewrite <- Case2 in goal at 0
rewrite <- lemma3 in goal at 0
rewrite Cond1 in goal at 0
reflexivity
reflexivity
simpl in goal
intro string2
case string_eq (string4) (string3)
reflexivity
rewrite IH1 in goal at 0
reflexivity
simpl in goal
induction string_list1
rewrite <- lhs_lemma5 in goal at 0
rewrite IH1 in goal at 0
reflexivity
rewrite <- lhs_lemma5 in goal at 0
rewrite IH1 in goal at 0
reflexivity
simpl in goal
intro string2
rewrite IH1 in goal at 0
rewrite IH2 in goal at 0
reflexivity
rewrite <- lhs_lemma4 in goal at 2
rewrite <- lhs_lemma5 in goal at 0
rewrite lemma8 in goal at 1
reflexivity
rewrite Cond1 in goal at 0
reflexivity
simpl in goal
intro string2
rewrite IH2 in goal at 0
rewrite <- IH1 in goal at 0
reflexivity
rewrite lemma9 in goal at 1
reflexivity
rewrite Cond1 in goal at 0
reflexivity
simpl in goal
rewrite <- IH2 in goal at 0
case sub_check_ta1 (lambda2) ((string1::string_list1))
case sub_check_ta1 (lambda2) (string_list1)
reflexivity
discriminate
case sub_check_ta1 (lambda2) (string_list1)
discriminate
reflexivity
Deduplication: 25
Tactic List : 2
rewrite lemma10 in goal at 1(rank:16.)
rewrite IH1 in goal at 1(rank:23.)
=================================================
Progress: 1134


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma10 in goal at 1(rank : 16.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda2) (string_list1) = sub_check_ta1 (lambda2) (string_list1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 1135


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda2) (string_list1) = sub_check_ta1 (lambda2) (string_list1)

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = true
---------------------------------------
mem (string1) (string_list1) = true

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 3
rewrite Case1 in goal at 0(rank:15.)
rewrite lemma3 in goal at 0(rank:23.)
rewrite <- Case1 in goal at 0(rank:15.)
=================================================
Progress: 1136


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = true
---------------------------------------
mem (string1) (string_list1) = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 15.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = true
---------------------------------------
true = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:6.)
=================================================
Progress: 1137


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = true
---------------------------------------
true = true

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 6.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = false
---------------------------------------
sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 346
Tactic List : 3
rewrite IH1 in goal at 0(rank:14.)
rewrite lemma10 in goal at 1(rank:23.)
rewrite <- IH1 in goal at 0(rank:14.)
=================================================
Progress: 1138


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = false
---------------------------------------
sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 14.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = false
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5.)
=================================================
Progress: 1139


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = false
---------------------------------------
sub_check (lambda2) ((string1::string_list1)) = sub_check (lambda2) ((string1::string_list1))

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = sub_check (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (C (lambda2) (lambda3)) (string_list1) = sub_check (C (lambda2) (lambda3)) (string_list1)

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 8
Tactic List : 1
simpl in goal(rank:5.)
=================================================
Progress: 1140


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = sub_check (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (C (lambda2) (lambda3)) (string_list1) = sub_check (C (lambda2) (lambda3)) (string_list1)

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 5.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = sub_check (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string_list1:string list), if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false = if sub_check (lambda2) (string_list1) then sub_check (lambda3) (string_list1) else false

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:5.)
=================================================
Progress: 1141


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = sub_check (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string_list1:string list), if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false = if sub_check (lambda2) (string_list1) then sub_check (lambda3) (string_list1) else false

0 goal(s) more...

1 conjecture(s) more...
>>> intro string_list1(rank : 5.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = sub_check (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
---------------------------------------
if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false = if sub_check (lambda2) (string_list1) then sub_check (lambda3) (string_list1) else false

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
case sub_check_ta1 (lambda2) (string_list1)(rank:6.)
rewrite IH1 in goal at 0(rank:13.)
rewrite IH2 in goal at 0(rank:13.)
rewrite <- IH1 in goal at 0(rank:13.)
rewrite <- IH2 in goal at 0(rank:13.)
case sub_check (lambda2) (string_list1)(rank:6.)
=================================================
Progress: 1142


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = sub_check (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
---------------------------------------
if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false = if sub_check (lambda2) (string_list1) then sub_check (lambda3) (string_list1) else false

0 goal(s) more...

1 conjecture(s) more...
>>> case sub_check_ta1 (lambda2) (string_list1)(rank : 6.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = sub_check (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Case1 : sub_check_ta1 (lambda2) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda3) (string_list1) = if sub_check (lambda2) (string_list1) then sub_check (lambda3) (string_list1) else false

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
case sub_check (lambda2) (string_list1)(rank:7.)
rewrite <- IH2 in goal at 0(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite <- IH1 in goal at 0(rank:22.)
=================================================
Progress: 1143


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = sub_check (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
---------------------------------------
if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false = if sub_check (lambda2) (string_list1) then sub_check (lambda3) (string_list1) else false

0 goal(s) more...

1 conjecture(s) more...
>>> case sub_check (lambda2) (string_list1)(rank : 6.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = sub_check (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Case1 : sub_check (lambda2) (string_list1) = true
---------------------------------------
if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false = sub_check (lambda3) (string_list1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
case sub_check_ta1 (lambda2) (string_list1)(rank:7.)
rewrite <- IH2 in goal at 0(rank:14.)
rewrite IH1 in goal at 0(rank:14.)
rewrite IH2 in goal at 0(rank:14.)
=================================================
Progress: 1144


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = sub_check (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Case1 : sub_check_ta1 (lambda2) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda3) (string_list1) = if sub_check (lambda2) (string_list1) then sub_check (lambda3) (string_list1) else false

1 goal(s) more...

1 conjecture(s) more...
>>> case sub_check (lambda2) (string_list1)(rank : 7.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = sub_check (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Case1 : sub_check_ta1 (lambda2) (string_list1) = true
Case2 : sub_check (lambda2) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda3) (string_list1) = sub_check (lambda3) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:15.)
rewrite <- IH2 in goal at 0(rank:15.)
=================================================
Progress: 1145


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = sub_check (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Case1 : sub_check (lambda2) (string_list1) = true
---------------------------------------
if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false = sub_check (lambda3) (string_list1)

1 goal(s) more...

1 conjecture(s) more...
>>> case sub_check_ta1 (lambda2) (string_list1)(rank : 7.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = sub_check (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Case1 : sub_check (lambda2) (string_list1) = true
Case2 : sub_check_ta1 (lambda2) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda3) (string_list1) = sub_check (lambda3) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:15.)
rewrite <- IH2 in goal at 0(rank:15.)
=================================================
Progress: 1146


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = sub_check (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
---------------------------------------
if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false = if sub_check (lambda2) (string_list1) then sub_check (lambda3) (string_list1) else false

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 13.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = sub_check (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
---------------------------------------
if sub_check (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false = if sub_check (lambda2) (string_list1) then sub_check (lambda3) (string_list1) else false

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case sub_check (lambda2) (string_list1)(rank:6.)
=================================================
Progress: 1147


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = sub_check (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
---------------------------------------
if sub_check (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false = if sub_check (lambda2) (string_list1) then sub_check (lambda3) (string_list1) else false

0 goal(s) more...

1 conjecture(s) more...
>>> case sub_check (lambda2) (string_list1)(rank : 6.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = sub_check (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Case1 : sub_check (lambda2) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda3) (string_list1) = sub_check (lambda3) (string_list1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:14.)
rewrite <- IH2 in goal at 0(rank:14.)
=================================================
Progress: 1148


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = sub_check (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
---------------------------------------
if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false = if sub_check (lambda2) (string_list1) then sub_check (lambda3) (string_list1) else false

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 13.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = sub_check (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
---------------------------------------
if sub_check_ta1 (lambda2) (string_list1) then sub_check (lambda3) (string_list1) else false = if sub_check (lambda2) (string_list1) then sub_check (lambda3) (string_list1) else false

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case sub_check (lambda2) (string_list1)(rank:6.)
rewrite <- IH1 in goal at 0(rank:13.)
=================================================
Progress: 1149


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = sub_check (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
---------------------------------------
if sub_check_ta1 (lambda2) (string_list1) then sub_check (lambda3) (string_list1) else false = if sub_check (lambda2) (string_list1) then sub_check (lambda3) (string_list1) else false

0 goal(s) more...

1 conjecture(s) more...
>>> case sub_check (lambda2) (string_list1)(rank : 6.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = sub_check (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Case1 : sub_check (lambda2) (string_list1) = true
---------------------------------------
if sub_check_ta1 (lambda2) (string_list1) then sub_check (lambda3) (string_list1) else false = sub_check (lambda3) (string_list1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case sub_check_ta1 (lambda2) (string_list1)(rank:7.)
rewrite IH1 in goal at 0(rank:14.)
rewrite <- IH2 in goal at 0(rank:22.)
rewrite <- IH2 in goal at 2(rank:14.)
rewrite <- IH2 in goal at 1(rank:22.)
=================================================
Progress: 1150


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = sub_check (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Case1 : sub_check (lambda2) (string_list1) = true
---------------------------------------
if sub_check_ta1 (lambda2) (string_list1) then sub_check (lambda3) (string_list1) else false = sub_check (lambda3) (string_list1)

1 goal(s) more...

1 conjecture(s) more...
>>> case sub_check_ta1 (lambda2) (string_list1)(rank : 7.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = sub_check (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Case1 : sub_check (lambda2) (string_list1) = true
Case2 : sub_check_ta1 (lambda2) (string_list1) = true
---------------------------------------
sub_check (lambda3) (string_list1) = sub_check (lambda3) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:6.)
=================================================
Progress: 1151


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = sub_check (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Case1 : sub_check (lambda2) (string_list1) = true
Case2 : sub_check_ta1 (lambda2) (string_list1) = true
---------------------------------------
sub_check (lambda3) (string_list1) = sub_check (lambda3) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 6.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = sub_check (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Case1 : sub_check (lambda2) (string_list1) = true
Case2 : sub_check_ta1 (lambda2) (string_list1) = false
---------------------------------------
false = sub_check (lambda3) (string_list1)

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:14.)
rewrite <- IH2 in goal at 0(rank:22.)
=================================================
Progress: 1152


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = sub_check (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
---------------------------------------
if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false = if sub_check (lambda2) (string_list1) then sub_check (lambda3) (string_list1) else false

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 13.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = sub_check (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
---------------------------------------
if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false = if sub_check_ta1 (lambda2) (string_list1) then sub_check (lambda3) (string_list1) else false

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case sub_check_ta1 (lambda2) (string_list1)(rank:6.)
=================================================
Progress: 1153


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = sub_check (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
---------------------------------------
if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false = if sub_check_ta1 (lambda2) (string_list1) then sub_check (lambda3) (string_list1) else false

0 goal(s) more...

1 conjecture(s) more...
>>> case sub_check_ta1 (lambda2) (string_list1)(rank : 6.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = sub_check (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Case1 : sub_check_ta1 (lambda2) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda3) (string_list1) = sub_check (lambda3) (string_list1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:14.)
rewrite <- IH2 in goal at 0(rank:14.)
=================================================
Progress: 1154


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = sub_check (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
---------------------------------------
if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false = if sub_check (lambda2) (string_list1) then sub_check (lambda3) (string_list1) else false

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 13.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = sub_check (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
---------------------------------------
if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false = if sub_check (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case sub_check_ta1 (lambda2) (string_list1)(rank:6.)
=================================================
Progress: 1155


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = sub_check (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
---------------------------------------
if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false = if sub_check (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false

0 goal(s) more...

1 conjecture(s) more...
>>> case sub_check_ta1 (lambda2) (string_list1)(rank : 6.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = sub_check (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Case1 : sub_check_ta1 (lambda2) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda3) (string_list1) = if sub_check (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case sub_check (lambda2) (string_list1)(rank:7.)
rewrite IH2 in goal at 2(rank:14.)
rewrite <- IH1 in goal at 0(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH2 in goal at 1(rank:22.)
=================================================
Progress: 1156


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = sub_check (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Case1 : sub_check_ta1 (lambda2) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda3) (string_list1) = if sub_check (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false

1 goal(s) more...

1 conjecture(s) more...
>>> case sub_check (lambda2) (string_list1)(rank : 7.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = sub_check (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Case1 : sub_check_ta1 (lambda2) (string_list1) = true
Case2 : sub_check (lambda2) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda3) (string_list1) = sub_check_ta1 (lambda3) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:6.)
=================================================
Progress: 1157


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = sub_check (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Case1 : sub_check_ta1 (lambda2) (string_list1) = true
Case2 : sub_check (lambda2) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda3) (string_list1) = sub_check_ta1 (lambda3) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 6.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = sub_check (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Case1 : sub_check_ta1 (lambda2) (string_list1) = true
Case2 : sub_check (lambda2) (string_list1) = false
---------------------------------------
sub_check_ta1 (lambda3) (string_list1) = false

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite IH2 in goal at 0(rank:14.)
rewrite <- Case2 in goal at 0(rank:14.)
=================================================
Progress: 1158


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = sub_check (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
---------------------------------------
if sub_check_ta1 (lambda2) (string_list1) then sub_check (lambda3) (string_list1) else false = if sub_check (lambda2) (string_list1) then sub_check (lambda3) (string_list1) else false

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 13.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = sub_check (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
---------------------------------------
if sub_check_ta1 (lambda2) (string_list1) then sub_check (lambda3) (string_list1) else false = if sub_check_ta1 (lambda2) (string_list1) then sub_check (lambda3) (string_list1) else false

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:4.)
=================================================
Progress: 1159


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = sub_check (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
---------------------------------------
if sub_check_ta1 (lambda2) (string_list1) then sub_check (lambda3) (string_list1) else false = if sub_check_ta1 (lambda2) (string_list1) then sub_check (lambda3) (string_list1) else false

0 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 4.)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = sub_check (lambda2) ((Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = sub_check (lambda2) ((string1::(Nil)))

1 goal(s) more...

0 conjecture(s) more...
original goal
forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lemma
forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
tactics
assert forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
induction lambda1
simpl in goal
induction string_list1
reflexivity
simpl in goal
case string_eq (string2) (string1)
reflexivity
rewrite IH1 in goal at 0
reflexivity
simpl in goal
intro string_list1
case mem (string1) (string_list1)
rewrite <- IH1 in goal at 0
assert forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
intro string1
intro string_list1
intro Cond1
induction lambda1
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite <- Cond1 in goal at 0
rewrite Case1 in goal at 0
assert forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
induction string_list1
reflexivity
simpl in goal
intro string1
case string_eq (string2) (string1)
reflexivity
rewrite IH1 in goal at 0
reflexivity
simpl in goal
rewrite lemma3 in goal at 0
reflexivity
reflexivity
simpl in goal
assert forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
intro string1
intro string_list1
intro Cond1
induction lambda1
simpl in goal
intro string2
case string_eq (string2) (string3)
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 1
rewrite <- Case2 in goal at 0
rewrite <- lemma3 in goal at 0
rewrite Cond1 in goal at 0
reflexivity
reflexivity
simpl in goal
intro string2
define mk_lhs1 arg_10 arg_11 arg_12 arg_13 =
match (arg_10) with
| Nil -> (arg_11::(arg_12::arg_13))
| Cons hd tl -> (hd::mk_lhs1 (tl) (arg_11) (arg_12) (arg_13))
define mk_rhs1 arg_14 arg_15 arg_16 =
match (arg_14) with
| Nil -> (arg_15::arg_16)
| Cons hd tl -> (hd::mk_rhs1 (tl) (arg_15) (arg_16))
assert forall (string1:string) (string2:string) (string_list1:string list), mk_lhs1 ((Nil)) (string1) (string2) (string_list1) = (string1::(string2::string_list1))
reflexivity
assert forall (string1:string) (string_list1:string list) (string2:string) (string3:string) (string_list2:string list), mk_lhs1 ((string1::string_list1)) (string2) (string3) (string_list2) = (string1::mk_lhs1 (string_list1) (string2) (string3) (string_list2))
reflexivity
assert forall (string1:string) (string_list1:string list), mk_rhs1 ((Nil)) (string1) (string_list1) = (string1::string_list1)
reflexivity
assert forall (string1:string) (string_list1:string list) (string2:string) (string_list2:string list), mk_rhs1 ((string1::string_list1)) (string2) (string_list2) = (string1::mk_rhs1 (string_list1) (string2) (string_list2))
reflexivity
assert forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
intro string1
intro string_list2
intro Cond1
induction lambda1
simpl in goal
induction string_list1
simpl in goal
intro string2
case string_eq (string2) (string3)
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 1
rewrite <- Case2 in goal at 0
rewrite <- lemma3 in goal at 0
rewrite Cond1 in goal at 0
reflexivity
reflexivity
simpl in goal
intro string2
case string_eq (string4) (string3)
reflexivity
rewrite IH1 in goal at 0
reflexivity
simpl in goal
induction string_list1
rewrite <- lhs_lemma5 in goal at 0
rewrite IH1 in goal at 0
reflexivity
rewrite <- lhs_lemma5 in goal at 0
rewrite IH1 in goal at 0
reflexivity
simpl in goal
intro string2
rewrite IH1 in goal at 0
rewrite IH2 in goal at 0
reflexivity
rewrite <- lhs_lemma4 in goal at 2
rewrite <- lhs_lemma5 in goal at 0
rewrite lemma8 in goal at 1
reflexivity
rewrite Cond1 in goal at 0
reflexivity
simpl in goal
intro string2
rewrite IH2 in goal at 0
rewrite <- IH1 in goal at 0
reflexivity
rewrite lemma9 in goal at 1
reflexivity
rewrite Cond1 in goal at 0
reflexivity
simpl in goal
rewrite <- IH2 in goal at 0
case sub_check_ta1 (lambda2) ((string1::string_list1))
case sub_check_ta1 (lambda2) (string_list1)
reflexivity
discriminate
case sub_check_ta1 (lambda2) (string_list1)
discriminate
reflexivity
rewrite lemma10 in goal at 1
reflexivity
rewrite Case1 in goal at 0
reflexivity
rewrite IH1 in goal at 0
reflexivity
simpl in goal
intro string_list1
rewrite IH2 in goal at 0
rewrite <- IH1 in goal at 0
reflexivity
Deduplication: 26
Tactic List : 3
rewrite lemma11 in goal at 0(rank:12.)
rewrite lemma10 in goal at 1(rank:21.)
rewrite <- lemma11 in goal at 0(rank:12.)
=================================================
Progress: 1160


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = sub_check (lambda2) ((Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = sub_check (lambda2) ((string1::(Nil)))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite lemma11 in goal at 0(rank : 12.)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = sub_check (lambda2) ((Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check (lambda2) ((string1::(Nil))) = sub_check (lambda2) ((string1::(Nil)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3.)
=================================================
Progress: 1161


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = sub_check (lambda2) ((Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check (lambda2) ((string1::(Nil))) = sub_check (lambda2) ((string1::(Nil)))

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3.)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = sub_check (lambda2) ((Nil))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = sub_check (lambda3) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
sub_check_ta1 (C (lambda2) (lambda3)) ((Nil)) = sub_check (C (lambda2) (lambda3)) ((Nil))

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 2
Tactic List : 1
simpl in goal(rank:3.)
=================================================
Progress: 1162


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = sub_check (lambda2) ((Nil))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = sub_check (lambda3) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
sub_check_ta1 (C (lambda2) (lambda3)) ((Nil)) = sub_check (C (lambda2) (lambda3)) ((Nil))

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3.)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = sub_check (lambda2) ((Nil))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = sub_check (lambda3) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((Nil)) then sub_check_ta1 (lambda3) ((Nil)) else false = if sub_check (lambda2) ((Nil)) then sub_check (lambda3) ((Nil)) else false

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
case sub_check_ta1 (lambda2) ((Nil))(rank:4.)
rewrite IH1 in goal at 0(rank:11.)
rewrite lemma11 in goal at 0(rank:11.)
rewrite <- IH1 in goal at 0(rank:11.)
rewrite <- IH2 in goal at 0(rank:11.)
rewrite <- lemma11 in goal at 0(rank:11.)
rewrite IH2 in goal at 0(rank:11.)
case sub_check (lambda2) ((Nil))(rank:4.)
=================================================
Progress: 1163


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = sub_check (lambda2) ((Nil))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = sub_check (lambda3) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((Nil)) then sub_check_ta1 (lambda3) ((Nil)) else false = if sub_check (lambda2) ((Nil)) then sub_check (lambda3) ((Nil)) else false

0 goal(s) more...

0 conjecture(s) more...
>>> case sub_check_ta1 (lambda2) ((Nil))(rank : 4.)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : true = sub_check (lambda2) ((Nil))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = sub_check (lambda3) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check_ta1 (lambda2) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda3) ((Nil)) = if sub_check (lambda2) ((Nil)) then sub_check (lambda3) ((Nil)) else false

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
case sub_check (lambda2) ((Nil))(rank:5.)
rewrite <- IH1 in goal at 0(rank:12.)
rewrite IH2 in goal at 0(rank:20.)
rewrite <- IH2 in goal at 0(rank:20.)
rewrite <- lemma11 in goal at 0(rank:20.)
rewrite <- lemma11 in goal at 1(rank:20.)
=================================================
Progress: 1164


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = sub_check (lambda2) ((Nil))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = sub_check (lambda3) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((Nil)) then sub_check_ta1 (lambda3) ((Nil)) else false = if sub_check (lambda2) ((Nil)) then sub_check (lambda3) ((Nil)) else false

0 goal(s) more...

0 conjecture(s) more...
>>> case sub_check (lambda2) ((Nil))(rank : 4.)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = true
IH2 : sub_check_ta1 (lambda3) ((Nil)) = sub_check (lambda3) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) ((Nil)) = true
---------------------------------------
if sub_check_ta1 (lambda2) ((Nil)) then sub_check_ta1 (lambda3) ((Nil)) else false = sub_check (lambda3) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
rewrite IH1 in goal at 0(rank:12.)
rewrite lemma11 in goal at 0(rank:12.)
rewrite lemma11 in goal at 1(rank:12.)
rewrite <- IH2 in goal at 0(rank:12.)
rewrite IH2 in goal at 0(rank:12.)
=================================================
Progress: 1165


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : true = sub_check (lambda2) ((Nil))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = sub_check (lambda3) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check_ta1 (lambda2) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda3) ((Nil)) = if sub_check (lambda2) ((Nil)) then sub_check (lambda3) ((Nil)) else false

1 goal(s) more...

0 conjecture(s) more...
>>> case sub_check (lambda2) ((Nil))(rank : 5.)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : true = true
IH2 : sub_check_ta1 (lambda3) ((Nil)) = sub_check (lambda3) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check_ta1 (lambda2) ((Nil)) = true
Case2 : sub_check (lambda2) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda3) ((Nil)) = sub_check (lambda3) ((Nil))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:13.)
rewrite <- IH2 in goal at 0(rank:13.)
=================================================
Progress: 1166


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = sub_check (lambda2) ((Nil))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = sub_check (lambda3) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((Nil)) then sub_check_ta1 (lambda3) ((Nil)) else false = if sub_check (lambda2) ((Nil)) then sub_check (lambda3) ((Nil)) else false

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = sub_check (lambda2) ((Nil))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = sub_check (lambda3) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check (lambda2) ((Nil)) then sub_check_ta1 (lambda3) ((Nil)) else false = if sub_check (lambda2) ((Nil)) then sub_check (lambda3) ((Nil)) else false

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case sub_check (lambda2) ((Nil))(rank:4.)
=================================================
Progress: 1167


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = sub_check (lambda2) ((Nil))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = sub_check (lambda3) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check (lambda2) ((Nil)) then sub_check_ta1 (lambda3) ((Nil)) else false = if sub_check (lambda2) ((Nil)) then sub_check (lambda3) ((Nil)) else false

0 goal(s) more...

0 conjecture(s) more...
>>> case sub_check (lambda2) ((Nil))(rank : 4.)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = true
IH2 : sub_check_ta1 (lambda3) ((Nil)) = sub_check (lambda3) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda3) ((Nil)) = sub_check (lambda3) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:12.)
rewrite <- IH2 in goal at 0(rank:12.)
=================================================
Progress: 1168


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = sub_check (lambda2) ((Nil))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = sub_check (lambda3) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((Nil)) then sub_check_ta1 (lambda3) ((Nil)) else false = if sub_check (lambda2) ((Nil)) then sub_check (lambda3) ((Nil)) else false

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = sub_check (lambda2) ((Nil))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = sub_check (lambda3) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((Nil)) then sub_check (lambda3) ((Nil)) else false = if sub_check (lambda2) ((Nil)) then sub_check (lambda3) ((Nil)) else false

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case sub_check (lambda2) ((Nil))(rank:4.)
rewrite <- IH1 in goal at 0(rank:11.)
=================================================
Progress: 1169


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = sub_check (lambda2) ((Nil))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = sub_check (lambda3) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((Nil)) then sub_check (lambda3) ((Nil)) else false = if sub_check (lambda2) ((Nil)) then sub_check (lambda3) ((Nil)) else false

0 goal(s) more...

0 conjecture(s) more...
>>> case sub_check (lambda2) ((Nil))(rank : 4.)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = true
IH2 : sub_check_ta1 (lambda3) ((Nil)) = sub_check (lambda3) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) ((Nil)) = true
---------------------------------------
if sub_check_ta1 (lambda2) ((Nil)) then sub_check (lambda3) ((Nil)) else false = sub_check (lambda3) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
rewrite IH1 in goal at 0(rank:12.)
rewrite lemma11 in goal at 0(rank:12.)
rewrite <- IH2 in goal at 2(rank:12.)
rewrite <- IH2 in goal at 0(rank:20.)
rewrite <- IH2 in goal at 1(rank:20.)
=================================================
Progress: 1170


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = sub_check (lambda2) ((Nil))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = sub_check (lambda3) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((Nil)) then sub_check_ta1 (lambda3) ((Nil)) else false = if sub_check (lambda2) ((Nil)) then sub_check (lambda3) ((Nil)) else false

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite lemma11 in goal at 0(rank : 11.)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = sub_check (lambda2) ((Nil))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = sub_check (lambda3) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check (lambda2) ((Nil)) then sub_check (lambda3) ((Nil)) else false = if sub_check (lambda2) ((Nil)) then sub_check (lambda3) ((Nil)) else false

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0.)
=================================================
Progress: 1171


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = sub_check (lambda2) ((Nil))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = sub_check (lambda3) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check (lambda2) ((Nil)) then sub_check (lambda3) ((Nil)) else false = if sub_check (lambda2) ((Nil)) then sub_check (lambda3) ((Nil)) else false

0 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0.)


No conjecture
Proof Success
Proof
assert forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
simpl in goal
induction lambda1
reflexivity
simpl in goal
assert forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
induction lambda1
simpl in goal
induction string_list1
reflexivity
simpl in goal
case string_eq (string2) (string1)
reflexivity
rewrite IH1 in goal at 0
reflexivity
simpl in goal
intro string_list1
case mem (string1) (string_list1)
rewrite <- IH1 in goal at 0
assert forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)
intro string1
intro string_list1
intro Cond1
induction lambda1
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 1
rewrite <- Cond1 in goal at 0
rewrite Case1 in goal at 0
assert forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = is_mem_ta1 (string_list1) (string1)
induction string_list1
reflexivity
simpl in goal
intro string1
case string_eq (string2) (string1)
reflexivity
rewrite IH1 in goal at 0
reflexivity
simpl in goal
rewrite lemma3 in goal at 0
reflexivity
reflexivity
simpl in goal
assert forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda1) ((string2::string_list1))
intro string1
intro string_list1
intro Cond1
induction lambda1
simpl in goal
intro string2
case string_eq (string2) (string3)
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 1
rewrite <- Case2 in goal at 0
rewrite <- lemma3 in goal at 0
rewrite Cond1 in goal at 0
reflexivity
reflexivity
simpl in goal
intro string2
define mk_lhs1 arg_10 arg_11 arg_12 arg_13 =
match (arg_10) with
| Nil -> (arg_11::(arg_12::arg_13))
| Cons hd tl -> (hd::mk_lhs1 (tl) (arg_11) (arg_12) (arg_13))
define mk_rhs1 arg_14 arg_15 arg_16 =
match (arg_14) with
| Nil -> (arg_15::arg_16)
| Cons hd tl -> (hd::mk_rhs1 (tl) (arg_15) (arg_16))
assert forall (string1:string) (string2:string) (string_list1:string list), mk_lhs1 ((Nil)) (string1) (string2) (string_list1) = (string1::(string2::string_list1))
reflexivity
assert forall (string1:string) (string_list1:string list) (string2:string) (string3:string) (string_list2:string list), mk_lhs1 ((string1::string_list1)) (string2) (string3) (string_list2) = (string1::mk_lhs1 (string_list1) (string2) (string3) (string_list2))
reflexivity
assert forall (string1:string) (string_list1:string list), mk_rhs1 ((Nil)) (string1) (string_list1) = (string1::string_list1)
reflexivity
assert forall (string1:string) (string_list1:string list) (string2:string) (string_list2:string list), mk_rhs1 ((string1::string_list1)) (string2) (string_list2) = (string1::mk_rhs1 (string_list1) (string2) (string_list2))
reflexivity
assert forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
intro string1
intro string_list2
intro Cond1
induction lambda1
simpl in goal
induction string_list1
simpl in goal
intro string2
case string_eq (string2) (string3)
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 1
rewrite <- Case2 in goal at 0
rewrite <- lemma3 in goal at 0
rewrite Cond1 in goal at 0
reflexivity
reflexivity
simpl in goal
intro string2
case string_eq (string4) (string3)
reflexivity
rewrite IH1 in goal at 0
reflexivity
simpl in goal
induction string_list1
rewrite <- lhs_lemma5 in goal at 0
rewrite IH1 in goal at 0
reflexivity
rewrite <- lhs_lemma5 in goal at 0
rewrite IH1 in goal at 0
reflexivity
simpl in goal
intro string2
rewrite IH1 in goal at 0
rewrite IH2 in goal at 0
reflexivity
rewrite <- lhs_lemma4 in goal at 2
rewrite <- lhs_lemma5 in goal at 0
rewrite lemma8 in goal at 1
reflexivity
rewrite Cond1 in goal at 0
reflexivity
simpl in goal
intro string2
rewrite IH2 in goal at 0
rewrite <- IH1 in goal at 0
reflexivity
rewrite lemma9 in goal at 1
reflexivity
rewrite Cond1 in goal at 0
reflexivity
simpl in goal
rewrite <- IH2 in goal at 0
case sub_check_ta1 (lambda2) ((string1::string_list1))
case sub_check_ta1 (lambda2) (string_list1)
reflexivity
discriminate
case sub_check_ta1 (lambda2) (string_list1)
discriminate
reflexivity
rewrite lemma10 in goal at 1
reflexivity
rewrite Case1 in goal at 0
reflexivity
rewrite IH1 in goal at 0
reflexivity
simpl in goal
intro string_list1
rewrite IH2 in goal at 0
rewrite <- IH1 in goal at 0
reflexivity
rewrite lemma11 in goal at 0
reflexivity
simpl in goal
rewrite lemma11 in goal at 0
reflexivity
Qed
