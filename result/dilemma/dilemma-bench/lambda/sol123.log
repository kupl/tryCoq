Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (l:lambda), check_ta1 (l) = check (l)(rank : 0)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:3)
=================================================
Progress: 2


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) ((Nil)) = check (lambda1)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:5)
=================================================
Progress: 3


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) ((Nil)) = check (lambda1)

0 goal(s) more...

0 conjecture(s) more...
>>> induction lambda1(rank : 5)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
sub_check_ta1 (V (string1)) ((Nil)) = check (V (string1))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:4)
=================================================
Progress: 4


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
sub_check_ta1 (V (string1)) ((Nil)) = check (V (string1))

2 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 4)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (P (string1) (lambda2)) ((Nil)) = check (P (string1) (lambda2))

1 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:4)
=================================================
Progress: 5


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (P (string1) (lambda2)) ((Nil)) = check (P (string1) (lambda2))

1 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 4)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if is_connect (lambda2) then && (check (get_left (P (string1) (lambda2)))) (check (get_right (P (string1) (lambda2)))) else match (P (string1) (lambda2)) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_connect (lambda2)(rank:5)
=================================================
Progress: 6


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if is_connect (lambda2) then && (check (get_left (P (string1) (lambda2)))) (check (get_right (P (string1) (lambda2)))) else match (P (string1) (lambda2)) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))

1 goal(s) more...

0 conjecture(s) more...
>>> case is_connect (lambda2)(rank : 5)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) then if is_connect (get_right (lambda2)) then && (check (get_left (P (string1) (get_right (lambda2))))) (check (get_right (P (string1) (get_right (lambda2))))) else match (P (string1) (get_right (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) else false

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))(rank:6)
=================================================
Progress: 7


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) then if is_connect (get_right (lambda2)) then && (check (get_left (P (string1) (get_right (lambda2))))) (check (get_right (P (string1) (get_right (lambda2))))) else match (P (string1) (get_right (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) else false

2 goal(s) more...

0 conjecture(s) more...
>>> case if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))(rank : 6)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if is_connect (get_right (lambda2)) then && (check (get_left (P (string1) (get_right (lambda2))))) (check (get_right (P (string1) (get_right (lambda2))))) else match (P (string1) (get_right (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_connect (get_right (lambda2))(rank:7)
=================================================
Progress: 8


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if is_connect (get_right (lambda2)) then && (check (get_left (P (string1) (get_right (lambda2))))) (check (get_right (P (string1) (get_right (lambda2))))) else match (P (string1) (get_right (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_connect (get_right (lambda2))(rank : 7)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) then if is_connect (get_right (get_right (lambda2))) then && (check (get_left (P (string1) (get_right (get_right (lambda2)))))) (check (get_right (P (string1) (get_right (get_right (lambda2)))))) else match (P (string1) (get_right (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) else false

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))(rank:8)
=================================================
Progress: 9


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) then if is_connect (get_right (get_right (lambda2))) then && (check (get_left (P (string1) (get_right (get_right (lambda2)))))) (check (get_right (P (string1) (get_right (get_right (lambda2)))))) else match (P (string1) (get_right (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) else false

4 goal(s) more...

0 conjecture(s) more...
>>> case if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))(rank : 8)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
Case4 : if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if is_connect (get_right (get_right (lambda2))) then && (check (get_left (P (string1) (get_right (get_right (lambda2)))))) (check (get_right (P (string1) (get_right (get_right (lambda2)))))) else match (P (string1) (get_right (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_connect (get_right (get_right (lambda2)))(rank:9)
=================================================
Progress: 10


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
Case4 : if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if is_connect (get_right (get_right (lambda2))) then && (check (get_left (P (string1) (get_right (get_right (lambda2)))))) (check (get_right (P (string1) (get_right (get_right (lambda2)))))) else match (P (string1) (get_right (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))

5 goal(s) more...

0 conjecture(s) more...
>>> case is_connect (get_right (get_right (lambda2)))(rank : 9)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
Case4 : if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case5 : is_connect (get_right (get_right (lambda2))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if if is_connect (get_left (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_left (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_left (get_right (get_right (lambda2))))))) else match (P (string1) (get_left (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) then if is_connect (get_right (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_right (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_right (get_right (get_right (lambda2))))))) else match (P (string1) (get_right (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) else false

6 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case if is_connect (get_left (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_left (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_left (get_right (get_right (lambda2))))))) else match (P (string1) (get_left (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))(rank:10)
=================================================
Progress: 11


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
Case4 : if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case5 : is_connect (get_right (get_right (lambda2))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if if is_connect (get_left (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_left (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_left (get_right (get_right (lambda2))))))) else match (P (string1) (get_left (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) then if is_connect (get_right (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_right (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_right (get_right (get_right (lambda2))))))) else match (P (string1) (get_right (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) else false

6 goal(s) more...

0 conjecture(s) more...
>>> case if is_connect (get_left (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_left (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_left (get_right (get_right (lambda2))))))) else match (P (string1) (get_left (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))(rank : 10)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
Case4 : if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case5 : is_connect (get_right (get_right (lambda2))) = true
Case6 : if is_connect (get_left (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_left (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_left (get_right (get_right (lambda2))))))) else match (P (string1) (get_left (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if is_connect (get_right (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_right (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_right (get_right (get_right (lambda2))))))) else match (P (string1) (get_right (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))

7 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_connect (get_right (get_right (get_right (lambda2))))(rank:11)
=================================================
Progress: 12


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
Case4 : if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case5 : is_connect (get_right (get_right (lambda2))) = true
Case6 : if is_connect (get_left (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_left (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_left (get_right (get_right (lambda2))))))) else match (P (string1) (get_left (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if is_connect (get_right (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_right (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_right (get_right (get_right (lambda2))))))) else match (P (string1) (get_right (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))

7 goal(s) more...

0 conjecture(s) more...
>>> case is_connect (get_right (get_right (get_right (lambda2))))(rank : 11)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
Case4 : if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case5 : is_connect (get_right (get_right (lambda2))) = true
Case6 : if is_connect (get_left (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_left (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_left (get_right (get_right (lambda2))))))) else match (P (string1) (get_left (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case7 : is_connect (get_right (get_right (get_right (lambda2)))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if if is_connect (get_left (get_right (get_right (get_right (lambda2))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) else match (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) then if is_connect (get_right (get_right (get_right (get_right (lambda2))))) then && (check (get_left (P (string1) (get_right (get_right (get_right (get_right (lambda2)))))))) (check (get_right (P (string1) (get_right (get_right (get_right (get_right (lambda2)))))))) else match (P (string1) (get_right (get_right (get_right (get_right (lambda2)))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) else false

8 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case if is_connect (get_left (get_right (get_right (get_right (lambda2))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) else match (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))(rank:12)
=================================================
Progress: 13


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
Case4 : if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case5 : is_connect (get_right (get_right (lambda2))) = true
Case6 : if is_connect (get_left (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_left (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_left (get_right (get_right (lambda2))))))) else match (P (string1) (get_left (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case7 : is_connect (get_right (get_right (get_right (lambda2)))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if if is_connect (get_left (get_right (get_right (get_right (lambda2))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) else match (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) then if is_connect (get_right (get_right (get_right (get_right (lambda2))))) then && (check (get_left (P (string1) (get_right (get_right (get_right (get_right (lambda2)))))))) (check (get_right (P (string1) (get_right (get_right (get_right (get_right (lambda2)))))))) else match (P (string1) (get_right (get_right (get_right (get_right (lambda2)))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) else false

8 goal(s) more...

0 conjecture(s) more...
>>> case if is_connect (get_left (get_right (get_right (get_right (lambda2))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) else match (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))(rank : 12)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
Case4 : if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case5 : is_connect (get_right (get_right (lambda2))) = true
Case6 : if is_connect (get_left (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_left (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_left (get_right (get_right (lambda2))))))) else match (P (string1) (get_left (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case7 : is_connect (get_right (get_right (get_right (lambda2)))) = true
Case8 : if is_connect (get_left (get_right (get_right (get_right (lambda2))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) else match (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if is_connect (get_right (get_right (get_right (get_right (lambda2))))) then && (check (get_left (P (string1) (get_right (get_right (get_right (get_right (lambda2)))))))) (check (get_right (P (string1) (get_right (get_right (get_right (get_right (lambda2)))))))) else match (P (string1) (get_right (get_right (get_right (get_right (lambda2)))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))

9 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_connect (get_right (get_right (get_right (get_right (lambda2)))))(rank:13)
=================================================
Progress: 14


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
Case4 : if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case5 : is_connect (get_right (get_right (lambda2))) = true
Case6 : if is_connect (get_left (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_left (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_left (get_right (get_right (lambda2))))))) else match (P (string1) (get_left (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case7 : is_connect (get_right (get_right (get_right (lambda2)))) = true
Case8 : if is_connect (get_left (get_right (get_right (get_right (lambda2))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) else match (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if is_connect (get_right (get_right (get_right (get_right (lambda2))))) then && (check (get_left (P (string1) (get_right (get_right (get_right (get_right (lambda2)))))))) (check (get_right (P (string1) (get_right (get_right (get_right (get_right (lambda2)))))))) else match (P (string1) (get_right (get_right (get_right (get_right (lambda2)))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))

9 goal(s) more...

0 conjecture(s) more...
>>> case is_connect (get_right (get_right (get_right (get_right (lambda2)))))(rank : 13)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
Case4 : if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case5 : is_connect (get_right (get_right (lambda2))) = true
Case6 : if is_connect (get_left (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_left (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_left (get_right (get_right (lambda2))))))) else match (P (string1) (get_left (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case7 : is_connect (get_right (get_right (get_right (lambda2)))) = true
Case8 : if is_connect (get_left (get_right (get_right (get_right (lambda2))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) else match (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case9 : is_connect (get_right (get_right (get_right (get_right (lambda2))))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if if is_connect (get_left (get_right (get_right (get_right (get_right (lambda2)))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) then if is_connect (get_right (get_right (get_right (get_right (get_right (lambda2)))))) then && (check (get_left (P (string1) (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) (check (get_right (P (string1) (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) else match (P (string1) (get_right (get_right (get_right (get_right (get_right (lambda2))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) else false

10 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case if is_connect (get_left (get_right (get_right (get_right (get_right (lambda2)))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))(rank:14)
=================================================
Progress: 15


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
Case4 : if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case5 : is_connect (get_right (get_right (lambda2))) = true
Case6 : if is_connect (get_left (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_left (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_left (get_right (get_right (lambda2))))))) else match (P (string1) (get_left (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case7 : is_connect (get_right (get_right (get_right (lambda2)))) = true
Case8 : if is_connect (get_left (get_right (get_right (get_right (lambda2))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) else match (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case9 : is_connect (get_right (get_right (get_right (get_right (lambda2))))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if if is_connect (get_left (get_right (get_right (get_right (get_right (lambda2)))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) then if is_connect (get_right (get_right (get_right (get_right (get_right (lambda2)))))) then && (check (get_left (P (string1) (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) (check (get_right (P (string1) (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) else match (P (string1) (get_right (get_right (get_right (get_right (get_right (lambda2))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) else false

10 goal(s) more...

0 conjecture(s) more...
>>> case if is_connect (get_left (get_right (get_right (get_right (get_right (lambda2)))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))(rank : 14)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
Case4 : if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case5 : is_connect (get_right (get_right (lambda2))) = true
Case6 : if is_connect (get_left (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_left (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_left (get_right (get_right (lambda2))))))) else match (P (string1) (get_left (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case7 : is_connect (get_right (get_right (get_right (lambda2)))) = true
Case8 : if is_connect (get_left (get_right (get_right (get_right (lambda2))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) else match (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case9 : is_connect (get_right (get_right (get_right (get_right (lambda2))))) = true
Case10 : if is_connect (get_left (get_right (get_right (get_right (get_right (lambda2)))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if is_connect (get_right (get_right (get_right (get_right (get_right (lambda2)))))) then && (check (get_left (P (string1) (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) (check (get_right (P (string1) (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) else match (P (string1) (get_right (get_right (get_right (get_right (get_right (lambda2))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))

11 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_connect (get_right (get_right (get_right (get_right (get_right (lambda2))))))(rank:15)
=================================================
Progress: 16


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
Case4 : if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case5 : is_connect (get_right (get_right (lambda2))) = true
Case6 : if is_connect (get_left (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_left (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_left (get_right (get_right (lambda2))))))) else match (P (string1) (get_left (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case7 : is_connect (get_right (get_right (get_right (lambda2)))) = true
Case8 : if is_connect (get_left (get_right (get_right (get_right (lambda2))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) else match (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case9 : is_connect (get_right (get_right (get_right (get_right (lambda2))))) = true
Case10 : if is_connect (get_left (get_right (get_right (get_right (get_right (lambda2)))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if is_connect (get_right (get_right (get_right (get_right (get_right (lambda2)))))) then && (check (get_left (P (string1) (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) (check (get_right (P (string1) (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) else match (P (string1) (get_right (get_right (get_right (get_right (get_right (lambda2))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))

11 goal(s) more...

0 conjecture(s) more...
>>> case is_connect (get_right (get_right (get_right (get_right (get_right (lambda2))))))(rank : 15)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
Case4 : if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case5 : is_connect (get_right (get_right (lambda2))) = true
Case6 : if is_connect (get_left (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_left (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_left (get_right (get_right (lambda2))))))) else match (P (string1) (get_left (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case7 : is_connect (get_right (get_right (get_right (lambda2)))) = true
Case8 : if is_connect (get_left (get_right (get_right (get_right (lambda2))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) else match (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case9 : is_connect (get_right (get_right (get_right (get_right (lambda2))))) = true
Case10 : if is_connect (get_left (get_right (get_right (get_right (get_right (lambda2)))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case11 : is_connect (get_right (get_right (get_right (get_right (get_right (lambda2)))))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (lambda2))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) then if is_connect (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))) then && (check (get_left (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) (check (get_right (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) else match (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) else false

12 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (lambda2))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))(rank:16)
=================================================
Progress: 17


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
Case4 : if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case5 : is_connect (get_right (get_right (lambda2))) = true
Case6 : if is_connect (get_left (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_left (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_left (get_right (get_right (lambda2))))))) else match (P (string1) (get_left (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case7 : is_connect (get_right (get_right (get_right (lambda2)))) = true
Case8 : if is_connect (get_left (get_right (get_right (get_right (lambda2))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) else match (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case9 : is_connect (get_right (get_right (get_right (get_right (lambda2))))) = true
Case10 : if is_connect (get_left (get_right (get_right (get_right (get_right (lambda2)))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case11 : is_connect (get_right (get_right (get_right (get_right (get_right (lambda2)))))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (lambda2))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) then if is_connect (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))) then && (check (get_left (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) (check (get_right (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) else match (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) else false

12 goal(s) more...

0 conjecture(s) more...
>>> case if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (lambda2))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))(rank : 16)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
Case4 : if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case5 : is_connect (get_right (get_right (lambda2))) = true
Case6 : if is_connect (get_left (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_left (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_left (get_right (get_right (lambda2))))))) else match (P (string1) (get_left (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case7 : is_connect (get_right (get_right (get_right (lambda2)))) = true
Case8 : if is_connect (get_left (get_right (get_right (get_right (lambda2))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) else match (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case9 : is_connect (get_right (get_right (get_right (get_right (lambda2))))) = true
Case10 : if is_connect (get_left (get_right (get_right (get_right (get_right (lambda2)))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case11 : is_connect (get_right (get_right (get_right (get_right (get_right (lambda2)))))) = true
Case12 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (lambda2))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if is_connect (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))) then && (check (get_left (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) (check (get_right (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) else match (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))

13 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_connect (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))(rank:17)
=================================================
Progress: 18


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
Case4 : if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case5 : is_connect (get_right (get_right (lambda2))) = true
Case6 : if is_connect (get_left (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_left (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_left (get_right (get_right (lambda2))))))) else match (P (string1) (get_left (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case7 : is_connect (get_right (get_right (get_right (lambda2)))) = true
Case8 : if is_connect (get_left (get_right (get_right (get_right (lambda2))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) else match (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case9 : is_connect (get_right (get_right (get_right (get_right (lambda2))))) = true
Case10 : if is_connect (get_left (get_right (get_right (get_right (get_right (lambda2)))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case11 : is_connect (get_right (get_right (get_right (get_right (get_right (lambda2)))))) = true
Case12 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (lambda2))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if is_connect (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))) then && (check (get_left (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) (check (get_right (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) else match (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))

13 goal(s) more...

0 conjecture(s) more...
>>> case is_connect (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))(rank : 17)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
Case4 : if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case5 : is_connect (get_right (get_right (lambda2))) = true
Case6 : if is_connect (get_left (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_left (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_left (get_right (get_right (lambda2))))))) else match (P (string1) (get_left (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case7 : is_connect (get_right (get_right (get_right (lambda2)))) = true
Case8 : if is_connect (get_left (get_right (get_right (get_right (lambda2))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) else match (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case9 : is_connect (get_right (get_right (get_right (get_right (lambda2))))) = true
Case10 : if is_connect (get_left (get_right (get_right (get_right (get_right (lambda2)))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case11 : is_connect (get_right (get_right (get_right (get_right (get_right (lambda2)))))) = true
Case12 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (lambda2))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case13 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) then if is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) then && (check (get_left (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) (check (get_right (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) else match (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) else false

14 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))(rank:18)
=================================================
Progress: 19


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
Case4 : if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case5 : is_connect (get_right (get_right (lambda2))) = true
Case6 : if is_connect (get_left (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_left (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_left (get_right (get_right (lambda2))))))) else match (P (string1) (get_left (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case7 : is_connect (get_right (get_right (get_right (lambda2)))) = true
Case8 : if is_connect (get_left (get_right (get_right (get_right (lambda2))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) else match (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case9 : is_connect (get_right (get_right (get_right (get_right (lambda2))))) = true
Case10 : if is_connect (get_left (get_right (get_right (get_right (get_right (lambda2)))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case11 : is_connect (get_right (get_right (get_right (get_right (get_right (lambda2)))))) = true
Case12 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (lambda2))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case13 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) then if is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) then && (check (get_left (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) (check (get_right (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) else match (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) else false

14 goal(s) more...

0 conjecture(s) more...
>>> case if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))(rank : 18)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
Case4 : if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case5 : is_connect (get_right (get_right (lambda2))) = true
Case6 : if is_connect (get_left (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_left (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_left (get_right (get_right (lambda2))))))) else match (P (string1) (get_left (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case7 : is_connect (get_right (get_right (get_right (lambda2)))) = true
Case8 : if is_connect (get_left (get_right (get_right (get_right (lambda2))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) else match (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case9 : is_connect (get_right (get_right (get_right (get_right (lambda2))))) = true
Case10 : if is_connect (get_left (get_right (get_right (get_right (get_right (lambda2)))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case11 : is_connect (get_right (get_right (get_right (get_right (get_right (lambda2)))))) = true
Case12 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (lambda2))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case13 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))) = true
Case14 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) then && (check (get_left (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) (check (get_right (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) else match (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))

15 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))(rank:19)
=================================================
Progress: 20


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
Case4 : if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case5 : is_connect (get_right (get_right (lambda2))) = true
Case6 : if is_connect (get_left (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_left (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_left (get_right (get_right (lambda2))))))) else match (P (string1) (get_left (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case7 : is_connect (get_right (get_right (get_right (lambda2)))) = true
Case8 : if is_connect (get_left (get_right (get_right (get_right (lambda2))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) else match (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case9 : is_connect (get_right (get_right (get_right (get_right (lambda2))))) = true
Case10 : if is_connect (get_left (get_right (get_right (get_right (get_right (lambda2)))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case11 : is_connect (get_right (get_right (get_right (get_right (get_right (lambda2)))))) = true
Case12 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (lambda2))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case13 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))) = true
Case14 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) then && (check (get_left (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) (check (get_right (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) else match (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))

15 goal(s) more...

0 conjecture(s) more...
>>> case is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))(rank : 19)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
Case4 : if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case5 : is_connect (get_right (get_right (lambda2))) = true
Case6 : if is_connect (get_left (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_left (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_left (get_right (get_right (lambda2))))))) else match (P (string1) (get_left (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case7 : is_connect (get_right (get_right (get_right (lambda2)))) = true
Case8 : if is_connect (get_left (get_right (get_right (get_right (lambda2))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) else match (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case9 : is_connect (get_right (get_right (get_right (get_right (lambda2))))) = true
Case10 : if is_connect (get_left (get_right (get_right (get_right (get_right (lambda2)))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case11 : is_connect (get_right (get_right (get_right (get_right (get_right (lambda2)))))) = true
Case12 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (lambda2))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case13 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))) = true
Case14 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case15 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) then if is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) then && (check (get_left (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) (check (get_right (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) else match (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) else false

16 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))(rank:20)
=================================================
Progress: 21


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
Case4 : if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case5 : is_connect (get_right (get_right (lambda2))) = true
Case6 : if is_connect (get_left (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_left (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_left (get_right (get_right (lambda2))))))) else match (P (string1) (get_left (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case7 : is_connect (get_right (get_right (get_right (lambda2)))) = true
Case8 : if is_connect (get_left (get_right (get_right (get_right (lambda2))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) else match (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case9 : is_connect (get_right (get_right (get_right (get_right (lambda2))))) = true
Case10 : if is_connect (get_left (get_right (get_right (get_right (get_right (lambda2)))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case11 : is_connect (get_right (get_right (get_right (get_right (get_right (lambda2)))))) = true
Case12 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (lambda2))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case13 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))) = true
Case14 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case15 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) then if is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) then && (check (get_left (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) (check (get_right (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) else match (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) else false

16 goal(s) more...

0 conjecture(s) more...
>>> case if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))(rank : 20)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
Case4 : if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case5 : is_connect (get_right (get_right (lambda2))) = true
Case6 : if is_connect (get_left (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_left (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_left (get_right (get_right (lambda2))))))) else match (P (string1) (get_left (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case7 : is_connect (get_right (get_right (get_right (lambda2)))) = true
Case8 : if is_connect (get_left (get_right (get_right (get_right (lambda2))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) else match (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case9 : is_connect (get_right (get_right (get_right (get_right (lambda2))))) = true
Case10 : if is_connect (get_left (get_right (get_right (get_right (get_right (lambda2)))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case11 : is_connect (get_right (get_right (get_right (get_right (get_right (lambda2)))))) = true
Case12 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (lambda2))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case13 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))) = true
Case14 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case15 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) = true
Case16 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) then && (check (get_left (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) (check (get_right (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) else match (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))

17 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))(rank:21)
=================================================
Progress: 22


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
Case4 : if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case5 : is_connect (get_right (get_right (lambda2))) = true
Case6 : if is_connect (get_left (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_left (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_left (get_right (get_right (lambda2))))))) else match (P (string1) (get_left (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case7 : is_connect (get_right (get_right (get_right (lambda2)))) = true
Case8 : if is_connect (get_left (get_right (get_right (get_right (lambda2))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) else match (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case9 : is_connect (get_right (get_right (get_right (get_right (lambda2))))) = true
Case10 : if is_connect (get_left (get_right (get_right (get_right (get_right (lambda2)))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case11 : is_connect (get_right (get_right (get_right (get_right (get_right (lambda2)))))) = true
Case12 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (lambda2))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case13 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))) = true
Case14 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case15 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) = true
Case16 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) then && (check (get_left (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) (check (get_right (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) else match (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))

17 goal(s) more...

0 conjecture(s) more...
>>> case is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))(rank : 21)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
Case4 : if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case5 : is_connect (get_right (get_right (lambda2))) = true
Case6 : if is_connect (get_left (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_left (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_left (get_right (get_right (lambda2))))))) else match (P (string1) (get_left (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case7 : is_connect (get_right (get_right (get_right (lambda2)))) = true
Case8 : if is_connect (get_left (get_right (get_right (get_right (lambda2))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) else match (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case9 : is_connect (get_right (get_right (get_right (get_right (lambda2))))) = true
Case10 : if is_connect (get_left (get_right (get_right (get_right (get_right (lambda2)))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case11 : is_connect (get_right (get_right (get_right (get_right (get_right (lambda2)))))) = true
Case12 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (lambda2))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case13 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))) = true
Case14 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case15 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) = true
Case16 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case17 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) then if is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) then && (check (get_left (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) (check (get_right (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) else match (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) else false

18 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))(rank:22)
=================================================
Progress: 23


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
Case4 : if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case5 : is_connect (get_right (get_right (lambda2))) = true
Case6 : if is_connect (get_left (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_left (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_left (get_right (get_right (lambda2))))))) else match (P (string1) (get_left (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case7 : is_connect (get_right (get_right (get_right (lambda2)))) = true
Case8 : if is_connect (get_left (get_right (get_right (get_right (lambda2))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) else match (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case9 : is_connect (get_right (get_right (get_right (get_right (lambda2))))) = true
Case10 : if is_connect (get_left (get_right (get_right (get_right (get_right (lambda2)))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case11 : is_connect (get_right (get_right (get_right (get_right (get_right (lambda2)))))) = true
Case12 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (lambda2))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case13 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))) = true
Case14 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case15 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) = true
Case16 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case17 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) then if is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) then && (check (get_left (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) (check (get_right (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) else match (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) else false

18 goal(s) more...

0 conjecture(s) more...
>>> case if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))(rank : 22)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
Case4 : if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case5 : is_connect (get_right (get_right (lambda2))) = true
Case6 : if is_connect (get_left (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_left (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_left (get_right (get_right (lambda2))))))) else match (P (string1) (get_left (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case7 : is_connect (get_right (get_right (get_right (lambda2)))) = true
Case8 : if is_connect (get_left (get_right (get_right (get_right (lambda2))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) else match (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case9 : is_connect (get_right (get_right (get_right (get_right (lambda2))))) = true
Case10 : if is_connect (get_left (get_right (get_right (get_right (get_right (lambda2)))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case11 : is_connect (get_right (get_right (get_right (get_right (get_right (lambda2)))))) = true
Case12 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (lambda2))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case13 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))) = true
Case14 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case15 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) = true
Case16 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case17 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) = true
Case18 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) then && (check (get_left (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) (check (get_right (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) else match (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))

19 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))(rank:23)
=================================================
Progress: 24


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
Case4 : if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case5 : is_connect (get_right (get_right (lambda2))) = true
Case6 : if is_connect (get_left (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_left (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_left (get_right (get_right (lambda2))))))) else match (P (string1) (get_left (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case7 : is_connect (get_right (get_right (get_right (lambda2)))) = true
Case8 : if is_connect (get_left (get_right (get_right (get_right (lambda2))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) else match (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case9 : is_connect (get_right (get_right (get_right (get_right (lambda2))))) = true
Case10 : if is_connect (get_left (get_right (get_right (get_right (get_right (lambda2)))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case11 : is_connect (get_right (get_right (get_right (get_right (get_right (lambda2)))))) = true
Case12 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (lambda2))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case13 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))) = true
Case14 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case15 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) = true
Case16 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case17 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) = true
Case18 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) then && (check (get_left (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) (check (get_right (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) else match (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))

19 goal(s) more...

0 conjecture(s) more...
>>> case is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))(rank : 23)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
Case4 : if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case5 : is_connect (get_right (get_right (lambda2))) = true
Case6 : if is_connect (get_left (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_left (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_left (get_right (get_right (lambda2))))))) else match (P (string1) (get_left (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case7 : is_connect (get_right (get_right (get_right (lambda2)))) = true
Case8 : if is_connect (get_left (get_right (get_right (get_right (lambda2))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) else match (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case9 : is_connect (get_right (get_right (get_right (get_right (lambda2))))) = true
Case10 : if is_connect (get_left (get_right (get_right (get_right (get_right (lambda2)))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case11 : is_connect (get_right (get_right (get_right (get_right (get_right (lambda2)))))) = true
Case12 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (lambda2))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case13 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))) = true
Case14 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case15 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) = true
Case16 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case17 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) = true
Case18 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case19 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) then if is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) then && (check (get_left (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) (check (get_right (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) else match (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) else false

20 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))(rank:24)
=================================================
Progress: 25


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
Case4 : if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case5 : is_connect (get_right (get_right (lambda2))) = true
Case6 : if is_connect (get_left (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_left (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_left (get_right (get_right (lambda2))))))) else match (P (string1) (get_left (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case7 : is_connect (get_right (get_right (get_right (lambda2)))) = true
Case8 : if is_connect (get_left (get_right (get_right (get_right (lambda2))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) else match (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case9 : is_connect (get_right (get_right (get_right (get_right (lambda2))))) = true
Case10 : if is_connect (get_left (get_right (get_right (get_right (get_right (lambda2)))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case11 : is_connect (get_right (get_right (get_right (get_right (get_right (lambda2)))))) = true
Case12 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (lambda2))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case13 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))) = true
Case14 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case15 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) = true
Case16 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case17 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) = true
Case18 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case19 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) then if is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) then && (check (get_left (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) (check (get_right (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) else match (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) else false

20 goal(s) more...

0 conjecture(s) more...
>>> case if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))(rank : 24)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
Case4 : if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case5 : is_connect (get_right (get_right (lambda2))) = true
Case6 : if is_connect (get_left (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_left (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_left (get_right (get_right (lambda2))))))) else match (P (string1) (get_left (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case7 : is_connect (get_right (get_right (get_right (lambda2)))) = true
Case8 : if is_connect (get_left (get_right (get_right (get_right (lambda2))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) else match (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case9 : is_connect (get_right (get_right (get_right (get_right (lambda2))))) = true
Case10 : if is_connect (get_left (get_right (get_right (get_right (get_right (lambda2)))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case11 : is_connect (get_right (get_right (get_right (get_right (get_right (lambda2)))))) = true
Case12 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (lambda2))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case13 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))) = true
Case14 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case15 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) = true
Case16 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case17 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) = true
Case18 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case19 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) = true
Case20 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) then && (check (get_left (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) (check (get_right (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) else match (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))

21 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))(rank:25)
=================================================
Progress: 26


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
Case4 : if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case5 : is_connect (get_right (get_right (lambda2))) = true
Case6 : if is_connect (get_left (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_left (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_left (get_right (get_right (lambda2))))))) else match (P (string1) (get_left (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case7 : is_connect (get_right (get_right (get_right (lambda2)))) = true
Case8 : if is_connect (get_left (get_right (get_right (get_right (lambda2))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) else match (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case9 : is_connect (get_right (get_right (get_right (get_right (lambda2))))) = true
Case10 : if is_connect (get_left (get_right (get_right (get_right (get_right (lambda2)))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case11 : is_connect (get_right (get_right (get_right (get_right (get_right (lambda2)))))) = true
Case12 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (lambda2))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case13 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))) = true
Case14 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case15 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) = true
Case16 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case17 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) = true
Case18 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case19 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) = true
Case20 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) then && (check (get_left (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) (check (get_right (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) else match (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))

21 goal(s) more...

0 conjecture(s) more...
>>> case is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))(rank : 25)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
Case4 : if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case5 : is_connect (get_right (get_right (lambda2))) = true
Case6 : if is_connect (get_left (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_left (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_left (get_right (get_right (lambda2))))))) else match (P (string1) (get_left (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case7 : is_connect (get_right (get_right (get_right (lambda2)))) = true
Case8 : if is_connect (get_left (get_right (get_right (get_right (lambda2))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) else match (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case9 : is_connect (get_right (get_right (get_right (get_right (lambda2))))) = true
Case10 : if is_connect (get_left (get_right (get_right (get_right (get_right (lambda2)))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case11 : is_connect (get_right (get_right (get_right (get_right (get_right (lambda2)))))) = true
Case12 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (lambda2))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case13 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))) = true
Case14 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case15 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) = true
Case16 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case17 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) = true
Case18 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case19 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) = true
Case20 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case21 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) then if is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) then && (check (get_left (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) (check (get_right (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) else match (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) else false

22 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))(rank:26)
=================================================
Progress: 27


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
Case4 : if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case5 : is_connect (get_right (get_right (lambda2))) = true
Case6 : if is_connect (get_left (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_left (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_left (get_right (get_right (lambda2))))))) else match (P (string1) (get_left (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case7 : is_connect (get_right (get_right (get_right (lambda2)))) = true
Case8 : if is_connect (get_left (get_right (get_right (get_right (lambda2))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) else match (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case9 : is_connect (get_right (get_right (get_right (get_right (lambda2))))) = true
Case10 : if is_connect (get_left (get_right (get_right (get_right (get_right (lambda2)))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case11 : is_connect (get_right (get_right (get_right (get_right (get_right (lambda2)))))) = true
Case12 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (lambda2))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case13 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))) = true
Case14 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case15 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) = true
Case16 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case17 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) = true
Case18 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case19 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) = true
Case20 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case21 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) then if is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) then && (check (get_left (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) (check (get_right (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) else match (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) else false

22 goal(s) more...

0 conjecture(s) more...
>>> case if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))(rank : 26)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
Case4 : if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case5 : is_connect (get_right (get_right (lambda2))) = true
Case6 : if is_connect (get_left (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_left (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_left (get_right (get_right (lambda2))))))) else match (P (string1) (get_left (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case7 : is_connect (get_right (get_right (get_right (lambda2)))) = true
Case8 : if is_connect (get_left (get_right (get_right (get_right (lambda2))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) else match (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case9 : is_connect (get_right (get_right (get_right (get_right (lambda2))))) = true
Case10 : if is_connect (get_left (get_right (get_right (get_right (get_right (lambda2)))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case11 : is_connect (get_right (get_right (get_right (get_right (get_right (lambda2)))))) = true
Case12 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (lambda2))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case13 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))) = true
Case14 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case15 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) = true
Case16 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case17 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) = true
Case18 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case19 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) = true
Case20 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case21 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) = true
Case22 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) then && (check (get_left (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) (check (get_right (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) else match (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))

23 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))(rank:27)
=================================================
Progress: 28


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
Case4 : if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case5 : is_connect (get_right (get_right (lambda2))) = true
Case6 : if is_connect (get_left (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_left (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_left (get_right (get_right (lambda2))))))) else match (P (string1) (get_left (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case7 : is_connect (get_right (get_right (get_right (lambda2)))) = true
Case8 : if is_connect (get_left (get_right (get_right (get_right (lambda2))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) else match (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case9 : is_connect (get_right (get_right (get_right (get_right (lambda2))))) = true
Case10 : if is_connect (get_left (get_right (get_right (get_right (get_right (lambda2)))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case11 : is_connect (get_right (get_right (get_right (get_right (get_right (lambda2)))))) = true
Case12 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (lambda2))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case13 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))) = true
Case14 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case15 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) = true
Case16 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case17 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) = true
Case18 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case19 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) = true
Case20 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case21 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) = true
Case22 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) then && (check (get_left (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) (check (get_right (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) else match (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))

23 goal(s) more...

0 conjecture(s) more...
>>> case is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))(rank : 27)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
Case4 : if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case5 : is_connect (get_right (get_right (lambda2))) = true
Case6 : if is_connect (get_left (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_left (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_left (get_right (get_right (lambda2))))))) else match (P (string1) (get_left (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case7 : is_connect (get_right (get_right (get_right (lambda2)))) = true
Case8 : if is_connect (get_left (get_right (get_right (get_right (lambda2))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) else match (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case9 : is_connect (get_right (get_right (get_right (get_right (lambda2))))) = true
Case10 : if is_connect (get_left (get_right (get_right (get_right (get_right (lambda2)))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case11 : is_connect (get_right (get_right (get_right (get_right (get_right (lambda2)))))) = true
Case12 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (lambda2))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case13 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))) = true
Case14 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case15 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) = true
Case16 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case17 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) = true
Case18 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case19 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) = true
Case20 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case21 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) = true
Case22 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case23 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) then if is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) then && (check (get_left (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) (check (get_right (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) else match (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) else false

24 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))(rank:28)
=================================================
Progress: 29


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
Case4 : if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case5 : is_connect (get_right (get_right (lambda2))) = true
Case6 : if is_connect (get_left (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_left (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_left (get_right (get_right (lambda2))))))) else match (P (string1) (get_left (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case7 : is_connect (get_right (get_right (get_right (lambda2)))) = true
Case8 : if is_connect (get_left (get_right (get_right (get_right (lambda2))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) else match (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case9 : is_connect (get_right (get_right (get_right (get_right (lambda2))))) = true
Case10 : if is_connect (get_left (get_right (get_right (get_right (get_right (lambda2)))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case11 : is_connect (get_right (get_right (get_right (get_right (get_right (lambda2)))))) = true
Case12 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (lambda2))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case13 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))) = true
Case14 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case15 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) = true
Case16 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case17 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) = true
Case18 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case19 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) = true
Case20 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case21 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) = true
Case22 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case23 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) then if is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) then && (check (get_left (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) (check (get_right (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) else match (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) else false

24 goal(s) more...

0 conjecture(s) more...
>>> case if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))(rank : 28)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
Case4 : if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case5 : is_connect (get_right (get_right (lambda2))) = true
Case6 : if is_connect (get_left (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_left (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_left (get_right (get_right (lambda2))))))) else match (P (string1) (get_left (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case7 : is_connect (get_right (get_right (get_right (lambda2)))) = true
Case8 : if is_connect (get_left (get_right (get_right (get_right (lambda2))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) else match (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case9 : is_connect (get_right (get_right (get_right (get_right (lambda2))))) = true
Case10 : if is_connect (get_left (get_right (get_right (get_right (get_right (lambda2)))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case11 : is_connect (get_right (get_right (get_right (get_right (get_right (lambda2)))))) = true
Case12 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (lambda2))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case13 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))) = true
Case14 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case15 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) = true
Case16 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case17 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) = true
Case18 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case19 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) = true
Case20 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case21 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) = true
Case22 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case23 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) = true
Case24 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) then && (check (get_left (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) (check (get_right (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) else match (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))

25 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))(rank:29)
=================================================
Progress: 30


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
Case4 : if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case5 : is_connect (get_right (get_right (lambda2))) = true
Case6 : if is_connect (get_left (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_left (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_left (get_right (get_right (lambda2))))))) else match (P (string1) (get_left (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case7 : is_connect (get_right (get_right (get_right (lambda2)))) = true
Case8 : if is_connect (get_left (get_right (get_right (get_right (lambda2))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) else match (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case9 : is_connect (get_right (get_right (get_right (get_right (lambda2))))) = true
Case10 : if is_connect (get_left (get_right (get_right (get_right (get_right (lambda2)))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case11 : is_connect (get_right (get_right (get_right (get_right (get_right (lambda2)))))) = true
Case12 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (lambda2))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case13 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))) = true
Case14 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case15 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) = true
Case16 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case17 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) = true
Case18 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case19 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) = true
Case20 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case21 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) = true
Case22 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case23 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) = true
Case24 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) then && (check (get_left (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) (check (get_right (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) else match (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))

25 goal(s) more...

0 conjecture(s) more...
>>> case is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))(rank : 29)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
Case4 : if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case5 : is_connect (get_right (get_right (lambda2))) = true
Case6 : if is_connect (get_left (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_left (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_left (get_right (get_right (lambda2))))))) else match (P (string1) (get_left (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case7 : is_connect (get_right (get_right (get_right (lambda2)))) = true
Case8 : if is_connect (get_left (get_right (get_right (get_right (lambda2))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) else match (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case9 : is_connect (get_right (get_right (get_right (get_right (lambda2))))) = true
Case10 : if is_connect (get_left (get_right (get_right (get_right (get_right (lambda2)))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case11 : is_connect (get_right (get_right (get_right (get_right (get_right (lambda2)))))) = true
Case12 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (lambda2))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case13 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))) = true
Case14 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case15 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) = true
Case16 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case17 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) = true
Case18 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case19 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) = true
Case20 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case21 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) = true
Case22 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case23 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) = true
Case24 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case25 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) then if is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) then && (check (get_left (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) (check (get_right (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) else match (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) else false

26 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))(rank:30)
=================================================
Progress: 31


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
Case4 : if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case5 : is_connect (get_right (get_right (lambda2))) = true
Case6 : if is_connect (get_left (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_left (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_left (get_right (get_right (lambda2))))))) else match (P (string1) (get_left (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case7 : is_connect (get_right (get_right (get_right (lambda2)))) = true
Case8 : if is_connect (get_left (get_right (get_right (get_right (lambda2))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) else match (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case9 : is_connect (get_right (get_right (get_right (get_right (lambda2))))) = true
Case10 : if is_connect (get_left (get_right (get_right (get_right (get_right (lambda2)))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case11 : is_connect (get_right (get_right (get_right (get_right (get_right (lambda2)))))) = true
Case12 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (lambda2))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case13 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))) = true
Case14 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case15 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) = true
Case16 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case17 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) = true
Case18 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case19 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) = true
Case20 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case21 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) = true
Case22 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case23 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) = true
Case24 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case25 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) then if is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) then && (check (get_left (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) (check (get_right (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) else match (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) else false

26 goal(s) more...

0 conjecture(s) more...
>>> case if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))(rank : 30)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
Case4 : if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case5 : is_connect (get_right (get_right (lambda2))) = true
Case6 : if is_connect (get_left (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_left (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_left (get_right (get_right (lambda2))))))) else match (P (string1) (get_left (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case7 : is_connect (get_right (get_right (get_right (lambda2)))) = true
Case8 : if is_connect (get_left (get_right (get_right (get_right (lambda2))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) else match (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case9 : is_connect (get_right (get_right (get_right (get_right (lambda2))))) = true
Case10 : if is_connect (get_left (get_right (get_right (get_right (get_right (lambda2)))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case11 : is_connect (get_right (get_right (get_right (get_right (get_right (lambda2)))))) = true
Case12 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (lambda2))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case13 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))) = true
Case14 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case15 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) = true
Case16 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case17 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) = true
Case18 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case19 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) = true
Case20 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case21 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) = true
Case22 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case23 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) = true
Case24 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case25 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) = true
Case26 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) then && (check (get_left (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) (check (get_right (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) else match (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))

27 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))(rank:31)
=================================================
Progress: 32


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
Case4 : if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case5 : is_connect (get_right (get_right (lambda2))) = true
Case6 : if is_connect (get_left (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_left (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_left (get_right (get_right (lambda2))))))) else match (P (string1) (get_left (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case7 : is_connect (get_right (get_right (get_right (lambda2)))) = true
Case8 : if is_connect (get_left (get_right (get_right (get_right (lambda2))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) else match (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case9 : is_connect (get_right (get_right (get_right (get_right (lambda2))))) = true
Case10 : if is_connect (get_left (get_right (get_right (get_right (get_right (lambda2)))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case11 : is_connect (get_right (get_right (get_right (get_right (get_right (lambda2)))))) = true
Case12 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (lambda2))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case13 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))) = true
Case14 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case15 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) = true
Case16 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case17 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) = true
Case18 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case19 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) = true
Case20 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case21 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) = true
Case22 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case23 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) = true
Case24 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case25 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) = true
Case26 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) then && (check (get_left (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) (check (get_right (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) else match (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))

27 goal(s) more...

0 conjecture(s) more...
>>> case is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))(rank : 31)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
Case4 : if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case5 : is_connect (get_right (get_right (lambda2))) = true
Case6 : if is_connect (get_left (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_left (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_left (get_right (get_right (lambda2))))))) else match (P (string1) (get_left (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case7 : is_connect (get_right (get_right (get_right (lambda2)))) = true
Case8 : if is_connect (get_left (get_right (get_right (get_right (lambda2))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) else match (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case9 : is_connect (get_right (get_right (get_right (get_right (lambda2))))) = true
Case10 : if is_connect (get_left (get_right (get_right (get_right (get_right (lambda2)))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case11 : is_connect (get_right (get_right (get_right (get_right (get_right (lambda2)))))) = true
Case12 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (lambda2))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case13 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))) = true
Case14 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case15 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) = true
Case16 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case17 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) = true
Case18 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case19 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) = true
Case20 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case21 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) = true
Case22 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case23 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) = true
Case24 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case25 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) = true
Case26 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case27 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) then if is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) then && (check (get_left (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) (check (get_right (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) else match (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) else false

28 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))(rank:32)
=================================================
Progress: 33


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
Case4 : if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case5 : is_connect (get_right (get_right (lambda2))) = true
Case6 : if is_connect (get_left (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_left (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_left (get_right (get_right (lambda2))))))) else match (P (string1) (get_left (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case7 : is_connect (get_right (get_right (get_right (lambda2)))) = true
Case8 : if is_connect (get_left (get_right (get_right (get_right (lambda2))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) else match (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case9 : is_connect (get_right (get_right (get_right (get_right (lambda2))))) = true
Case10 : if is_connect (get_left (get_right (get_right (get_right (get_right (lambda2)))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case11 : is_connect (get_right (get_right (get_right (get_right (get_right (lambda2)))))) = true
Case12 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (lambda2))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case13 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))) = true
Case14 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case15 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) = true
Case16 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case17 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) = true
Case18 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case19 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) = true
Case20 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case21 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) = true
Case22 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case23 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) = true
Case24 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case25 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) = true
Case26 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case27 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) then if is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) then && (check (get_left (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) (check (get_right (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) else match (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) else false

28 goal(s) more...

0 conjecture(s) more...
>>> case if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))(rank : 32)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
Case4 : if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case5 : is_connect (get_right (get_right (lambda2))) = true
Case6 : if is_connect (get_left (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_left (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_left (get_right (get_right (lambda2))))))) else match (P (string1) (get_left (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case7 : is_connect (get_right (get_right (get_right (lambda2)))) = true
Case8 : if is_connect (get_left (get_right (get_right (get_right (lambda2))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) else match (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case9 : is_connect (get_right (get_right (get_right (get_right (lambda2))))) = true
Case10 : if is_connect (get_left (get_right (get_right (get_right (get_right (lambda2)))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case11 : is_connect (get_right (get_right (get_right (get_right (get_right (lambda2)))))) = true
Case12 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (lambda2))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case13 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))) = true
Case14 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case15 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) = true
Case16 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case17 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) = true
Case18 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case19 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) = true
Case20 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case21 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) = true
Case22 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case23 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) = true
Case24 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case25 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) = true
Case26 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case27 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) = true
Case28 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) then && (check (get_left (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) (check (get_right (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) else match (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))

29 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))(rank:33)
=================================================
Progress: 34


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
Case4 : if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case5 : is_connect (get_right (get_right (lambda2))) = true
Case6 : if is_connect (get_left (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_left (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_left (get_right (get_right (lambda2))))))) else match (P (string1) (get_left (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case7 : is_connect (get_right (get_right (get_right (lambda2)))) = true
Case8 : if is_connect (get_left (get_right (get_right (get_right (lambda2))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) else match (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case9 : is_connect (get_right (get_right (get_right (get_right (lambda2))))) = true
Case10 : if is_connect (get_left (get_right (get_right (get_right (get_right (lambda2)))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case11 : is_connect (get_right (get_right (get_right (get_right (get_right (lambda2)))))) = true
Case12 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (lambda2))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case13 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))) = true
Case14 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case15 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) = true
Case16 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case17 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) = true
Case18 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case19 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) = true
Case20 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case21 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) = true
Case22 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case23 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) = true
Case24 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case25 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) = true
Case26 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case27 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) = true
Case28 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) then && (check (get_left (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) (check (get_right (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) else match (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))

29 goal(s) more...

0 conjecture(s) more...
>>> case is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))(rank : 33)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
Case4 : if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case5 : is_connect (get_right (get_right (lambda2))) = true
Case6 : if is_connect (get_left (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_left (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_left (get_right (get_right (lambda2))))))) else match (P (string1) (get_left (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case7 : is_connect (get_right (get_right (get_right (lambda2)))) = true
Case8 : if is_connect (get_left (get_right (get_right (get_right (lambda2))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) else match (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case9 : is_connect (get_right (get_right (get_right (get_right (lambda2))))) = true
Case10 : if is_connect (get_left (get_right (get_right (get_right (get_right (lambda2)))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case11 : is_connect (get_right (get_right (get_right (get_right (get_right (lambda2)))))) = true
Case12 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (lambda2))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case13 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))) = true
Case14 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case15 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) = true
Case16 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case17 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) = true
Case18 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case19 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) = true
Case20 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case21 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) = true
Case22 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case23 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) = true
Case24 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case25 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) = true
Case26 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case27 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) = true
Case28 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case29 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) then if is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) then && (check (get_left (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))) (check (get_right (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))) else match (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) else false

30 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))(rank:34)
=================================================
Progress: 35


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
Case4 : if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case5 : is_connect (get_right (get_right (lambda2))) = true
Case6 : if is_connect (get_left (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_left (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_left (get_right (get_right (lambda2))))))) else match (P (string1) (get_left (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case7 : is_connect (get_right (get_right (get_right (lambda2)))) = true
Case8 : if is_connect (get_left (get_right (get_right (get_right (lambda2))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) else match (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case9 : is_connect (get_right (get_right (get_right (get_right (lambda2))))) = true
Case10 : if is_connect (get_left (get_right (get_right (get_right (get_right (lambda2)))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case11 : is_connect (get_right (get_right (get_right (get_right (get_right (lambda2)))))) = true
Case12 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (lambda2))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case13 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))) = true
Case14 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case15 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) = true
Case16 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case17 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) = true
Case18 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case19 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) = true
Case20 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case21 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) = true
Case22 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case23 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) = true
Case24 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case25 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) = true
Case26 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case27 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) = true
Case28 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case29 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) then if is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) then && (check (get_left (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))) (check (get_right (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))) else match (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) else false

30 goal(s) more...

0 conjecture(s) more...
>>> case if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))(rank : 34)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
Case4 : if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case5 : is_connect (get_right (get_right (lambda2))) = true
Case6 : if is_connect (get_left (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_left (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_left (get_right (get_right (lambda2))))))) else match (P (string1) (get_left (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case7 : is_connect (get_right (get_right (get_right (lambda2)))) = true
Case8 : if is_connect (get_left (get_right (get_right (get_right (lambda2))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) else match (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case9 : is_connect (get_right (get_right (get_right (get_right (lambda2))))) = true
Case10 : if is_connect (get_left (get_right (get_right (get_right (get_right (lambda2)))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case11 : is_connect (get_right (get_right (get_right (get_right (get_right (lambda2)))))) = true
Case12 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (lambda2))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case13 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))) = true
Case14 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case15 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) = true
Case16 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case17 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) = true
Case18 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case19 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) = true
Case20 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case21 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) = true
Case22 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case23 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) = true
Case24 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case25 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) = true
Case26 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case27 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) = true
Case28 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case29 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) = true
Case30 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) then && (check (get_left (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))) (check (get_right (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))) else match (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))

31 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))(rank:35)
=================================================
Progress: 36


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
Case4 : if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case5 : is_connect (get_right (get_right (lambda2))) = true
Case6 : if is_connect (get_left (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_left (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_left (get_right (get_right (lambda2))))))) else match (P (string1) (get_left (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case7 : is_connect (get_right (get_right (get_right (lambda2)))) = true
Case8 : if is_connect (get_left (get_right (get_right (get_right (lambda2))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) else match (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case9 : is_connect (get_right (get_right (get_right (get_right (lambda2))))) = true
Case10 : if is_connect (get_left (get_right (get_right (get_right (get_right (lambda2)))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case11 : is_connect (get_right (get_right (get_right (get_right (get_right (lambda2)))))) = true
Case12 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (lambda2))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case13 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))) = true
Case14 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case15 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) = true
Case16 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case17 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) = true
Case18 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case19 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) = true
Case20 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case21 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) = true
Case22 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case23 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) = true
Case24 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case25 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) = true
Case26 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case27 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) = true
Case28 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case29 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) = true
Case30 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) then && (check (get_left (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))) (check (get_right (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))) else match (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))

31 goal(s) more...

0 conjecture(s) more...
>>> case is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))(rank : 35)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
Case4 : if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case5 : is_connect (get_right (get_right (lambda2))) = true
Case6 : if is_connect (get_left (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_left (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_left (get_right (get_right (lambda2))))))) else match (P (string1) (get_left (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case7 : is_connect (get_right (get_right (get_right (lambda2)))) = true
Case8 : if is_connect (get_left (get_right (get_right (get_right (lambda2))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) else match (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case9 : is_connect (get_right (get_right (get_right (get_right (lambda2))))) = true
Case10 : if is_connect (get_left (get_right (get_right (get_right (get_right (lambda2)))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case11 : is_connect (get_right (get_right (get_right (get_right (get_right (lambda2)))))) = true
Case12 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (lambda2))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case13 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))) = true
Case14 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case15 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) = true
Case16 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case17 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) = true
Case18 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case19 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) = true
Case20 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case21 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) = true
Case22 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case23 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) = true
Case24 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case25 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) = true
Case26 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case27 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) = true
Case28 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case29 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) = true
Case30 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case31 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) then if is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) then && (check (get_left (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))))) (check (get_right (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))))) else match (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) else false

32 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))(rank:36)
=================================================
Progress: 37


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
Case4 : if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case5 : is_connect (get_right (get_right (lambda2))) = true
Case6 : if is_connect (get_left (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_left (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_left (get_right (get_right (lambda2))))))) else match (P (string1) (get_left (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case7 : is_connect (get_right (get_right (get_right (lambda2)))) = true
Case8 : if is_connect (get_left (get_right (get_right (get_right (lambda2))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) else match (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case9 : is_connect (get_right (get_right (get_right (get_right (lambda2))))) = true
Case10 : if is_connect (get_left (get_right (get_right (get_right (get_right (lambda2)))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case11 : is_connect (get_right (get_right (get_right (get_right (get_right (lambda2)))))) = true
Case12 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (lambda2))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case13 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))) = true
Case14 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case15 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) = true
Case16 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case17 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) = true
Case18 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case19 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) = true
Case20 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case21 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) = true
Case22 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case23 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) = true
Case24 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case25 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) = true
Case26 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case27 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) = true
Case28 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case29 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) = true
Case30 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case31 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) then if is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) then && (check (get_left (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))))) (check (get_right (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))))) else match (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) else false

32 goal(s) more...

0 conjecture(s) more...
>>> case if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))(rank : 36)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
Case4 : if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case5 : is_connect (get_right (get_right (lambda2))) = true
Case6 : if is_connect (get_left (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_left (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_left (get_right (get_right (lambda2))))))) else match (P (string1) (get_left (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case7 : is_connect (get_right (get_right (get_right (lambda2)))) = true
Case8 : if is_connect (get_left (get_right (get_right (get_right (lambda2))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) else match (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case9 : is_connect (get_right (get_right (get_right (get_right (lambda2))))) = true
Case10 : if is_connect (get_left (get_right (get_right (get_right (get_right (lambda2)))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case11 : is_connect (get_right (get_right (get_right (get_right (get_right (lambda2)))))) = true
Case12 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (lambda2))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case13 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))) = true
Case14 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case15 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) = true
Case16 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case17 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) = true
Case18 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case19 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) = true
Case20 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case21 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) = true
Case22 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case23 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) = true
Case24 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case25 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) = true
Case26 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case27 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) = true
Case28 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case29 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) = true
Case30 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case31 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) = true
Case32 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) then && (check (get_left (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))))) (check (get_right (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))))) else match (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))

33 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))(rank:37)
=================================================
Progress: 38


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
Case4 : if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case5 : is_connect (get_right (get_right (lambda2))) = true
Case6 : if is_connect (get_left (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_left (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_left (get_right (get_right (lambda2))))))) else match (P (string1) (get_left (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case7 : is_connect (get_right (get_right (get_right (lambda2)))) = true
Case8 : if is_connect (get_left (get_right (get_right (get_right (lambda2))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) else match (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case9 : is_connect (get_right (get_right (get_right (get_right (lambda2))))) = true
Case10 : if is_connect (get_left (get_right (get_right (get_right (get_right (lambda2)))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case11 : is_connect (get_right (get_right (get_right (get_right (get_right (lambda2)))))) = true
Case12 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (lambda2))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case13 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))) = true
Case14 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case15 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) = true
Case16 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case17 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) = true
Case18 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case19 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) = true
Case20 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case21 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) = true
Case22 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case23 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) = true
Case24 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case25 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) = true
Case26 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case27 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) = true
Case28 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case29 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) = true
Case30 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case31 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) = true
Case32 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) then && (check (get_left (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))))) (check (get_right (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))))) else match (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))

33 goal(s) more...

0 conjecture(s) more...
>>> case is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))(rank : 37)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
Case4 : if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case5 : is_connect (get_right (get_right (lambda2))) = true
Case6 : if is_connect (get_left (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_left (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_left (get_right (get_right (lambda2))))))) else match (P (string1) (get_left (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case7 : is_connect (get_right (get_right (get_right (lambda2)))) = true
Case8 : if is_connect (get_left (get_right (get_right (get_right (lambda2))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) else match (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case9 : is_connect (get_right (get_right (get_right (get_right (lambda2))))) = true
Case10 : if is_connect (get_left (get_right (get_right (get_right (get_right (lambda2)))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case11 : is_connect (get_right (get_right (get_right (get_right (get_right (lambda2)))))) = true
Case12 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (lambda2))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case13 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))) = true
Case14 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case15 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) = true
Case16 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case17 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) = true
Case18 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case19 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) = true
Case20 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case21 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) = true
Case22 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case23 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) = true
Case24 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case25 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) = true
Case26 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case27 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) = true
Case28 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case29 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) = true
Case30 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case31 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) = true
Case32 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case33 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) then if is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) then && (check (get_left (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))))) (check (get_right (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))))) else match (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) else false

34 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))(rank:38)
=================================================
Progress: 39


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
Case4 : if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case5 : is_connect (get_right (get_right (lambda2))) = true
Case6 : if is_connect (get_left (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_left (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_left (get_right (get_right (lambda2))))))) else match (P (string1) (get_left (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case7 : is_connect (get_right (get_right (get_right (lambda2)))) = true
Case8 : if is_connect (get_left (get_right (get_right (get_right (lambda2))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) else match (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case9 : is_connect (get_right (get_right (get_right (get_right (lambda2))))) = true
Case10 : if is_connect (get_left (get_right (get_right (get_right (get_right (lambda2)))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case11 : is_connect (get_right (get_right (get_right (get_right (get_right (lambda2)))))) = true
Case12 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (lambda2))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case13 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))) = true
Case14 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case15 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) = true
Case16 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case17 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) = true
Case18 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case19 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) = true
Case20 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case21 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) = true
Case22 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case23 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) = true
Case24 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case25 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) = true
Case26 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case27 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) = true
Case28 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case29 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) = true
Case30 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case31 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) = true
Case32 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case33 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) then if is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) then && (check (get_left (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))))) (check (get_right (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))))) else match (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) else false

34 goal(s) more...

0 conjecture(s) more...
>>> case if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))(rank : 38)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
Case4 : if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case5 : is_connect (get_right (get_right (lambda2))) = true
Case6 : if is_connect (get_left (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_left (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_left (get_right (get_right (lambda2))))))) else match (P (string1) (get_left (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case7 : is_connect (get_right (get_right (get_right (lambda2)))) = true
Case8 : if is_connect (get_left (get_right (get_right (get_right (lambda2))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) else match (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case9 : is_connect (get_right (get_right (get_right (get_right (lambda2))))) = true
Case10 : if is_connect (get_left (get_right (get_right (get_right (get_right (lambda2)))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case11 : is_connect (get_right (get_right (get_right (get_right (get_right (lambda2)))))) = true
Case12 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (lambda2))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case13 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))) = true
Case14 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case15 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) = true
Case16 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case17 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) = true
Case18 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case19 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) = true
Case20 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case21 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) = true
Case22 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case23 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) = true
Case24 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case25 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) = true
Case26 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case27 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) = true
Case28 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case29 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) = true
Case30 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case31 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) = true
Case32 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case33 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) = true
Case34 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) then && (check (get_left (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))))) (check (get_right (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))))) else match (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))

35 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))(rank:39)
=================================================
Progress: 40


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
Case4 : if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case5 : is_connect (get_right (get_right (lambda2))) = true
Case6 : if is_connect (get_left (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_left (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_left (get_right (get_right (lambda2))))))) else match (P (string1) (get_left (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case7 : is_connect (get_right (get_right (get_right (lambda2)))) = true
Case8 : if is_connect (get_left (get_right (get_right (get_right (lambda2))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) else match (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case9 : is_connect (get_right (get_right (get_right (get_right (lambda2))))) = true
Case10 : if is_connect (get_left (get_right (get_right (get_right (get_right (lambda2)))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case11 : is_connect (get_right (get_right (get_right (get_right (get_right (lambda2)))))) = true
Case12 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (lambda2))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case13 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))) = true
Case14 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case15 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) = true
Case16 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case17 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) = true
Case18 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case19 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) = true
Case20 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case21 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) = true
Case22 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case23 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) = true
Case24 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case25 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) = true
Case26 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case27 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) = true
Case28 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case29 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) = true
Case30 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case31 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) = true
Case32 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case33 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) = true
Case34 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) then && (check (get_left (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))))) (check (get_right (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))))) else match (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2)))

35 goal(s) more...

0 conjecture(s) more...
>>> case is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))(rank : 39)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check (lambda2)
Inductive1 : lambda1 = P (string1) (lambda2)
Case1 : is_connect (lambda2) = true
Case2 : if is_connect (get_left (lambda2)) then && (check (get_left (P (string1) (get_left (lambda2))))) (check (get_right (P (string1) (get_left (lambda2))))) else match (P (string1) (get_left (lambda2))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case3 : is_connect (get_right (lambda2)) = true
Case4 : if is_connect (get_left (get_right (lambda2))) then && (check (get_left (P (string1) (get_left (get_right (lambda2)))))) (check (get_right (P (string1) (get_left (get_right (lambda2)))))) else match (P (string1) (get_left (get_right (lambda2)))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case5 : is_connect (get_right (get_right (lambda2))) = true
Case6 : if is_connect (get_left (get_right (get_right (lambda2)))) then && (check (get_left (P (string1) (get_left (get_right (get_right (lambda2))))))) (check (get_right (P (string1) (get_left (get_right (get_right (lambda2))))))) else match (P (string1) (get_left (get_right (get_right (lambda2))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case7 : is_connect (get_right (get_right (get_right (lambda2)))) = true
Case8 : if is_connect (get_left (get_right (get_right (get_right (lambda2))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))))) else match (P (string1) (get_left (get_right (get_right (get_right (lambda2)))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case9 : is_connect (get_right (get_right (get_right (get_right (lambda2))))) = true
Case10 : if is_connect (get_left (get_right (get_right (get_right (get_right (lambda2)))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (lambda2))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case11 : is_connect (get_right (get_right (get_right (get_right (get_right (lambda2)))))) = true
Case12 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (lambda2))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case13 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))) = true
Case14 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case15 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))) = true
Case16 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case17 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))) = true
Case18 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case19 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))) = true
Case20 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case21 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))) = true
Case22 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case23 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))) = true
Case24 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case25 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))) = true
Case26 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case27 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))) = true
Case28 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case29 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))) = true
Case30 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case31 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))) = true
Case32 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case33 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))) = true
Case34 : if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) = true
Case35 : is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))) = true
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = if if is_connect (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))) then && (check (get_left (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))))))) (check (get_right (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))))))) else match (P (string1) (get_left (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) then if is_connect (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2))))))))))))))))))) then && (check (get_left (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))))))) (check (get_right (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))))))) else match (P (string1) (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (get_right (lambda2)))))))))))))))))))) with
| V _ -> false
| C l r -> && (check (l)) (check (r))
| P var lambda -> match (lambda) with
| V s -> if string_eq (var) (s) then true else false
| C left right -> && (check (P (var) (left))) (check (P (var) (right)))
| P var2 lambda2 -> || (check (P (var) (lambda2))) (check (P (var2) (lambda2))) else false

36 goal(s) more...

0 conjecture(s) more...
