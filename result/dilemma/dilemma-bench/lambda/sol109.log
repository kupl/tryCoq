Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (l:lambda), check_ta1 (l) = check (l)(rank : 0.)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:3.)
=================================================
Progress: 2


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3.)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) ((Nil)) = checkRec (lambda1) ((Nil))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:5.)
=================================================
Progress: 3


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) ((Nil)) = checkRec (lambda1) ((Nil))

0 goal(s) more...

0 conjecture(s) more...
>>> induction lambda1(rank : 5.)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
sub_check_ta1 (V (string1)) ((Nil)) = checkRec (V (string1)) ((Nil))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:4.)
=================================================
Progress: 4


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
sub_check_ta1 (V (string1)) ((Nil)) = checkRec (V (string1)) ((Nil))

2 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 4.)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = checkRec (lambda2) ((Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (P (string1) (lambda2)) ((Nil)) = checkRec (P (string1) (lambda2)) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:4.)
=================================================
Progress: 5


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = checkRec (lambda2) ((Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (P (string1) (lambda2)) ((Nil)) = checkRec (P (string1) (lambda2)) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 4.)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = checkRec (lambda2) ((Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = checkRec (lambda2) ((string1::(Nil)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
Lemma List
forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
End of Lemma List


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = checkRec (lambda2) ((Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = checkRec (lambda2) ((string1::(Nil)))

1 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 6


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = checkRec (lambda2) ((Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = checkRec (lambda2) ((string1::(Nil)))

1 goal(s) more...

0 conjecture(s) more...
>>> assert forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)(rank : 0.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)

---------------------------------------
forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:7.)
=================================================
Progress: 7


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)

---------------------------------------
forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)

0 goal(s) more...

1 conjecture(s) more...
>>> induction lambda1(rank : 7.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (V (string1)) (string_list1) = checkRec (V (string1)) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 8


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (V (string1)) (string_list1) = checkRec (V (string1)) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
forall (string_list1:string list), is_mem_ta1 (string_list1) (string1) = varExists (string1) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction string_list1(rank:8.)
=================================================
Progress: 9


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
forall (string_list1:string list), is_mem_ta1 (string_list1) (string1) = varExists (string1) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
>>> induction string_list1(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
Base2 : string_list1 = (Nil)
---------------------------------------
is_mem_ta1 ((Nil)) (string1) = varExists (string1) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 10


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
Base2 : string_list1 = (Nil)
---------------------------------------
is_mem_ta1 ((Nil)) (string1) = varExists (string1) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
is_mem_ta1 ((string2::string_list2)) (string1) = varExists (string1) ((string2::string_list2))

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 11


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
is_mem_ta1 ((string2::string_list2)) (string1) = varExists (string1) ((string2::string_list2))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
case string_eq (string1) (string2)(rank:8.)
case string_eq (string2) (string1)(rank:8.)
rewrite IH1 in goal at 0(rank:15.)
rewrite <- IH1 in goal at 0(rank:15.)
=================================================
Progress: 12


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:8.)
=================================================
Progress: 13


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = true
---------------------------------------
true = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:8.)
=================================================
Progress: 14


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
rewrite <- Case1 in goal at 0(rank:8.)
rewrite IH1 in goal at 0(rank:16.)
rewrite Case1 in goal at 2(rank:24.)
rewrite Case1 in goal at 0(rank:24.)
rewrite Case1 in goal at 1(rank:24.)
case string_eq (string2) (string1)(rank:9.)
=================================================
Progress: 15


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = true
---------------------------------------
true = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
rewrite <- Case1 in goal at 0(rank:8.)
rewrite <- Case1 in goal at 1(rank:8.)
rewrite <- Case1 in goal at 2(rank:8.)
case string_eq (string1) (string2)(rank:9.)
rewrite <- IH1 in goal at 0(rank:24.)
rewrite Case1 in goal at 0(rank:24.)
=================================================
Progress: 16


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if string_eq (string1) (string1) then true else is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:8.)
=================================================
Progress: 17


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string2) (string2) then true else varExists (string2) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:8.)
=================================================
Progress: 18


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string2) (string2) then true else varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:8.)
=================================================
Progress: 19


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string1) (string2) then true else varExists (string2) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:9.)
=================================================
Progress: 20


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if string_eq (string1) (string1) then true else is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if true then true else is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 21


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if true then true else is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 5
Tactic List : 3
case string_eq (string2) (string1)(rank:8.)
rewrite IH1 in goal at 0(rank:15.)
rewrite <- IH1 in goal at 0(rank:15.)
=================================================
Progress: 22


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string2) (string2) then true else varExists (string2) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if true then true else varExists (string2) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 23


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if true then true else varExists (string2) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 5
Tactic List : 3
case string_eq (string1) (string2)(rank:8.)
rewrite IH1 in goal at 0(rank:15.)
rewrite <- IH1 in goal at 0(rank:15.)
=================================================
Progress: 24


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = true
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:8.)
=================================================
Progress: 25


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:8.)
=================================================
Progress: 26


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = true
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:8.)
rewrite <- IH1 in goal at 0(rank:24.)
=================================================
Progress: 27


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:16.)
rewrite Case2 in goal at 0(rank:24.)
=================================================
Progress: 28


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string2) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string2) (string1)
validate generalize_common_subterm_goal
asdf
=================================================
Progress: 29


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 15.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else varExists (string1) (string_list2) = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case string_eq (string1) (string2)(rank:8.)
case string_eq (string2) (string1)(rank:8.)
=================================================
Progress: 30


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else varExists (string1) (string_list2) = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
if string_eq (string2) (string1) then true else varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:8.)
=================================================
Progress: 31


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else varExists (string1) (string_list2) = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = true
---------------------------------------
true = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:8.)
=================================================
Progress: 32


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
if string_eq (string2) (string1) then true else varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if string_eq (string2) (string1) then true else varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
rewrite <- Case1 in goal at 0(rank:8.)
case string_eq (string2) (string1)(rank:9.)
rewrite <- IH1 in goal at 0(rank:24.)
rewrite Case1 in goal at 0(rank:24.)
rewrite Case1 in goal at 1(rank:24.)
rewrite Case1 in goal at 2(rank:24.)
=================================================
Progress: 33


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = true
---------------------------------------
true = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
rewrite <- Case1 in goal at 0(rank:8.)
rewrite <- Case1 in goal at 1(rank:8.)
rewrite <- Case1 in goal at 2(rank:8.)
case string_eq (string1) (string2)(rank:9.)
rewrite <- IH1 in goal at 0(rank:24.)
rewrite Case1 in goal at 0(rank:24.)
=================================================
Progress: 34


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if string_eq (string2) (string1) then true else varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if string_eq (string1) (string1) then true else varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:8.)
=================================================
Progress: 35


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string2) (string2) then true else varExists (string2) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:8.)
=================================================
Progress: 36


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string2) (string2) then true else varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:8.)
=================================================
Progress: 37


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string1) (string2) then true else varExists (string2) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:9.)
=================================================
Progress: 38


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if string_eq (string1) (string1) then true else varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if true then true else varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 39


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string2) (string2) then true else varExists (string2) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if true then true else varExists (string2) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 40


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string2) (string2) then true else varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if true then true else varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:8.)
=================================================
Progress: 41


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if true then true else varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 42


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if true then true else varExists (string2) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 43


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if true then true else varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if true then true else is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
validate generalize_common_subterm_goal
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
validate generalize_common_subterm_goal
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
validate generalize_common_subterm_goal
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
validate generalize_common_subterm_goal
Lemma List
forall (string1:string) (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)
End of Lemma List


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = true
---------------------------------------
true = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)
End of Lemma List


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else varExists (string1) (string_list1)
End of Lemma List


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string2) (string2) then true else varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)
End of Lemma List


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if true then true else varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (string1:string) (string_list1:string list), true = if true then true else is_mem_ta1 (string_list1) (string1)
End of Lemma List


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if true then true else is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 44


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = true
---------------------------------------
true = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7.)
=================================================
Progress: 45


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7.)
=================================================
Progress: 46


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string2) (string2) then true else varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else varExists (string1) (string_list1)(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else varExists (string1) (string_list1)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else varExists (string1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7.)
=================================================
Progress: 47


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if true then true else varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)(rank : 0.)


1st goal of : forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)

---------------------------------------
forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8.)
=================================================
Progress: 48


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if true then true else is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string_list1:string list), true = if true then true else is_mem_ta1 (string_list1) (string1)(rank : 0.)


1st goal of : forall (string1:string) (string_list1:string list), true = if true then true else is_mem_ta1 (string_list1) (string1)

---------------------------------------
forall (string1:string) (string_list1:string list), true = if true then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8.)
=================================================
Progress: 49


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:7.)
=================================================
Progress: 50


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:7.)
=================================================
Progress: 51


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else varExists (string1) (string_list1)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else varExists (string1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else varExists (string1) (string_list1)
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else varExists (string1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:7.)
=================================================
Progress: 52


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 53


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 54


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else varExists (string1) (string_list1)
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else varExists (string1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else varExists (string1) (string_list1)
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else varExists (string1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 55


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)
string1 : string
string2 : string
Cond1 : string_eq (string2) (string1) = true
---------------------------------------
forall (string_list1:string list), true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Cond1 at 0(rank:7.)
=================================================
Progress: 56


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)
string1 : string
string2 : string
Cond1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
case string_eq (string1) (string2)(rank:8.)
rewrite Cond1 in goal at 0(rank:23.)
rewrite <- Cond1 in goal at 0(rank:23.)
rewrite <- Cond1 in goal at 1(rank:23.)
rewrite <- Cond1 in goal at 2(rank:23.)
=================================================
Progress: 57


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else varExists (string1) (string_list1)
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else varExists (string1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else varExists (string1) (string_list1)
string1 : string
string2 : string
Cond1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if string_eq (string2) (string2) then true else varExists (string1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:7.)
=================================================
Progress: 58


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)
string1 : string
string2 : string
Cond1 : string_eq (string2) (string1) = true
---------------------------------------
forall (string_list1:string list), true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Cond1 at 0(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)
string1 : string
string2 : string
Cond1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
case string_eq (string1) (string2)(rank:8.)
rewrite Cond1 in goal at 0(rank:23.)
rewrite <- Cond1 in goal at 0(rank:23.)
rewrite <- Cond1 in goal at 1(rank:23.)
rewrite <- Cond1 in goal at 2(rank:23.)
=================================================
Progress: 59


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else varExists (string1) (string_list1)
string1 : string
string2 : string
Cond1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if string_eq (string2) (string2) then true else varExists (string1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else varExists (string1) (string_list1)
string1 : string
string2 : string
Cond1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if true then true else varExists (string1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8.)
=================================================
Progress: 60


1st goal of : forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)

---------------------------------------
forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if true then true else varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
original goal
forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lemma
forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)
tactics
assert forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)
reflexivity
Deduplication: 0
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 61


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if true then true else varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
varExists (string1) (string_list2) = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 16
Tactic List : 4
case string_eq (string1) (string2)(rank:8.)
rewrite <- IH1 in goal at 2(rank:23.)
rewrite <- IH1 in goal at 0(rank:23.)
rewrite <- IH1 in goal at 1(rank:23.)
=================================================
Progress: 62


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
varExists (string1) (string_list2) = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:8.)
=================================================
Progress: 63


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Case2 in goal at 0(rank:24.)
rewrite <- IH1 in goal at 0(rank:24.)
=================================================
Progress: 64


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if string_eq (string2) (string1) then true else varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 9.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
Case2 : string_eq (string2) (string1) = true
---------------------------------------
true = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8.)
=================================================
Progress: 65


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
Case2 : string_eq (string2) (string1) = true
---------------------------------------
true = true

4 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
Case2 : string_eq (string2) (string1) = false
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite Case1 in goal at 0(rank:24.)
rewrite <- IH1 in goal at 0(rank:24.)
=================================================
Progress: 66


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 15.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case string_eq (string1) (string2)(rank:8.)
case string_eq (string2) (string1)(rank:8.)
=================================================
Progress: 67


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:8.)
=================================================
Progress: 68


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = true
---------------------------------------
true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:8.)
=================================================
Progress: 69


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
rewrite <- Case1 in goal at 0(rank:8.)
rewrite IH1 in goal at 0(rank:16.)
rewrite Case1 in goal at 2(rank:24.)
rewrite Case1 in goal at 0(rank:24.)
rewrite Case1 in goal at 1(rank:24.)
case string_eq (string2) (string1)(rank:9.)
=================================================
Progress: 70


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = true
---------------------------------------
true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
rewrite <- Case1 in goal at 0(rank:8.)
rewrite <- Case1 in goal at 2(rank:8.)
case string_eq (string1) (string2)(rank:9.)
rewrite IH1 in goal at 0(rank:16.)
rewrite Case1 in goal at 0(rank:24.)
rewrite <- Case1 in goal at 1(rank:8.)
=================================================
Progress: 71


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if string_eq (string1) (string1) then true else is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:8.)
=================================================
Progress: 72


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:8.)
=================================================
Progress: 73


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:8.)
=================================================
Progress: 74


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:9.)
=================================================
Progress: 75


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if string_eq (string1) (string1) then true else is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if true then true else is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 76


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if true then true else is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 77


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if true then true else is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:8.)
=================================================
Progress: 78


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if true then true else is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 79


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if true then true else is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 80


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if true then true else is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if true then true else varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
validate generalize_common_subterm_goal
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
validate generalize_common_subterm_goal
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
validate generalize_common_subterm_goal
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
validate generalize_common_subterm_goal
Lemma List
forall (string1:string) (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)
End of Lemma List


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = true
---------------------------------------
true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)
End of Lemma List


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
End of Lemma List


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 81


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = true
---------------------------------------
true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7.)
=================================================
Progress: 82


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7.)
=================================================
Progress: 83


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7.)
=================================================
Progress: 84


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:7.)
=================================================
Progress: 85


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:7.)
=================================================
Progress: 86


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:7.)
=================================================
Progress: 87


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 88


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 89


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 90


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
Cond1 : string_eq (string2) (string1) = true
---------------------------------------
forall (string_list1:string list), true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Cond1 at 0(rank:7.)
=================================================
Progress: 91


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
Cond1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
case string_eq (string1) (string2)(rank:8.)
rewrite Cond1 in goal at 0(rank:23.)
rewrite <- Cond1 in goal at 0(rank:23.)
rewrite <- Cond1 in goal at 1(rank:23.)
rewrite <- Cond1 in goal at 2(rank:23.)
=================================================
Progress: 92


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
Cond1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:7.)
=================================================
Progress: 93


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
Cond1 : string_eq (string2) (string1) = true
---------------------------------------
forall (string_list1:string list), true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Cond1 at 0(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
Cond1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
case string_eq (string1) (string2)(rank:8.)
rewrite Cond1 in goal at 0(rank:23.)
rewrite <- Cond1 in goal at 0(rank:23.)
rewrite <- Cond1 in goal at 1(rank:23.)
rewrite <- Cond1 in goal at 2(rank:23.)
=================================================
Progress: 94


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
Cond1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
Cond1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if true then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8.)
=================================================
Progress: 95


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
Cond1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 8.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
Cond1 : string2 = string1
Case1 : string_eq (string1) (string2) = true
---------------------------------------
forall (string_list1:string list), true = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 96


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
Cond1 : string2 = string1
Case1 : string_eq (string1) (string2) = true
---------------------------------------
forall (string_list1:string list), true = true

1 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
Cond1 : string2 = string1
Case1 : string_eq (string1) (string2) = false
---------------------------------------
forall (string_list1:string list), true = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 2
induction string_list1(rank:16.)
rewrite <- Cond1 in goal at 0(rank:23.)
=================================================
Progress: 97


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
Cond1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 8.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
Cond1 : string2 = string1
Case1 : string_eq (string1) (string2) = true
---------------------------------------
forall (string_list1:string list), true = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 98


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
Cond1 : string2 = string1
Case1 : string_eq (string1) (string2) = true
---------------------------------------
forall (string_list1:string list), true = true

1 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
Cond1 : string2 = string1
Case1 : string_eq (string1) (string2) = false
---------------------------------------
forall (string_list1:string list), true = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 2
induction string_list1(rank:16.)
rewrite <- Cond1 in goal at 0(rank:23.)
=================================================
Progress: 99


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
Cond1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if true then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
original goal
forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lemma
forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
tactics
assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
intro string1
intro string2
intro Cond1
rewrite string_refl in goal at 0
reflexivity
Deduplication: 0
Tactic List : 1
rewrite string_refl in goal at 0(rank:8.)
=================================================
Progress: 100


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if true then true else is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 101


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if true then true else is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 16
Tactic List : 4
case string_eq (string1) (string2)(rank:8.)
rewrite IH1 in goal at 2(rank:23.)
rewrite IH1 in goal at 0(rank:23.)
rewrite IH1 in goal at 1(rank:23.)
=================================================
Progress: 102


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:8.)
=================================================
Progress: 103


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:16.)
rewrite Case2 in goal at 0(rank:24.)
=================================================
Progress: 104


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 9.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
Case2 : string_eq (string2) (string1) = true
---------------------------------------
true = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8.)
=================================================
Progress: 105


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
Case2 : string_eq (string2) (string1) = true
---------------------------------------
true = true

4 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
Case2 : string_eq (string2) (string1) = false
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite IH1 in goal at 0(rank:16.)
rewrite Case1 in goal at 0(rank:24.)
=================================================
Progress: 106


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 15.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then true else varExists (string1) (string_list2) = varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string1)(rank:8.)
=================================================
Progress: 107


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then true else varExists (string1) (string_list2) = varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = true
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:8.)
=================================================
Progress: 108


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = true
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:8.)
rewrite <- IH1 in goal at 0(rank:24.)
=================================================
Progress: 109


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string2) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
validate generalize_common_subterm_goal
asdf
=================================================
Progress: 110


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 15.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string1)(rank:8.)
=================================================
Progress: 111


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:8.)
=================================================
Progress: 112


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:8.)
rewrite IH1 in goal at 0(rank:16.)
=================================================
Progress: 113


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
validate generalize_common_subterm_goal
asdf
=================================================
Progress: 114


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 15.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
varExists (string1) (string_list2) = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:8.)
=================================================
Progress: 115


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
varExists (string1) (string_list2) = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:8.)
=================================================
Progress: 116


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Case2 in goal at 0(rank:24.)
rewrite <- IH1 in goal at 0(rank:24.)
=================================================
Progress: 117


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 15.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:8.)
=================================================
Progress: 118


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:8.)
=================================================
Progress: 119


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:16.)
rewrite Case2 in goal at 0(rank:24.)
=================================================
Progress: 120


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 16.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:8.)
=================================================
Progress: 121


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string2) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite IH1 in goal at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
asdf
=================================================
Progress: 122


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 16.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if string_eq (string2) (string1) then true else varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
case string_eq (string2) (string1)(rank:9.)
rewrite Case1 in goal at 2(rank:24.)
rewrite Case1 in goal at 0(rank:24.)
rewrite Case1 in goal at 1(rank:24.)
=================================================
Progress: 123


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if string_eq (string2) (string1) then true else varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 9.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
Case2 : string_eq (string2) (string1) = true
---------------------------------------
true = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:9.)
=================================================
Progress: 124


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
Case2 : string_eq (string2) (string1) = true
---------------------------------------
true = true

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 9.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
Case2 : string2 = string1
---------------------------------------
true = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 125


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 16.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:8.)
=================================================
Progress: 126


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string2) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
intro string1
intro string2
intro Cond1
rewrite string_refl in goal at 0
reflexivity
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite IH1 in goal at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
intro string1
intro string2
intro Cond1
rewrite string_refl in goal at 0
reflexivity
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
intro string1
intro string2
intro Cond1
rewrite string_refl in goal at 0
reflexivity
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
intro string1
intro string2
intro Cond1
rewrite string_refl in goal at 0
reflexivity
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
asdf
=================================================
Progress: 127


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
Case2 : string_eq (string2) (string1) = false
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 16.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
Case2 : string_eq (string2) (string1) = false
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:8.)
=================================================
Progress: 128


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
Case2 : string_eq (string2) (string1) = false
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
Case2 : string_eq (string2) (string1) = false
---------------------------------------
varExists (string2) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
case string_eq (string2) (string1)
reflexivity
rewrite IH1 in goal at 0
rewrite Case1 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
case string_eq (string2) (string1)
reflexivity
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
case string_eq (string2) (string1)
reflexivity
validate generalize_common_subterm_goal
asdf
=================================================
Progress: 129


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 16.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:8.)
=================================================
Progress: 130


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string2) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite IH1 in goal at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
validate generalize_common_subterm_goal
asdf
=================================================
Progress: 131


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 16.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:8.)
=================================================
Progress: 132


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string2) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite IH1 in goal at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
asdf
=================================================
Progress: 133


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
varExists (string1) (string_list2) = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 23.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:8.)
=================================================
Progress: 134


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:8.)
=================================================
Progress: 135


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:16.)
rewrite Case2 in goal at 0(rank:24.)
=================================================
Progress: 136


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 16.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:8.)
=================================================
Progress: 137


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string2) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)
reflexivity
reflexivity
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite IH1 in goal at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)
reflexivity
reflexivity
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)
reflexivity
reflexivity
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)
reflexivity
reflexivity
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
asdf
=================================================
Progress: 138


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
varExists (string1) (string_list2) = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 23.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:8.)
=================================================
Progress: 139


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:8.)
=================================================
Progress: 140


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:16.)
rewrite Case2 in goal at 0(rank:24.)
=================================================
Progress: 141


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 16.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:8.)
=================================================
Progress: 142


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string2) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)
reflexivity
reflexivity
rewrite <- IH1 in goal at 1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite IH1 in goal at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)
reflexivity
reflexivity
rewrite <- IH1 in goal at 1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)
reflexivity
reflexivity
rewrite <- IH1 in goal at 1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)
reflexivity
reflexivity
rewrite <- IH1 in goal at 1
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
asdf
=================================================
Progress: 143


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
varExists (string1) (string_list2) = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 23.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
varExists (string1) (string_list2) = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:8.)
=================================================
Progress: 144


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
varExists (string1) (string_list2) = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:8.)
=================================================
Progress: 145


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Case2 in goal at 0(rank:24.)
rewrite <- IH1 in goal at 0(rank:24.)
=================================================
Progress: 146


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 23.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
varExists (string1) (string_list2) = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:8.)
=================================================
Progress: 147


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
varExists (string1) (string_list2) = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:8.)
=================================================
Progress: 148


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Case2 in goal at 0(rank:24.)
rewrite <- IH1 in goal at 0(rank:24.)
=================================================
Progress: 149


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 1(rank : 23.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
varExists (string1) (string_list2) = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:8.)
=================================================
Progress: 150


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
varExists (string1) (string_list2) = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:8.)
=================================================
Progress: 151


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Case2 in goal at 0(rank:24.)
rewrite <- IH1 in goal at 0(rank:24.)
=================================================
Progress: 152


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 23.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:8.)
=================================================
Progress: 153


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:8.)
=================================================
Progress: 154


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:16.)
rewrite Case2 in goal at 0(rank:24.)
=================================================
Progress: 155


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 16.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:8.)
=================================================
Progress: 156


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string2) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
intro string1
intro string2
intro Cond1
rewrite string_refl in goal at 0
reflexivity
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 2
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite IH1 in goal at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
intro string1
intro string2
intro Cond1
rewrite string_refl in goal at 0
reflexivity
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 2
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
intro string1
intro string2
intro Cond1
rewrite string_refl in goal at 0
reflexivity
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 2
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
intro string1
intro string2
intro Cond1
rewrite string_refl in goal at 0
reflexivity
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 2
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
asdf
=================================================
Progress: 157


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 24.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:8.)
=================================================
Progress: 158


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite <- IH1 in goal at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string2) (string1)
validate generalize_common_subterm_goal
asdf
=================================================
Progress: 159


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 24.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
asdf
=================================================
Progress: 160


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if string_eq (string2) (string1) then true else varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 24.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if string_eq (string2) (string2) then true else varExists (string2) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:8.)
=================================================
Progress: 161


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if string_eq (string2) (string2) then true else varExists (string2) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if true then true else varExists (string2) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
validate generalize_common_subterm_goal
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
validate generalize_common_subterm_goal
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
validate generalize_common_subterm_goal
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
Lemma List
forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true
End of Lemma List


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
if string_eq (string2) (string1) then true else varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true
End of Lemma List


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if string_eq (string2) (string1) then true else varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (string1:string) (string_list1:string list), if string_eq (string1) (string1) then true else varExists (string1) (string_list1) = true
End of Lemma List


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if string_eq (string2) (string2) then true else varExists (string2) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true
End of Lemma List


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if true then true else varExists (string2) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 162


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
if string_eq (string2) (string1) then true else varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7.)
=================================================
Progress: 163


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if string_eq (string2) (string1) then true else varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7.)
=================================================
Progress: 164


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if string_eq (string2) (string2) then true else varExists (string2) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string_list1:string list), if string_eq (string1) (string1) then true else varExists (string1) (string_list1) = true(rank : 0.)


1st goal of : forall (string1:string) (string_list1:string list), if string_eq (string1) (string1) then true else varExists (string1) (string_list1) = true

---------------------------------------
forall (string1:string) (string_list1:string list), if string_eq (string1) (string1) then true else varExists (string1) (string_list1) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7.)
=================================================
Progress: 165


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if true then true else varExists (string2) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true(rank : 0.)


1st goal of : forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true

---------------------------------------
forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8.)
=================================================
Progress: 166


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:7.)
=================================================
Progress: 167


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string1 = string2 -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:7.)
=================================================
Progress: 168


1st goal of : forall (string1:string) (string_list1:string list), if string_eq (string1) (string1) then true else varExists (string1) (string_list1) = true

---------------------------------------
forall (string1:string) (string_list1:string list), if string_eq (string1) (string1) then true else varExists (string1) (string_list1) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7.)


1st goal of : forall (string1:string) (string_list1:string list), if string_eq (string1) (string1) then true else varExists (string1) (string_list1) = true
string1 : string
---------------------------------------
forall (string_list1:string list), if string_eq (string1) (string1) then true else varExists (string1) (string_list1) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:7.)
=================================================
Progress: 169


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 170


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string1 = string2 -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), string1 = string2 -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 171


1st goal of : forall (string1:string) (string_list1:string list), if string_eq (string1) (string1) then true else varExists (string1) (string_list1) = true
string1 : string
---------------------------------------
forall (string_list1:string list), if string_eq (string1) (string1) then true else varExists (string1) (string_list1) = true

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 7.)


1st goal of : forall (string1:string) (string_list1:string list), if string_eq (string1) (string1) then true else varExists (string1) (string_list1) = true
string1 : string
---------------------------------------
forall (string_list1:string list), if true then true else varExists (string1) (string_list1) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8.)
=================================================
Progress: 172


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true
string1 : string
string2 : string
Cond1 : string_eq (string1) (string2) = true
---------------------------------------
forall (string_list1:string list), if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Cond1 at 0(rank:7.)
=================================================
Progress: 173


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), string1 = string2 -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true
string1 : string
string2 : string
Cond1 : string1 = string2
---------------------------------------
forall (string_list1:string list), if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
case string_eq (string2) (string1)(rank:8.)
rewrite Cond1 in goal at 0(rank:23.)
rewrite Cond1 in goal at 1(rank:23.)
rewrite Cond1 in goal at 2(rank:23.)
rewrite <- Cond1 in goal at 0(rank:23.)
=================================================
Progress: 174


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true
string1 : string
string2 : string
Cond1 : string_eq (string1) (string2) = true
---------------------------------------
forall (string_list1:string list), if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Cond1 at 0(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true
string1 : string
string2 : string
Cond1 : string1 = string2
---------------------------------------
forall (string_list1:string list), if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
case string_eq (string2) (string1)(rank:8.)
rewrite Cond1 in goal at 0(rank:23.)
rewrite Cond1 in goal at 1(rank:23.)
rewrite Cond1 in goal at 2(rank:23.)
rewrite <- Cond1 in goal at 0(rank:23.)
=================================================
Progress: 175


1st goal of : forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true

---------------------------------------
forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true

0 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if true then true else varExists (string2) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
original goal
forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lemma
forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true
tactics
assert forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true
reflexivity
Deduplication: 0
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 176


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if true then true else varExists (string2) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then true else varExists (string1) (string_list2) = varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 16
Tactic List : 4
case string_eq (string2) (string1)(rank:8.)
rewrite <- IH1 in goal at 2(rank:23.)
rewrite <- IH1 in goal at 0(rank:23.)
rewrite <- IH1 in goal at 1(rank:23.)
=================================================
Progress: 177


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then true else varExists (string1) (string_list2) = varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = true
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:8.)
=================================================
Progress: 178


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = true
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:8.)
rewrite <- IH1 in goal at 0(rank:24.)
=================================================
Progress: 179


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string2) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true
reflexivity
reflexivity
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true
reflexivity
reflexivity
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true
reflexivity
reflexivity
case string_eq (string2) (string1)
validate generalize_common_subterm_goal
asdf
=================================================
Progress: 180


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then true else varExists (string1) (string_list2) = varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 23.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string1)(rank:8.)
=================================================
Progress: 181


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:8.)
=================================================
Progress: 182


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:8.)
rewrite IH1 in goal at 0(rank:16.)
=================================================
Progress: 183


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true
reflexivity
reflexivity
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true
reflexivity
reflexivity
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true
reflexivity
reflexivity
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
validate generalize_common_subterm_goal
asdf
=================================================
Progress: 184


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 16.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:8.)
=================================================
Progress: 185


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string2) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true
reflexivity
reflexivity
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite IH1 in goal at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true
reflexivity
reflexivity
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true
reflexivity
reflexivity
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true
reflexivity
reflexivity
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
validate generalize_common_subterm_goal
asdf
=================================================
Progress: 186


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then true else varExists (string1) (string_list2) = varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 23.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string1)(rank:8.)
=================================================
Progress: 187


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = true
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:8.)
=================================================
Progress: 188


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = true
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:8.)
rewrite <- IH1 in goal at 0(rank:24.)
=================================================
Progress: 189


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string2) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true
reflexivity
reflexivity
rewrite <- IH1 in goal at 1
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true
reflexivity
reflexivity
rewrite <- IH1 in goal at 1
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true
reflexivity
reflexivity
rewrite <- IH1 in goal at 1
case string_eq (string2) (string1)
validate generalize_common_subterm_goal
asdf
=================================================
Progress: 190


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then true else varExists (string1) (string_list2) = varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 23.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then true else varExists (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string1)(rank:8.)
=================================================
Progress: 191


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then true else varExists (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:8.)
=================================================
Progress: 192


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:8.)
rewrite IH1 in goal at 0(rank:16.)
=================================================
Progress: 193


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true
reflexivity
reflexivity
rewrite <- IH1 in goal at 2
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true
reflexivity
reflexivity
rewrite <- IH1 in goal at 2
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true
reflexivity
reflexivity
rewrite <- IH1 in goal at 2
case string_eq (string2) (string1)
validate generalize_common_subterm_goal
asdf
=================================================
Progress: 194


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 16.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:8.)
=================================================
Progress: 195


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string2) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true
reflexivity
reflexivity
rewrite <- IH1 in goal at 2
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite IH1 in goal at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true
reflexivity
reflexivity
rewrite <- IH1 in goal at 2
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true
reflexivity
reflexivity
rewrite <- IH1 in goal at 2
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true
reflexivity
reflexivity
rewrite <- IH1 in goal at 2
case string_eq (string2) (string1)
validate generalize_common_subterm_goal
asdf
=================================================
Progress: 196


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 24.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string2) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)
reflexivity
reflexivity
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)
reflexivity
reflexivity
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)
reflexivity
reflexivity
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
asdf
=================================================
Progress: 197


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 24.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:8.)
=================================================
Progress: 198


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)
reflexivity
reflexivity
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- IH1 in goal at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)
reflexivity
reflexivity
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)
reflexivity
reflexivity
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)
reflexivity
reflexivity
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
asdf
=================================================
Progress: 199


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 24.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if string_eq (string2) (string2) then true else is_mem_ta1 (string_list2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:8.)
=================================================
Progress: 200


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if string_eq (string2) (string2) then true else is_mem_ta1 (string_list2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if true then true else is_mem_ta1 (string_list2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
validate generalize_common_subterm_goal
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
validate generalize_common_subterm_goal
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
validate generalize_common_subterm_goal
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
Lemma List
forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true
End of Lemma List


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true
End of Lemma List


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (string1:string) (string_list1:string list), if string_eq (string1) (string1) then true else is_mem_ta1 (string_list1) (string1) = true
End of Lemma List


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if string_eq (string2) (string2) then true else is_mem_ta1 (string_list2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true
End of Lemma List


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if true then true else is_mem_ta1 (string_list2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 201


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7.)
=================================================
Progress: 202


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7.)
=================================================
Progress: 203


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if string_eq (string2) (string2) then true else is_mem_ta1 (string_list2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string_list1:string list), if string_eq (string1) (string1) then true else is_mem_ta1 (string_list1) (string1) = true(rank : 0.)


1st goal of : forall (string1:string) (string_list1:string list), if string_eq (string1) (string1) then true else is_mem_ta1 (string_list1) (string1) = true

---------------------------------------
forall (string1:string) (string_list1:string list), if string_eq (string1) (string1) then true else is_mem_ta1 (string_list1) (string1) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7.)
=================================================
Progress: 204


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if true then true else is_mem_ta1 (string_list2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true(rank : 0.)


1st goal of : forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true

---------------------------------------
forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8.)
=================================================
Progress: 205


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:7.)
=================================================
Progress: 206


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string1 = string2 -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:7.)
=================================================
Progress: 207


1st goal of : forall (string1:string) (string_list1:string list), if string_eq (string1) (string1) then true else is_mem_ta1 (string_list1) (string1) = true

---------------------------------------
forall (string1:string) (string_list1:string list), if string_eq (string1) (string1) then true else is_mem_ta1 (string_list1) (string1) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7.)


1st goal of : forall (string1:string) (string_list1:string list), if string_eq (string1) (string1) then true else is_mem_ta1 (string_list1) (string1) = true
string1 : string
---------------------------------------
forall (string_list1:string list), if string_eq (string1) (string1) then true else is_mem_ta1 (string_list1) (string1) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:7.)
=================================================
Progress: 208


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 209


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string1 = string2 -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), string1 = string2 -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 210


1st goal of : forall (string1:string) (string_list1:string list), if string_eq (string1) (string1) then true else is_mem_ta1 (string_list1) (string1) = true
string1 : string
---------------------------------------
forall (string_list1:string list), if string_eq (string1) (string1) then true else is_mem_ta1 (string_list1) (string1) = true

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 7.)


1st goal of : forall (string1:string) (string_list1:string list), if string_eq (string1) (string1) then true else is_mem_ta1 (string_list1) (string1) = true
string1 : string
---------------------------------------
forall (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8.)
=================================================
Progress: 211


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true
string1 : string
string2 : string
Cond1 : string_eq (string1) (string2) = true
---------------------------------------
forall (string_list1:string list), if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Cond1 at 0(rank:7.)
=================================================
Progress: 212


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), string1 = string2 -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true
string1 : string
string2 : string
Cond1 : string1 = string2
---------------------------------------
forall (string_list1:string list), if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
case string_eq (string2) (string1)(rank:8.)
rewrite Cond1 in goal at 0(rank:23.)
rewrite Cond1 in goal at 1(rank:23.)
rewrite Cond1 in goal at 2(rank:23.)
rewrite <- Cond1 in goal at 0(rank:23.)
=================================================
Progress: 213


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true
string1 : string
string2 : string
Cond1 : string_eq (string1) (string2) = true
---------------------------------------
forall (string_list1:string list), if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Cond1 at 0(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true
string1 : string
string2 : string
Cond1 : string1 = string2
---------------------------------------
forall (string_list1:string list), if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
case string_eq (string2) (string1)(rank:8.)
rewrite Cond1 in goal at 0(rank:23.)
rewrite Cond1 in goal at 1(rank:23.)
rewrite Cond1 in goal at 2(rank:23.)
rewrite <- Cond1 in goal at 0(rank:23.)
=================================================
Progress: 214


1st goal of : forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true

---------------------------------------
forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true

0 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if true then true else is_mem_ta1 (string_list2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
original goal
forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lemma
forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true
tactics
assert forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true
reflexivity
Deduplication: 0
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 215


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if true then true else is_mem_ta1 (string_list2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 17
Tactic List : 4
case string_eq (string2) (string1)(rank:8.)
rewrite IH1 in goal at 2(rank:23.)
rewrite IH1 in goal at 0(rank:23.)
rewrite IH1 in goal at 1(rank:23.)
=================================================
Progress: 216


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:8.)
=================================================
Progress: 217


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:8.)
rewrite IH1 in goal at 0(rank:16.)
=================================================
Progress: 218


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true
reflexivity
reflexivity
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true
reflexivity
reflexivity
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true
reflexivity
reflexivity
case string_eq (string2) (string1)
validate generalize_common_subterm_goal
asdf
=================================================
Progress: 219


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 16.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:8.)
=================================================
Progress: 220


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string2) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true
reflexivity
reflexivity
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite IH1 in goal at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true
reflexivity
reflexivity
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true
reflexivity
reflexivity
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true
reflexivity
reflexivity
case string_eq (string2) (string1)
validate generalize_common_subterm_goal
asdf
=================================================
Progress: 221


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 23.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then true else varExists (string1) (string_list2) = varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string1)(rank:8.)
=================================================
Progress: 222


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then true else varExists (string1) (string_list2) = varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = true
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:8.)
=================================================
Progress: 223


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = true
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:8.)
rewrite <- IH1 in goal at 0(rank:24.)
=================================================
Progress: 224


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string2) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true
reflexivity
reflexivity
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true
reflexivity
reflexivity
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true
reflexivity
reflexivity
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
validate generalize_common_subterm_goal
asdf
=================================================
Progress: 225


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 1(rank : 23.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then true else varExists (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string1)(rank:8.)
=================================================
Progress: 226


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then true else varExists (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:8.)
=================================================
Progress: 227


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:8.)
rewrite IH1 in goal at 0(rank:16.)
=================================================
Progress: 228


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true
reflexivity
reflexivity
rewrite IH1 in goal at 1
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true
reflexivity
reflexivity
rewrite IH1 in goal at 1
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true
reflexivity
reflexivity
rewrite IH1 in goal at 1
case string_eq (string2) (string1)
validate generalize_common_subterm_goal
asdf
=================================================
Progress: 229


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 16.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:8.)
=================================================
Progress: 230


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string2) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true
reflexivity
reflexivity
rewrite IH1 in goal at 1
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite IH1 in goal at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true
reflexivity
reflexivity
rewrite IH1 in goal at 1
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true
reflexivity
reflexivity
rewrite IH1 in goal at 1
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true
reflexivity
reflexivity
rewrite IH1 in goal at 1
case string_eq (string2) (string1)
validate generalize_common_subterm_goal
asdf
=================================================
Progress: 231


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 23.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string1)(rank:8.)
=================================================
Progress: 232


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = true
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:8.)
=================================================
Progress: 233


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = true
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:8.)
rewrite <- IH1 in goal at 0(rank:24.)
=================================================
Progress: 234


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string2) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true
reflexivity
reflexivity
rewrite IH1 in goal at 2
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true
reflexivity
reflexivity
rewrite IH1 in goal at 2
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true
reflexivity
reflexivity
rewrite IH1 in goal at 2
case string_eq (string2) (string1)
validate generalize_common_subterm_goal
asdf
=================================================
Progress: 235


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 24.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
intro string1
intro string2
intro Cond1
rewrite string_refl in goal at 0
reflexivity
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
intro string1
intro string2
intro Cond1
rewrite string_refl in goal at 0
reflexivity
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
intro string1
intro string2
intro Cond1
rewrite string_refl in goal at 0
reflexivity
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
asdf
=================================================
Progress: 236


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 24.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:8.)
=================================================
Progress: 237


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite <- IH1 in goal at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
validate generalize_common_subterm_goal
asdf
=================================================
Progress: 238


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 24.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string2) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
asdf
=================================================
Progress: 239


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 24.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:8.)
=================================================
Progress: 240


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- IH1 in goal at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
asdf
=================================================
Progress: 241


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 24.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
asdf
=================================================
Progress: 242


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 24.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)
reflexivity
reflexivity
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)
reflexivity
reflexivity
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)
reflexivity
reflexivity
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
asdf
=================================================
Progress: 243


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 24.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)
reflexivity
reflexivity
rewrite <- IH1 in goal at 1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)
reflexivity
reflexivity
rewrite <- IH1 in goal at 1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)
reflexivity
reflexivity
rewrite <- IH1 in goal at 1
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
asdf
=================================================
Progress: 244


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 24.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string2) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)
reflexivity
reflexivity
rewrite <- IH1 in goal at 2
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)
reflexivity
reflexivity
rewrite <- IH1 in goal at 2
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)
reflexivity
reflexivity
rewrite <- IH1 in goal at 2
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
asdf
=================================================
Progress: 245


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 24.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:8.)
=================================================
Progress: 246


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)
reflexivity
reflexivity
rewrite <- IH1 in goal at 2
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- IH1 in goal at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)
reflexivity
reflexivity
rewrite <- IH1 in goal at 2
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)
reflexivity
reflexivity
rewrite <- IH1 in goal at 2
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)
reflexivity
reflexivity
rewrite <- IH1 in goal at 2
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
asdf
=================================================
Progress: 247


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 24.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string2) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
intro string1
intro string2
intro Cond1
rewrite string_refl in goal at 0
reflexivity
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
intro string1
intro string2
intro Cond1
rewrite string_refl in goal at 0
reflexivity
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
intro string1
intro string2
intro Cond1
rewrite string_refl in goal at 0
reflexivity
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
asdf
=================================================
Progress: 248


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 24.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:8.)
=================================================
Progress: 249


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
intro string1
intro string2
intro Cond1
rewrite string_refl in goal at 0
reflexivity
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- IH1 in goal at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
intro string1
intro string2
intro Cond1
rewrite string_refl in goal at 0
reflexivity
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
intro string1
intro string2
intro Cond1
rewrite string_refl in goal at 0
reflexivity
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
intro string1
intro string2
intro Cond1
rewrite string_refl in goal at 0
reflexivity
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
asdf
=================================================
Progress: 250


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 24.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string2) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
intro string1
intro string2
intro Cond1
rewrite string_refl in goal at 0
reflexivity
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
intro string1
intro string2
intro Cond1
rewrite string_refl in goal at 0
reflexivity
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
intro string1
intro string2
intro Cond1
rewrite string_refl in goal at 0
reflexivity
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 1
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
asdf
=================================================
Progress: 251


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 24.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:8.)
=================================================
Progress: 252


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
intro string1
intro string2
intro Cond1
rewrite string_refl in goal at 0
reflexivity
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- IH1 in goal at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
intro string1
intro string2
intro Cond1
rewrite string_refl in goal at 0
reflexivity
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
intro string1
intro string2
intro Cond1
rewrite string_refl in goal at 0
reflexivity
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
intro string1
intro string2
intro Cond1
rewrite string_refl in goal at 0
reflexivity
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 1
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
asdf
=================================================
Progress: 253


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 24.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
intro string1
intro string2
intro Cond1
rewrite string_refl in goal at 0
reflexivity
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 2
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
intro string1
intro string2
intro Cond1
rewrite string_refl in goal at 0
reflexivity
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 2
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
intro string1
intro string2
intro Cond1
rewrite string_refl in goal at 0
reflexivity
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 2
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
asdf
=================================================
Progress: 254


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 24.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:8.)
=================================================
Progress: 255


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true
reflexivity
reflexivity
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite <- IH1 in goal at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true
reflexivity
reflexivity
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true
reflexivity
reflexivity
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true
reflexivity
reflexivity
case string_eq (string2) (string1)
validate generalize_common_subterm_goal
asdf
=================================================
Progress: 256


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 24.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:8.)
=================================================
Progress: 257


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true
reflexivity
reflexivity
rewrite <- IH1 in goal at 1
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite <- IH1 in goal at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true
reflexivity
reflexivity
rewrite <- IH1 in goal at 1
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true
reflexivity
reflexivity
rewrite <- IH1 in goal at 1
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true
reflexivity
reflexivity
rewrite <- IH1 in goal at 1
case string_eq (string2) (string1)
validate generalize_common_subterm_goal
asdf
=================================================
Progress: 258


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 24.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:8.)
=================================================
Progress: 259


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true
reflexivity
reflexivity
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite <- IH1 in goal at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true
reflexivity
reflexivity
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true
reflexivity
reflexivity
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true
reflexivity
reflexivity
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
validate generalize_common_subterm_goal
asdf
=================================================
Progress: 260


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 24.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:8.)
=================================================
Progress: 261


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true
reflexivity
reflexivity
rewrite IH1 in goal at 2
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite <- IH1 in goal at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true
reflexivity
reflexivity
rewrite IH1 in goal at 2
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true
reflexivity
reflexivity
rewrite IH1 in goal at 2
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true
reflexivity
reflexivity
rewrite IH1 in goal at 2
case string_eq (string2) (string1)
validate generalize_common_subterm_goal
asdf
Fatal error: exception Failure("worklist is empty")
Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
Called from Dilemma__Engine.proof_auto in file "lib/engine.ml", line 284, characters 8-69
Called from Dune__exe__Main.main in file "bin/main.ml", line 24, characters 12-79
