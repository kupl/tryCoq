Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (l:lambda), check_ta1 (l) = check (l)(rank : 0.)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:3.)
=================================================
Progress: 2


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3.)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) ((Nil)) = checkRec (lambda1) ((Nil))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:5.)
=================================================
Progress: 3


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) ((Nil)) = checkRec (lambda1) ((Nil))

0 goal(s) more...

0 conjecture(s) more...
>>> induction lambda1(rank : 5.)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
sub_check_ta1 (V (string1)) ((Nil)) = checkRec (V (string1)) ((Nil))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:4.)
=================================================
Progress: 4


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
sub_check_ta1 (V (string1)) ((Nil)) = checkRec (V (string1)) ((Nil))

2 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 4.)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = checkRec (lambda2) ((Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (P (string1) (lambda2)) ((Nil)) = checkRec (P (string1) (lambda2)) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:4.)
=================================================
Progress: 5


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = checkRec (lambda2) ((Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (P (string1) (lambda2)) ((Nil)) = checkRec (P (string1) (lambda2)) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 4.)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = checkRec (lambda2) ((Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = checkRec (lambda2) ((string1::(Nil)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
parent
(string1::(Nil))
lower
Cons(_, Nil())
upper
sub_check_ta1(lambda2, _)
remove upper
Nil()
remove lower
Nil()
remove upper
Cons(string1, Nil())
remove lower
Cons(string1, Nil())
remove upper
Cons(string2, Cons(string1, Nil()))
remove lower
Cons(string2, Cons(string1, Nil()))
remove upper
Cons(string3, Cons(string2, Cons(string1, Nil())))
remove lower
Cons(string3, Cons(string2, Cons(string1, Nil())))
parent
(string1::(Nil))
lower
Cons(_, Nil())
upper
checkRec(lambda2, _)
remove upper
Nil()
remove lower
Nil()
remove upper
Cons(string1, Nil())
remove lower
Cons(string1, Nil())
remove upper
_
Prop: sub_check_ta1 (V ("zuv")) (("imn"::("jiw"::(Nil)))) = checkRec (V ("zuv")) (("imn"::("jiw"::(Nil))))
Prop: sub_check_ta1 (V ("iyf")) ((Nil)) = checkRec (V ("iyf")) ((Nil))
Prop: sub_check_ta1 (C (P ("brb") (C (V ("veh")) (C (P ("kai") (C (C (V ("fkz")) (C (V ("dsc")) (V ("dvj")))) (C (V ("wyd")) (V ("nuv"))))) (V ("shc"))))) (V ("dkt"))) ((Nil)) = checkRec (C (P ("brb") (C (V ("veh")) (C (P ("kai") (C (C (V ("fkz")) (C (V ("dsc")) (V ("dvj")))) (C (V ("wyd")) (V ("nuv"))))) (V ("shc"))))) (V ("dkt"))) ((Nil))
Lemma List
forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
End of Lemma List


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = checkRec (lambda2) ((Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = checkRec (lambda2) ((string1::(Nil)))

1 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 6


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = checkRec (lambda2) ((Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = checkRec (lambda2) ((string1::(Nil)))

1 goal(s) more...

0 conjecture(s) more...
>>> assert forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)(rank : 0.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)

---------------------------------------
forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:7.)
=================================================
Progress: 7


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)

---------------------------------------
forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)

0 goal(s) more...

1 conjecture(s) more...
>>> induction lambda1(rank : 7.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (V (string1)) (string_list1) = checkRec (V (string1)) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 8


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (V (string1)) (string_list1) = checkRec (V (string1)) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
forall (string_list1:string list), is_mem_ta1 (string_list1) (string1) = varExists (string1) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction string_list1(rank:8.)
=================================================
Progress: 9


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
forall (string_list1:string list), is_mem_ta1 (string_list1) (string1) = varExists (string1) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
>>> induction string_list1(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
Base2 : string_list1 = (Nil)
---------------------------------------
is_mem_ta1 ((Nil)) (string1) = varExists (string1) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 10


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
Base2 : string_list1 = (Nil)
---------------------------------------
is_mem_ta1 ((Nil)) (string1) = varExists (string1) ((Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
is_mem_ta1 ((string2::string_list2)) (string1) = varExists (string1) ((string2::string_list2))

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 11


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
is_mem_ta1 ((string2::string_list2)) (string1) = varExists (string1) ((string2::string_list2))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
case string_eq (string2) (string1)(rank:8.)
case string_eq (string1) (string2)(rank:8.)
rewrite IH1 in goal at 0(rank:15.)
rewrite <- IH1 in goal at 0(rank:15.)
=================================================
Progress: 12


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = true
---------------------------------------
true = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:8.)
=================================================
Progress: 13


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:8.)
=================================================
Progress: 14


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = true
---------------------------------------
true = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
rewrite <- Case1 in goal at 0(rank:8.)
rewrite <- Case1 in goal at 1(rank:8.)
rewrite <- Case1 in goal at 2(rank:8.)
case string_eq (string1) (string2)(rank:9.)
rewrite <- IH1 in goal at 0(rank:24.)
rewrite Case1 in goal at 0(rank:24.)
=================================================
Progress: 15


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
rewrite <- Case1 in goal at 0(rank:8.)
rewrite IH1 in goal at 0(rank:16.)
rewrite Case1 in goal at 2(rank:24.)
rewrite Case1 in goal at 0(rank:24.)
rewrite Case1 in goal at 1(rank:24.)
case string_eq (string2) (string1)(rank:9.)
=================================================
Progress: 16


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string2) (string2) then true else varExists (string2) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:8.)
=================================================
Progress: 17


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string2) (string2) then true else varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:8.)
=================================================
Progress: 18


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string1) (string2) then true else varExists (string2) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:9.)
=================================================
Progress: 19


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if string_eq (string1) (string1) then true else is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:8.)
=================================================
Progress: 20


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string2) (string2) then true else varExists (string2) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if true then true else varExists (string2) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 21


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if true then true else varExists (string2) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 5
Tactic List : 3
case string_eq (string1) (string2)(rank:8.)
rewrite IH1 in goal at 0(rank:15.)
rewrite <- IH1 in goal at 0(rank:15.)
=================================================
Progress: 22


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if string_eq (string1) (string1) then true else is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if true then true else is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 23


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if true then true else is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 5
Tactic List : 3
case string_eq (string2) (string1)(rank:8.)
rewrite IH1 in goal at 0(rank:15.)
rewrite <- IH1 in goal at 0(rank:15.)
=================================================
Progress: 24


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:8.)
=================================================
Progress: 25


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = true
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:8.)
=================================================
Progress: 26


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:16.)
rewrite Case2 in goal at 0(rank:24.)
=================================================
Progress: 27


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = true
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:8.)
rewrite <- IH1 in goal at 0(rank:24.)
=================================================
Progress: 28


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string2) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: true = varExists ("bcr") (("zba"::(Nil)))
Prop: true = varExists ("eml") ((Nil))
Prop: true = varExists ("lqs") ((Nil))
asdf
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
Prop: true = varExists ("bew") (("lkt"::(Nil)))
Prop: true = varExists ("iqw") ((Nil))
Prop: true = varExists ("rzj") (("rrx"::(Nil)))
asdf
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string2) (string1)
validate generalize_common_subterm_goal
Prop: true = varExists ("uou") ((Nil))
Prop: true = varExists ("oth") (("qok"::(Nil)))
Prop: true = varExists ("ycd") (("bjt"::(Nil)))
asdf
=================================================
Progress: 29


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 15.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else varExists (string1) (string_list2) = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case string_eq (string2) (string1)(rank:8.)
case string_eq (string1) (string2)(rank:8.)
=================================================
Progress: 30


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else varExists (string1) (string_list2) = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = true
---------------------------------------
true = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:8.)
=================================================
Progress: 31


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else varExists (string1) (string_list2) = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
if string_eq (string2) (string1) then true else varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:8.)
=================================================
Progress: 32


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = true
---------------------------------------
true = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
rewrite <- Case1 in goal at 0(rank:8.)
rewrite <- Case1 in goal at 1(rank:8.)
rewrite <- Case1 in goal at 2(rank:8.)
case string_eq (string1) (string2)(rank:9.)
rewrite <- IH1 in goal at 0(rank:24.)
rewrite Case1 in goal at 0(rank:24.)
=================================================
Progress: 33


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
if string_eq (string2) (string1) then true else varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if string_eq (string2) (string1) then true else varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
rewrite <- Case1 in goal at 0(rank:8.)
case string_eq (string2) (string1)(rank:9.)
rewrite <- IH1 in goal at 0(rank:24.)
rewrite Case1 in goal at 0(rank:24.)
rewrite Case1 in goal at 1(rank:24.)
rewrite Case1 in goal at 2(rank:24.)
=================================================
Progress: 34


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string2) (string2) then true else varExists (string2) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:8.)
=================================================
Progress: 35


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string2) (string2) then true else varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:8.)
=================================================
Progress: 36


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string1) (string2) then true else varExists (string2) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:9.)
=================================================
Progress: 37


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if string_eq (string2) (string1) then true else varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if string_eq (string1) (string1) then true else varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:8.)
=================================================
Progress: 38


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string2) (string2) then true else varExists (string2) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if true then true else varExists (string2) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 39


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string2) (string2) then true else varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if true then true else varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:8.)
=================================================
Progress: 40


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if string_eq (string1) (string1) then true else varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if true then true else varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 41


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if true then true else varExists (string2) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 42


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if true then true else varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if true then true else is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: true = if true then true else is_mem_ta1 ((Nil)) ("lkg")
Prop: true = if true then true else is_mem_ta1 ((Nil)) ("lpk")
Prop: true = if true then true else is_mem_ta1 ((Nil)) ("umb")
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
validate generalize_common_subterm_goal
Prop: true = if true then true else varExists ("chi") ((Nil))
Prop: true = if true then true else varExists ("cyv") (("xwy"::("kur"::("sah"::(Nil)))))
Prop: true = if true then true else varExists ("pfi") ((Nil))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
validate generalize_common_subterm_goal
Prop: true = if string_eq ("twr") ("twr") then true else varExists ("pof") ((Nil))
Prop: true = if string_eq ("xks") ("xks") then true else varExists ("hxn") ((Nil))
Prop: true = if string_eq ("vnb") ("vnb") then true else varExists ("wsr") ((Nil))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
validate generalize_common_subterm_goal
Prop: true = if string_eq ("keq") ("nns") then true else varExists ("keq") ((Nil))
Prop: true = if string_eq ("vzh") ("pfb") then true else varExists ("vzh") (("xpf"::(Nil)))
Prop: true = if string_eq ("hgp") ("mli") then true else varExists ("hgp") ((Nil))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
validate generalize_common_subterm_goal
Prop: true = if string_eq ("gaw") ("sbc") then true else varExists ("gaw") ((Nil))
Prop: true = if string_eq ("lhz") ("rci") then true else varExists ("lhz") ((Nil))
Prop: true = if string_eq ("ysq") ("inf") then true else varExists ("ysq") ((Nil))
Lemma List
forall (string1:string) (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)
End of Lemma List


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = true
---------------------------------------
true = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)
End of Lemma List


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else varExists (string1) (string_list1)
End of Lemma List


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string2) (string2) then true else varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)
End of Lemma List


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if true then true else varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (string1:string) (string_list1:string list), true = if true then true else is_mem_ta1 (string_list1) (string1)
End of Lemma List


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if true then true else is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 43


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = true
---------------------------------------
true = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7.)
=================================================
Progress: 44


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7.)
=================================================
Progress: 45


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string2) (string2) then true else varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else varExists (string1) (string_list1)(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else varExists (string1) (string_list1)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else varExists (string1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7.)
=================================================
Progress: 46


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if true then true else varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)(rank : 0.)


1st goal of : forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)

---------------------------------------
forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8.)
=================================================
Progress: 47


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if true then true else is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string_list1:string list), true = if true then true else is_mem_ta1 (string_list1) (string1)(rank : 0.)


1st goal of : forall (string1:string) (string_list1:string list), true = if true then true else is_mem_ta1 (string_list1) (string1)

---------------------------------------
forall (string1:string) (string_list1:string list), true = if true then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8.)
=================================================
Progress: 48


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:7.)
=================================================
Progress: 49


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:7.)
=================================================
Progress: 50


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else varExists (string1) (string_list1)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else varExists (string1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else varExists (string1) (string_list1)
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else varExists (string1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:7.)
=================================================
Progress: 51


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 52


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 53


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else varExists (string1) (string_list1)
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else varExists (string1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else varExists (string1) (string_list1)
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else varExists (string1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 54


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)
string1 : string
string2 : string
Cond1 : string_eq (string2) (string1) = true
---------------------------------------
forall (string_list1:string list), true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Cond1 at 0(rank:7.)
=================================================
Progress: 55


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)
string1 : string
string2 : string
Cond1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
case string_eq (string1) (string2)(rank:8.)
rewrite Cond1 in goal at 0(rank:23.)
rewrite <- Cond1 in goal at 0(rank:23.)
rewrite <- Cond1 in goal at 1(rank:23.)
rewrite <- Cond1 in goal at 2(rank:23.)
=================================================
Progress: 56


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else varExists (string1) (string_list1)
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else varExists (string1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else varExists (string1) (string_list1)
string1 : string
string2 : string
Cond1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if string_eq (string2) (string2) then true else varExists (string1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:7.)
=================================================
Progress: 57


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)
string1 : string
string2 : string
Cond1 : string_eq (string2) (string1) = true
---------------------------------------
forall (string_list1:string list), true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Cond1 at 0(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)
string1 : string
string2 : string
Cond1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if string_eq (string1) (string2) then true else varExists (string1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
case string_eq (string1) (string2)(rank:8.)
rewrite Cond1 in goal at 0(rank:23.)
rewrite <- Cond1 in goal at 0(rank:23.)
rewrite <- Cond1 in goal at 1(rank:23.)
rewrite <- Cond1 in goal at 2(rank:23.)
=================================================
Progress: 58


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else varExists (string1) (string_list1)
string1 : string
string2 : string
Cond1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if string_eq (string2) (string2) then true else varExists (string1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else varExists (string1) (string_list1)
string1 : string
string2 : string
Cond1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if true then true else varExists (string1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8.)
=================================================
Progress: 59


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if true then true else varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 60


1st goal of : forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)

---------------------------------------
forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if true then true else varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
original goal
forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lemma
forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)
tactics
assert forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)
reflexivity
Deduplication: 0
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 61


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if true then true else varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
varExists (string1) (string_list2) = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 16
Tactic List : 4
case string_eq (string1) (string2)(rank:8.)
rewrite <- IH1 in goal at 2(rank:23.)
rewrite <- IH1 in goal at 0(rank:23.)
rewrite <- IH1 in goal at 1(rank:23.)
=================================================
Progress: 62


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
varExists (string1) (string_list2) = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:8.)
=================================================
Progress: 63


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Case2 in goal at 0(rank:24.)
rewrite <- IH1 in goal at 0(rank:24.)
=================================================
Progress: 64


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if string_eq (string2) (string1) then true else varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 9.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
Case2 : string_eq (string2) (string1) = true
---------------------------------------
true = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8.)
=================================================
Progress: 65


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
Case2 : string_eq (string2) (string1) = true
---------------------------------------
true = true

4 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
Case2 : string_eq (string2) (string1) = false
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite Case1 in goal at 0(rank:24.)
rewrite <- IH1 in goal at 0(rank:24.)
=================================================
Progress: 66


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 15.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case string_eq (string2) (string1)(rank:8.)
case string_eq (string1) (string2)(rank:8.)
=================================================
Progress: 67


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = true
---------------------------------------
true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:8.)
=================================================
Progress: 68


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:8.)
=================================================
Progress: 69


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = true
---------------------------------------
true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
rewrite <- Case1 in goal at 0(rank:8.)
rewrite <- Case1 in goal at 2(rank:8.)
case string_eq (string1) (string2)(rank:9.)
rewrite IH1 in goal at 0(rank:16.)
rewrite Case1 in goal at 0(rank:24.)
rewrite <- Case1 in goal at 1(rank:8.)
=================================================
Progress: 70


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
rewrite <- Case1 in goal at 0(rank:8.)
rewrite IH1 in goal at 0(rank:16.)
rewrite Case1 in goal at 2(rank:24.)
rewrite Case1 in goal at 0(rank:24.)
rewrite Case1 in goal at 1(rank:24.)
case string_eq (string2) (string1)(rank:9.)
=================================================
Progress: 71


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:8.)
=================================================
Progress: 72


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:8.)
=================================================
Progress: 73


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:9.)
=================================================
Progress: 74


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if string_eq (string1) (string1) then true else is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:8.)
=================================================
Progress: 75


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if true then true else is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 76


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if true then true else is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:8.)
=================================================
Progress: 77


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if string_eq (string1) (string1) then true else is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if true then true else is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 78


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if true then true else is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 79


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if true then true else is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if true then true else varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: true = if true then true else varExists ("wzq") (("wic"::(Nil)))
Prop: true = if true then true else varExists ("gqd") (("kae"::("jgk"::(Nil))))
Prop: true = if true then true else varExists ("iml") (("gvn"::("kcy"::("pky"::(Nil)))))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
validate generalize_common_subterm_goal
Prop: true = if true then true else is_mem_ta1 ((Nil)) ("xmj")
Prop: true = if true then true else is_mem_ta1 (("oxh"::(Nil))) ("lwv")
Prop: true = if true then true else is_mem_ta1 ((Nil)) ("fjb")
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
validate generalize_common_subterm_goal
Prop: true = if string_eq ("wrk") ("wrk") then true else is_mem_ta1 ((Nil)) ("bro")
Prop: true = if string_eq ("gez") ("gez") then true else is_mem_ta1 (("hlx"::(Nil))) ("cfv")
Prop: true = if string_eq ("rpz") ("rpz") then true else is_mem_ta1 (("uag"::(Nil))) ("wok")
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
validate generalize_common_subterm_goal
Prop: true = if string_eq ("kcq") ("pus") then true else is_mem_ta1 ((Nil)) ("kcq")
Prop: true = if string_eq ("pab") ("wxv") then true else is_mem_ta1 (("ulo"::(Nil))) ("pab")
Prop: true = if string_eq ("kui") ("won") then true else is_mem_ta1 ((Nil)) ("kui")
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
validate generalize_common_subterm_goal
Prop: true = if string_eq ("iue") ("eqk") then true else is_mem_ta1 (("ldg"::(Nil))) ("iue")
Prop: true = if string_eq ("bwp") ("crb") then true else is_mem_ta1 ((Nil)) ("bwp")
Prop: true = if string_eq ("kvu") ("clv") then true else is_mem_ta1 ((Nil)) ("kvu")
Lemma List
forall (string1:string) (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)
End of Lemma List


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = true
---------------------------------------
true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)
End of Lemma List


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
End of Lemma List


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 80


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = true
---------------------------------------
true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7.)
=================================================
Progress: 81


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7.)
=================================================
Progress: 82


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7.)
=================================================
Progress: 83


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:7.)
=================================================
Progress: 84


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:7.)
=================================================
Progress: 85


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:7.)
=================================================
Progress: 86


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 87


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 88


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 89


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
Cond1 : string_eq (string2) (string1) = true
---------------------------------------
forall (string_list1:string list), true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Cond1 at 0(rank:7.)
=================================================
Progress: 90


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
Cond1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
case string_eq (string1) (string2)(rank:8.)
rewrite Cond1 in goal at 0(rank:23.)
rewrite <- Cond1 in goal at 0(rank:23.)
rewrite <- Cond1 in goal at 1(rank:23.)
rewrite <- Cond1 in goal at 2(rank:23.)
=================================================
Progress: 91


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
Cond1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:7.)
=================================================
Progress: 92


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
Cond1 : string_eq (string2) (string1) = true
---------------------------------------
forall (string_list1:string list), true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Cond1 at 0(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
Cond1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
case string_eq (string1) (string2)(rank:8.)
rewrite Cond1 in goal at 0(rank:23.)
rewrite <- Cond1 in goal at 0(rank:23.)
rewrite <- Cond1 in goal at 1(rank:23.)
rewrite <- Cond1 in goal at 2(rank:23.)
=================================================
Progress: 93


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
Cond1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
Cond1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if true then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8.)
=================================================
Progress: 94


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if true then true else is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 95


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
Cond1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 8.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
Cond1 : string2 = string1
Case1 : string_eq (string1) (string2) = true
---------------------------------------
forall (string_list1:string list), true = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 96


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
Cond1 : string2 = string1
Case1 : string_eq (string1) (string2) = true
---------------------------------------
forall (string_list1:string list), true = true

1 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
Cond1 : string2 = string1
Case1 : string_eq (string1) (string2) = false
---------------------------------------
forall (string_list1:string list), true = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 2
induction string_list1(rank:16.)
rewrite <- Cond1 in goal at 0(rank:23.)
=================================================
Progress: 97


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
Cond1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 8.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
Cond1 : string2 = string1
Case1 : string_eq (string1) (string2) = true
---------------------------------------
forall (string_list1:string list), true = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 98


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
Cond1 : string2 = string1
Case1 : string_eq (string1) (string2) = true
---------------------------------------
forall (string_list1:string list), true = true

1 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string2) (string1) = true -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
Cond1 : string2 = string1
Case1 : string_eq (string1) (string2) = false
---------------------------------------
forall (string_list1:string list), true = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 2
induction string_list1(rank:16.)
rewrite <- Cond1 in goal at 0(rank:23.)
=================================================
Progress: 99


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
Cond1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if true then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
original goal
forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lemma
forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
tactics
assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
intro string1
intro string2
intro Cond1
rewrite string_refl in goal at 0
reflexivity
Deduplication: 0
Tactic List : 1
rewrite string_refl in goal at 0(rank:8.)
=================================================
Progress: 100


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if true then true else is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 101


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = if true then true else is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 16
Tactic List : 4
case string_eq (string1) (string2)(rank:8.)
rewrite IH1 in goal at 2(rank:23.)
rewrite IH1 in goal at 0(rank:23.)
rewrite IH1 in goal at 1(rank:23.)
=================================================
Progress: 102


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:8.)
=================================================
Progress: 103


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:16.)
rewrite Case2 in goal at 0(rank:24.)
=================================================
Progress: 104


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 9.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
Case2 : string_eq (string2) (string1) = true
---------------------------------------
true = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8.)
=================================================
Progress: 105


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
Case2 : string_eq (string2) (string1) = true
---------------------------------------
true = true

4 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
Case2 : string_eq (string2) (string1) = false
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite IH1 in goal at 0(rank:16.)
rewrite Case1 in goal at 0(rank:24.)
=================================================
Progress: 106


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 15.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
varExists (string1) (string_list2) = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:8.)
=================================================
Progress: 107


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
varExists (string1) (string_list2) = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:8.)
=================================================
Progress: 108


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Case2 in goal at 0(rank:24.)
rewrite <- IH1 in goal at 0(rank:24.)
=================================================
Progress: 109


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 15.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:8.)
=================================================
Progress: 110


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:8.)
=================================================
Progress: 111


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:16.)
rewrite Case2 in goal at 0(rank:24.)
=================================================
Progress: 112


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 15.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then true else varExists (string1) (string_list2) = varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string1)(rank:8.)
=================================================
Progress: 113


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then true else varExists (string1) (string_list2) = varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = true
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:8.)
=================================================
Progress: 114


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = true
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:8.)
rewrite <- IH1 in goal at 0(rank:24.)
=================================================
Progress: 115


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string2) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: true = varExists ("jou") ((Nil))
Prop: true = varExists ("hkt") ((Nil))
Prop: true = varExists ("qeh") (("qhu"::(Nil)))
asdf
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
Prop: true = varExists ("bjl") (("vtn"::(Nil)))
Prop: true = varExists ("rte") (("syt"::("xhw"::(Nil))))
Prop: true = varExists ("rfv") (("gmw"::("zfw"::("mhw"::(Nil)))))
asdf
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
validate generalize_common_subterm_goal
Prop: true = varExists ("tzo") (("cwj"::("qjw"::(Nil))))
Prop: true = varExists ("hxt") (("dvo"::(Nil)))
Prop: true = varExists ("stx") ((Nil))
asdf
=================================================
Progress: 116


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 15.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string1)(rank:8.)
=================================================
Progress: 117


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:8.)
=================================================
Progress: 118


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:8.)
rewrite IH1 in goal at 0(rank:16.)
=================================================
Progress: 119


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: true = is_mem_ta1 ((Nil)) ("zdf")
Prop: true = is_mem_ta1 ((Nil)) ("ngb")
Prop: true = is_mem_ta1 ((Nil)) ("rwf")
asdf
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
Prop: true = is_mem_ta1 ((Nil)) ("wiq")
Prop: true = is_mem_ta1 ((Nil)) ("vnu")
Prop: true = is_mem_ta1 ((Nil)) ("unk")
asdf
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
validate generalize_common_subterm_goal
Prop: true = is_mem_ta1 ((Nil)) ("cuh")
Prop: true = is_mem_ta1 ((Nil)) ("jfp")
Prop: true = is_mem_ta1 ((Nil)) ("kzz")
asdf
=================================================
Progress: 120


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 16.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:8.)
=================================================
Progress: 121


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string2) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite IH1 in goal at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: varExists ("xez") ((Nil)) = true
Prop: varExists ("csh") ((Nil)) = true
Prop: varExists ("yoe") (("xdl"::("sbc"::("kmz"::(Nil))))) = true
asdf
previous tactics
simpl in goal
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: varExists ("bgy") (("jjq"::(Nil))) = true
Prop: varExists ("zwy") ((Nil)) = true
Prop: varExists ("ady") ((Nil)) = true
asdf
previous tactics
simpl in goal
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
Prop: is_mem_ta1 ((Nil)) ("efx") = true
Prop: is_mem_ta1 (("xpj"::(Nil))) ("ymg") = true
Prop: is_mem_ta1 ((Nil)) ("zcp") = true
asdf
previous tactics
simpl in goal
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
Prop: is_mem_ta1 (("oko"::("xvt"::("nva"::(Nil))))) ("cge") = true
Prop: is_mem_ta1 ((Nil)) ("ggc") = true
Prop: is_mem_ta1 ((Nil)) ("poy") = true
asdf
=================================================
Progress: 122


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 16.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if string_eq (string2) (string1) then true else varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
case string_eq (string2) (string1)(rank:9.)
rewrite Case1 in goal at 2(rank:24.)
rewrite Case1 in goal at 0(rank:24.)
rewrite Case1 in goal at 1(rank:24.)
=================================================
Progress: 123


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if string_eq (string2) (string1) then true else varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 9.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
Case2 : string_eq (string2) (string1) = true
---------------------------------------
true = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:9.)
=================================================
Progress: 124


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
Case2 : string_eq (string2) (string1) = true
---------------------------------------
true = true

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 9.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
Case2 : string2 = string1
---------------------------------------
true = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 125


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 16.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:8.)
=================================================
Progress: 126


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string2) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
intro string1
intro string2
intro Cond1
rewrite string_refl in goal at 0
reflexivity
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite IH1 in goal at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: varExists ("gdh") ((Nil)) = true
Prop: varExists ("qic") ((Nil)) = true
Prop: varExists ("zku") ((Nil)) = true
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
intro string1
intro string2
intro Cond1
rewrite string_refl in goal at 0
reflexivity
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: varExists ("nwp") ((Nil)) = true
Prop: varExists ("nye") (("rxe"::(Nil))) = true
Prop: varExists ("cdk") ((Nil)) = true
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
intro string1
intro string2
intro Cond1
rewrite string_refl in goal at 0
reflexivity
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
Prop: is_mem_ta1 ((Nil)) ("ahj") = true
Prop: is_mem_ta1 (("tzw"::(Nil))) ("dcq") = true
Prop: is_mem_ta1 ((Nil)) ("uta") = true
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
intro string1
intro string2
intro Cond1
rewrite string_refl in goal at 0
reflexivity
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
Prop: is_mem_ta1 ((Nil)) ("ady") = true
Prop: is_mem_ta1 ((Nil)) ("aij") = true
Prop: is_mem_ta1 ((Nil)) ("yme") = true
asdf
=================================================
Progress: 127


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
Case2 : string_eq (string2) (string1) = false
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 16.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
Case2 : string_eq (string2) (string1) = false
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:8.)
=================================================
Progress: 128


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
Case2 : string_eq (string2) (string1) = false
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
Case2 : string_eq (string2) (string1) = false
---------------------------------------
varExists (string2) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
case string_eq (string2) (string1)
reflexivity
rewrite IH1 in goal at 0
rewrite Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: varExists ("fza") (("pic"::(Nil))) = true
Prop: varExists ("xgu") ((Nil)) = true
Prop: varExists ("mxd") ((Nil)) = true
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
case string_eq (string2) (string1)
reflexivity
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: varExists ("zbl") ((Nil)) = true
Prop: varExists ("vch") ((Nil)) = true
Prop: varExists ("ill") ((Nil)) = true
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
case string_eq (string2) (string1)
reflexivity
validate generalize_common_subterm_goal
Prop: is_mem_ta1 ((Nil)) ("mod") = true
Prop: is_mem_ta1 ((Nil)) ("vre") = true
Prop: is_mem_ta1 ((Nil)) ("sxf") = true
asdf
=================================================
Progress: 129


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 16.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:8.)
=================================================
Progress: 130


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string2) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite IH1 in goal at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: varExists ("qip") ((Nil)) = true
Prop: varExists ("trk") ((Nil)) = true
Prop: varExists ("uti") ((Nil)) = true
asdf
previous tactics
simpl in goal
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: varExists ("kua") ((Nil)) = true
Prop: varExists ("puw") ((Nil)) = true
Prop: varExists ("lqe") ((Nil)) = true
asdf
previous tactics
simpl in goal
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
Prop: is_mem_ta1 (("yxj"::("glf"::("jrv"::(Nil))))) ("xie") = true
Prop: is_mem_ta1 ((Nil)) ("vba") = true
Prop: is_mem_ta1 (("wnl"::(Nil))) ("bgo") = true
asdf
previous tactics
simpl in goal
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
Prop: is_mem_ta1 ((Nil)) ("bwv") = true
Prop: is_mem_ta1 ((Nil)) ("ovu") = true
Prop: is_mem_ta1 (("idb"::(Nil))) ("ido") = true
asdf
=================================================
Progress: 131


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 16.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:8.)
=================================================
Progress: 132


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string2) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite IH1 in goal at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: true = varExists ("qhd") ((Nil))
Prop: true = varExists ("cyq") ((Nil))
Prop: true = varExists ("tly") ((Nil))
asdf
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: true = varExists ("kki") (("tcu"::(Nil)))
Prop: true = varExists ("ujv") (("wgp"::(Nil)))
Prop: true = varExists ("ebo") (("nhv"::(Nil)))
asdf
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
Prop: true = is_mem_ta1 ((Nil)) ("cee")
Prop: true = is_mem_ta1 (("vkv"::(Nil))) ("wxz")
Prop: true = is_mem_ta1 ((Nil)) ("pwt")
asdf
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
validate generalize_common_subterm_goal
Prop: true = is_mem_ta1 ((Nil)) ("vky")
Prop: true = is_mem_ta1 ((Nil)) ("jli")
Prop: true = is_mem_ta1 ((Nil)) ("xbk")
asdf
=================================================
Progress: 133


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
varExists (string1) (string_list2) = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 23.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:8.)
=================================================
Progress: 134


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:8.)
=================================================
Progress: 135


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:16.)
rewrite Case2 in goal at 0(rank:24.)
=================================================
Progress: 136


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 16.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:8.)
=================================================
Progress: 137


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string2) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)
reflexivity
reflexivity
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite IH1 in goal at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: varExists ("qch") ((Nil)) = true
Prop: varExists ("ufd") ((Nil)) = true
Prop: varExists ("rjc") ((Nil)) = true
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)
reflexivity
reflexivity
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: varExists ("pvl") ((Nil)) = true
Prop: varExists ("nfc") ((Nil)) = true
Prop: varExists ("zzw") ((Nil)) = true
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)
reflexivity
reflexivity
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
Prop: is_mem_ta1 ((Nil)) ("epf") = true
Prop: is_mem_ta1 (("sem"::(Nil))) ("uqm") = true
Prop: is_mem_ta1 (("qfc"::("rnr"::("dar"::(Nil))))) ("iqq") = true
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)
reflexivity
reflexivity
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
Prop: is_mem_ta1 ((Nil)) ("ogi") = true
Prop: is_mem_ta1 ((Nil)) ("ent") = true
Prop: is_mem_ta1 ((Nil)) ("qzb") = true
asdf
=================================================
Progress: 138


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
varExists (string1) (string_list2) = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 23.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:8.)
=================================================
Progress: 139


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:8.)
=================================================
Progress: 140


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:16.)
rewrite Case2 in goal at 0(rank:24.)
=================================================
Progress: 141


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 16.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:8.)
=================================================
Progress: 142


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string2) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)
reflexivity
reflexivity
rewrite <- IH1 in goal at 1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite IH1 in goal at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: varExists ("ojr") (("moh"::(Nil))) = true
Prop: varExists ("gyr") (("ofo"::(Nil))) = true
Prop: varExists ("ucd") ((Nil)) = true
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)
reflexivity
reflexivity
rewrite <- IH1 in goal at 1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: varExists ("aux") (("goo"::("anx"::("bdt"::("akt"::("quw"::(Nil))))))) = true
Prop: varExists ("tug") ((Nil)) = true
Prop: varExists ("iol") ((Nil)) = true
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)
reflexivity
reflexivity
rewrite <- IH1 in goal at 1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
Prop: is_mem_ta1 ((Nil)) ("zsm") = true
Prop: is_mem_ta1 (("jct"::("mat"::("emk"::(Nil))))) ("rsc") = true
Prop: is_mem_ta1 ((Nil)) ("xfe") = true
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)
reflexivity
reflexivity
rewrite <- IH1 in goal at 1
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
Prop: is_mem_ta1 (("ilh"::("omt"::(Nil)))) ("rlx") = true
Prop: is_mem_ta1 ((Nil)) ("xcj") = true
Prop: is_mem_ta1 (("qhx"::(Nil))) ("drp") = true
asdf
=================================================
Progress: 143


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
varExists (string1) (string_list2) = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 23.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
varExists (string1) (string_list2) = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:8.)
=================================================
Progress: 144


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
varExists (string1) (string_list2) = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:8.)
=================================================
Progress: 145


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Case2 in goal at 0(rank:24.)
rewrite <- IH1 in goal at 0(rank:24.)
=================================================
Progress: 146


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 23.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
varExists (string1) (string_list2) = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:8.)
=================================================
Progress: 147


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
varExists (string1) (string_list2) = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:8.)
=================================================
Progress: 148


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Case2 in goal at 0(rank:24.)
rewrite <- IH1 in goal at 0(rank:24.)
=================================================
Progress: 149


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 1(rank : 23.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
varExists (string1) (string_list2) = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:8.)
=================================================
Progress: 150


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
varExists (string1) (string_list2) = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:8.)
=================================================
Progress: 151


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Case2 in goal at 0(rank:24.)
rewrite <- IH1 in goal at 0(rank:24.)
=================================================
Progress: 152


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 23.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:8.)
=================================================
Progress: 153


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string1) (string2) then true else varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:8.)
=================================================
Progress: 154


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:16.)
rewrite Case2 in goal at 0(rank:24.)
=================================================
Progress: 155


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 16.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:8.)
=================================================
Progress: 156


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string2) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
intro string1
intro string2
intro Cond1
rewrite string_refl in goal at 0
reflexivity
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 2
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite IH1 in goal at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: varExists ("mrl") ((Nil)) = true
Prop: varExists ("qex") (("ppj"::(Nil))) = true
Prop: varExists ("mvl") ((Nil)) = true
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
intro string1
intro string2
intro Cond1
rewrite string_refl in goal at 0
reflexivity
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 2
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: varExists ("gam") (("emz"::(Nil))) = true
Prop: varExists ("cnw") (("tpf"::("djv"::(Nil)))) = true
Prop: varExists ("diu") ((Nil)) = true
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
intro string1
intro string2
intro Cond1
rewrite string_refl in goal at 0
reflexivity
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 2
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
Prop: is_mem_ta1 ((Nil)) ("xqd") = true
Prop: is_mem_ta1 (("khf"::(Nil))) ("dal") = true
Prop: is_mem_ta1 ((Nil)) ("xvh") = true
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
intro string1
intro string2
intro Cond1
rewrite string_refl in goal at 0
reflexivity
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 2
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
Prop: is_mem_ta1 ((Nil)) ("vhm") = true
Prop: is_mem_ta1 ((Nil)) ("ylj") = true
Prop: is_mem_ta1 ((Nil)) ("sho") = true
asdf
=================================================
Progress: 157


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 24.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: is_mem_ta1 (("dqx"::(Nil))) ("zsa") = true
Prop: is_mem_ta1 ((Nil)) ("jmo") = true
Prop: is_mem_ta1 ((Nil)) ("ypb") = true
asdf
previous tactics
simpl in goal
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
Prop: is_mem_ta1 ((Nil)) ("ljo") = true
Prop: is_mem_ta1 (("mmx"::(Nil))) ("evp") = true
Prop: is_mem_ta1 ((Nil)) ("mbk") = true
asdf
previous tactics
simpl in goal
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
Prop: is_mem_ta1 ((Nil)) ("kfa") = true
Prop: is_mem_ta1 ((Nil)) ("crf") = true
Prop: is_mem_ta1 ((Nil)) ("fia") = true
asdf
=================================================
Progress: 158


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 24.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:8.)
=================================================
Progress: 159


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite <- IH1 in goal at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: true = is_mem_ta1 (("kjj"::("xsc"::("gyz"::("bwk"::(Nil)))))) ("lvs")
Prop: true = is_mem_ta1 (("qgh"::(Nil))) ("vwy")
Prop: true = is_mem_ta1 ((Nil)) ("mya")
asdf
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: true = is_mem_ta1 ((Nil)) ("oac")
Prop: true = is_mem_ta1 ((Nil)) ("lek")
Prop: true = is_mem_ta1 ((Nil)) ("hok")
asdf
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
Prop: true = varExists ("usg") ((Nil))
Prop: true = varExists ("bib") (("ckh"::("mvo"::(Nil))))
Prop: true = varExists ("gsc") ((Nil))
asdf
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
case string_eq (string2) (string1)
validate generalize_common_subterm_goal
Prop: true = varExists ("nfr") (("pim"::("ezd"::("aah"::(Nil)))))
Prop: true = varExists ("ucz") ((Nil))
Prop: true = varExists ("uit") ((Nil))
asdf
=================================================
Progress: 160


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if string_eq (string2) (string1) then true else varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 24.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if string_eq (string2) (string2) then true else varExists (string2) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:8.)
=================================================
Progress: 161


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if string_eq (string2) (string2) then true else varExists (string2) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if true then true else varExists (string2) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
validate generalize_common_subterm_goal
Prop: if true then true else varExists ("emj") ((Nil)) = true
Prop: if true then true else varExists ("keu") ((Nil)) = true
Prop: if true then true else varExists ("ycy") ((Nil)) = true
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: if string_eq ("ehe") ("ehe") then true else varExists ("ehe") ((Nil)) = true
Prop: if string_eq ("tji") ("tji") then true else varExists ("tji") ((Nil)) = true
Prop: if string_eq ("zvo") ("zvo") then true else varExists ("zvo") ((Nil)) = true
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
validate generalize_common_subterm_goal
Prop: if string_eq ("ivv") ("khh") then true else varExists ("khh") (("vdd"::(Nil))) = true
Prop: if string_eq ("dbc") ("axr") then true else varExists ("axr") ((Nil)) = true
Prop: if string_eq ("ozz") ("iah") then true else varExists ("iah") ((Nil)) = true
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
Prop: if string_eq ("qda") ("jap") then true else varExists ("jap") ((Nil)) = true
Prop: if string_eq ("acm") ("bkz") then true else varExists ("bkz") (("ojw"::("dia"::("bua"::("rbu"::(Nil)))))) = true
Prop: if string_eq ("sbf") ("sdh") then true else varExists ("sdh") (("fkf"::(Nil))) = true
Lemma List
forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true
End of Lemma List


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
if string_eq (string2) (string1) then true else varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true
End of Lemma List


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if string_eq (string2) (string1) then true else varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (string1:string) (string_list1:string list), if string_eq (string1) (string1) then true else varExists (string1) (string_list1) = true
End of Lemma List


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if string_eq (string2) (string2) then true else varExists (string2) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true
End of Lemma List


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if true then true else varExists (string2) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 162


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
if string_eq (string2) (string1) then true else varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7.)
=================================================
Progress: 163


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if string_eq (string2) (string1) then true else varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7.)
=================================================
Progress: 164


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if string_eq (string2) (string2) then true else varExists (string2) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string_list1:string list), if string_eq (string1) (string1) then true else varExists (string1) (string_list1) = true(rank : 0.)


1st goal of : forall (string1:string) (string_list1:string list), if string_eq (string1) (string1) then true else varExists (string1) (string_list1) = true

---------------------------------------
forall (string1:string) (string_list1:string list), if string_eq (string1) (string1) then true else varExists (string1) (string_list1) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7.)
=================================================
Progress: 165


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if true then true else varExists (string2) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true(rank : 0.)


1st goal of : forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true

---------------------------------------
forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8.)
=================================================
Progress: 166


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:7.)
=================================================
Progress: 167


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string1 = string2 -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:7.)
=================================================
Progress: 168


1st goal of : forall (string1:string) (string_list1:string list), if string_eq (string1) (string1) then true else varExists (string1) (string_list1) = true

---------------------------------------
forall (string1:string) (string_list1:string list), if string_eq (string1) (string1) then true else varExists (string1) (string_list1) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7.)


1st goal of : forall (string1:string) (string_list1:string list), if string_eq (string1) (string1) then true else varExists (string1) (string_list1) = true
string1 : string
---------------------------------------
forall (string_list1:string list), if string_eq (string1) (string1) then true else varExists (string1) (string_list1) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:7.)
=================================================
Progress: 169


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 170


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string1 = string2 -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), string1 = string2 -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 171


1st goal of : forall (string1:string) (string_list1:string list), if string_eq (string1) (string1) then true else varExists (string1) (string_list1) = true
string1 : string
---------------------------------------
forall (string_list1:string list), if string_eq (string1) (string1) then true else varExists (string1) (string_list1) = true

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 7.)


1st goal of : forall (string1:string) (string_list1:string list), if string_eq (string1) (string1) then true else varExists (string1) (string_list1) = true
string1 : string
---------------------------------------
forall (string_list1:string list), if true then true else varExists (string1) (string_list1) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8.)
=================================================
Progress: 172


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true
string1 : string
string2 : string
Cond1 : string_eq (string1) (string2) = true
---------------------------------------
forall (string_list1:string list), if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Cond1 at 0(rank:7.)
=================================================
Progress: 173


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), string1 = string2 -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true
string1 : string
string2 : string
Cond1 : string1 = string2
---------------------------------------
forall (string_list1:string list), if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
case string_eq (string2) (string1)(rank:8.)
rewrite Cond1 in goal at 0(rank:23.)
rewrite Cond1 in goal at 1(rank:23.)
rewrite Cond1 in goal at 2(rank:23.)
rewrite <- Cond1 in goal at 0(rank:23.)
=================================================
Progress: 174


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true
string1 : string
string2 : string
Cond1 : string_eq (string1) (string2) = true
---------------------------------------
forall (string_list1:string list), if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Cond1 at 0(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true
string1 : string
string2 : string
Cond1 : string1 = string2
---------------------------------------
forall (string_list1:string list), if string_eq (string2) (string1) then true else varExists (string1) (string_list1) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
case string_eq (string2) (string1)(rank:8.)
rewrite Cond1 in goal at 0(rank:23.)
rewrite Cond1 in goal at 1(rank:23.)
rewrite Cond1 in goal at 2(rank:23.)
rewrite <- Cond1 in goal at 0(rank:23.)
=================================================
Progress: 175


1st goal of : forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true

---------------------------------------
forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true

0 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if true then true else varExists (string2) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
original goal
forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lemma
forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true
tactics
assert forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true
reflexivity
Deduplication: 0
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 176


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if true then true else varExists (string2) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then true else varExists (string1) (string_list2) = varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 16
Tactic List : 4
case string_eq (string2) (string1)(rank:8.)
rewrite <- IH1 in goal at 2(rank:23.)
rewrite <- IH1 in goal at 0(rank:23.)
rewrite <- IH1 in goal at 1(rank:23.)
=================================================
Progress: 177


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then true else varExists (string1) (string_list2) = varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = true
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:8.)
=================================================
Progress: 178


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = true
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:8.)
rewrite <- IH1 in goal at 0(rank:24.)
=================================================
Progress: 179


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string2) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true
reflexivity
reflexivity
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: true = varExists ("zlp") ((Nil))
Prop: true = varExists ("vop") ((Nil))
Prop: true = varExists ("bmc") (("try"::(Nil)))
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true
reflexivity
reflexivity
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
Prop: true = varExists ("och") ((Nil))
Prop: true = varExists ("knj") ((Nil))
Prop: true = varExists ("jng") ((Nil))
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true
reflexivity
reflexivity
case string_eq (string2) (string1)
validate generalize_common_subterm_goal
Prop: true = varExists ("mvf") ((Nil))
Prop: true = varExists ("htl") ((Nil))
Prop: true = varExists ("pej") ((Nil))
asdf
=================================================
Progress: 180


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then true else varExists (string1) (string_list2) = varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 23.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string1)(rank:8.)
=================================================
Progress: 181


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:8.)
=================================================
Progress: 182


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:8.)
rewrite IH1 in goal at 0(rank:16.)
=================================================
Progress: 183


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true
reflexivity
reflexivity
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: true = is_mem_ta1 (("dgq"::(Nil))) ("mlu")
Prop: true = is_mem_ta1 ((Nil)) ("uwx")
Prop: true = is_mem_ta1 ((Nil)) ("gqc")
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true
reflexivity
reflexivity
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
Prop: true = is_mem_ta1 (("uet"::(Nil))) ("gws")
Prop: true = is_mem_ta1 ((Nil)) ("wje")
Prop: true = is_mem_ta1 ((Nil)) ("bbw")
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true
reflexivity
reflexivity
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
validate generalize_common_subterm_goal
Prop: true = is_mem_ta1 (("gvq"::("ioi"::(Nil)))) ("vgl")
Prop: true = is_mem_ta1 (("dii"::("olu"::(Nil)))) ("yen")
Prop: true = is_mem_ta1 ((Nil)) ("vbt")
asdf
=================================================
Progress: 184


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 16.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:8.)
=================================================
Progress: 185


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string2) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true
reflexivity
reflexivity
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite IH1 in goal at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: true = varExists ("ixq") (("rgz"::("qvg"::(Nil))))
Prop: true = varExists ("psn") ((Nil))
Prop: true = varExists ("uxx") ((Nil))
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true
reflexivity
reflexivity
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: true = varExists ("dnx") ((Nil))
Prop: true = varExists ("azx") ((Nil))
Prop: true = varExists ("avi") ((Nil))
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true
reflexivity
reflexivity
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
Prop: true = is_mem_ta1 ((Nil)) ("zst")
Prop: true = is_mem_ta1 (("eos"::(Nil))) ("rur")
Prop: true = is_mem_ta1 ((Nil)) ("ohe")
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true
reflexivity
reflexivity
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
validate generalize_common_subterm_goal
Prop: true = is_mem_ta1 ((Nil)) ("zjn")
Prop: true = is_mem_ta1 ((Nil)) ("szt")
Prop: true = is_mem_ta1 ((Nil)) ("dpx")
asdf
=================================================
Progress: 186


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then true else varExists (string1) (string_list2) = varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 23.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string1)(rank:8.)
=================================================
Progress: 187


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = true
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:8.)
=================================================
Progress: 188


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = true
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:8.)
rewrite <- IH1 in goal at 0(rank:24.)
=================================================
Progress: 189


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string2) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true
reflexivity
reflexivity
rewrite <- IH1 in goal at 1
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: true = varExists ("kay") (("nri"::(Nil)))
Prop: true = varExists ("bdq") (("sug"::(Nil)))
Prop: true = varExists ("xyh") ((Nil))
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true
reflexivity
reflexivity
rewrite <- IH1 in goal at 1
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
Prop: true = varExists ("khz") (("aan"::(Nil)))
Prop: true = varExists ("yts") ((Nil))
Prop: true = varExists ("cav") ((Nil))
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true
reflexivity
reflexivity
rewrite <- IH1 in goal at 1
case string_eq (string2) (string1)
validate generalize_common_subterm_goal
Prop: true = varExists ("dsw") ((Nil))
Prop: true = varExists ("had") ((Nil))
Prop: true = varExists ("mbw") ((Nil))
asdf
=================================================
Progress: 190


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then true else varExists (string1) (string_list2) = varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 23.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then true else varExists (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string1)(rank:8.)
=================================================
Progress: 191


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then true else varExists (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:8.)
=================================================
Progress: 192


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:8.)
rewrite IH1 in goal at 0(rank:16.)
=================================================
Progress: 193


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true
reflexivity
reflexivity
rewrite <- IH1 in goal at 2
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: true = is_mem_ta1 ((Nil)) ("nzg")
Prop: true = is_mem_ta1 ((Nil)) ("zlg")
Prop: true = is_mem_ta1 ((Nil)) ("dhf")
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true
reflexivity
reflexivity
rewrite <- IH1 in goal at 2
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
Prop: true = is_mem_ta1 (("mmp"::(Nil))) ("dlr")
Prop: true = is_mem_ta1 ((Nil)) ("kor")
Prop: true = is_mem_ta1 (("shg"::("qzd"::(Nil)))) ("nxr")
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true
reflexivity
reflexivity
rewrite <- IH1 in goal at 2
case string_eq (string2) (string1)
validate generalize_common_subterm_goal
Prop: true = is_mem_ta1 ((Nil)) ("myf")
Prop: true = is_mem_ta1 ((Nil)) ("cgc")
Prop: true = is_mem_ta1 ((Nil)) ("ckq")
asdf
=================================================
Progress: 194


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 16.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:8.)
=================================================
Progress: 195


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string2) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true
reflexivity
reflexivity
rewrite <- IH1 in goal at 2
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite IH1 in goal at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: true = varExists ("bjb") ((Nil))
Prop: true = varExists ("wvb") ((Nil))
Prop: true = varExists ("cmw") ((Nil))
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true
reflexivity
reflexivity
rewrite <- IH1 in goal at 2
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: true = varExists ("svx") ((Nil))
Prop: true = varExists ("lcv") ((Nil))
Prop: true = varExists ("wlt") ((Nil))
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true
reflexivity
reflexivity
rewrite <- IH1 in goal at 2
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
Prop: true = is_mem_ta1 (("onu"::(Nil))) ("qmn")
Prop: true = is_mem_ta1 ((Nil)) ("mal")
Prop: true = is_mem_ta1 (("cly"::("rfe"::("tio"::("dsf"::(Nil)))))) ("muf")
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true
reflexivity
reflexivity
rewrite <- IH1 in goal at 2
case string_eq (string2) (string1)
validate generalize_common_subterm_goal
Prop: true = is_mem_ta1 ((Nil)) ("tkn")
Prop: true = is_mem_ta1 (("fxw"::("rvb"::("erv"::(Nil))))) ("gpp")
Prop: true = is_mem_ta1 ((Nil)) ("iqx")
asdf
=================================================
Progress: 196


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 24.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string2) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)
reflexivity
reflexivity
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: varExists ("hvn") ((Nil)) = true
Prop: varExists ("ssb") ((Nil)) = true
Prop: varExists ("yei") ((Nil)) = true
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)
reflexivity
reflexivity
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
Prop: varExists ("xcr") ((Nil)) = true
Prop: varExists ("yxm") (("dtv"::(Nil))) = true
Prop: varExists ("qaw") (("wyt"::("zat"::("lwg"::("ddk"::("puk"::(Nil))))))) = true
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)
reflexivity
reflexivity
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
Prop: varExists ("amy") ((Nil)) = true
Prop: varExists ("urr") ((Nil)) = true
Prop: varExists ("zfn") ((Nil)) = true
asdf
=================================================
Progress: 197


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 24.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:8.)
=================================================
Progress: 198


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)
reflexivity
reflexivity
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- IH1 in goal at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: is_mem_ta1 ((Nil)) ("kbw") = true
Prop: is_mem_ta1 ((Nil)) ("tvb") = true
Prop: is_mem_ta1 (("cam"::(Nil))) ("xus") = true
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)
reflexivity
reflexivity
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: is_mem_ta1 (("hpp"::("kin"::("cls"::(Nil))))) ("nnt") = true
Prop: is_mem_ta1 ((Nil)) ("tst") = true
Prop: is_mem_ta1 ((Nil)) ("hda") = true
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)
reflexivity
reflexivity
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
Prop: varExists ("lrh") (("vow"::(Nil))) = true
Prop: varExists ("wpp") ((Nil)) = true
Prop: varExists ("enq") ((Nil)) = true
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)
reflexivity
reflexivity
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
Prop: varExists ("vnn") ((Nil)) = true
Prop: varExists ("zfn") ((Nil)) = true
Prop: varExists ("xzq") ((Nil)) = true
asdf
=================================================
Progress: 199


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 24.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if string_eq (string2) (string2) then true else is_mem_ta1 (string_list2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:8.)
=================================================
Progress: 200


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if string_eq (string2) (string2) then true else is_mem_ta1 (string_list2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if true then true else is_mem_ta1 (string_list2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
validate generalize_common_subterm_goal
Prop: if true then true else is_mem_ta1 ((Nil)) ("iyh") = true
Prop: if true then true else is_mem_ta1 (("obo"::("zxx"::(Nil)))) ("pyq") = true
Prop: if true then true else is_mem_ta1 (("igz"::(Nil))) ("ilv") = true
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
validate generalize_common_subterm_goal
Prop: if string_eq ("fcv") ("fcv") then true else is_mem_ta1 ((Nil)) ("fcv") = true
Prop: if string_eq ("eme") ("eme") then true else is_mem_ta1 ((Nil)) ("eme") = true
Prop: if string_eq ("xye") ("xye") then true else is_mem_ta1 ((Nil)) ("xye") = true
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
validate generalize_common_subterm_goal
Prop: if string_eq ("thx") ("lxe") then true else is_mem_ta1 (("yyg"::("weo"::(Nil)))) ("lxe") = true
Prop: if string_eq ("rpf") ("ryc") then true else is_mem_ta1 (("zrx"::("etr"::(Nil)))) ("ryc") = true
Prop: if string_eq ("lxe") ("bpg") then true else is_mem_ta1 ((Nil)) ("bpg") = true
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
Prop: if string_eq ("exe") ("mdq") then true else is_mem_ta1 ((Nil)) ("mdq") = true
Prop: if string_eq ("vlz") ("qxy") then true else is_mem_ta1 ((Nil)) ("qxy") = true
Prop: if string_eq ("yms") ("vgu") then true else is_mem_ta1 (("qux"::("lkf"::(Nil)))) ("vgu") = true
Lemma List
forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true
End of Lemma List


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true
End of Lemma List


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (string1:string) (string_list1:string list), if string_eq (string1) (string1) then true else is_mem_ta1 (string_list1) (string1) = true
End of Lemma List


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if string_eq (string2) (string2) then true else is_mem_ta1 (string_list2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true
End of Lemma List


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if true then true else is_mem_ta1 (string_list2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 201


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7.)
=================================================
Progress: 202


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true(rank : 0.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7.)
=================================================
Progress: 203


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if string_eq (string2) (string2) then true else is_mem_ta1 (string_list2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string_list1:string list), if string_eq (string1) (string1) then true else is_mem_ta1 (string_list1) (string1) = true(rank : 0.)


1st goal of : forall (string1:string) (string_list1:string list), if string_eq (string1) (string1) then true else is_mem_ta1 (string_list1) (string1) = true

---------------------------------------
forall (string1:string) (string_list1:string list), if string_eq (string1) (string1) then true else is_mem_ta1 (string_list1) (string1) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7.)
=================================================
Progress: 204


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if true then true else is_mem_ta1 (string_list2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true(rank : 0.)


1st goal of : forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true

---------------------------------------
forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8.)
=================================================
Progress: 205


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:7.)
=================================================
Progress: 206


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string1 = string2 -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:7.)
=================================================
Progress: 207


1st goal of : forall (string1:string) (string_list1:string list), if string_eq (string1) (string1) then true else is_mem_ta1 (string_list1) (string1) = true

---------------------------------------
forall (string1:string) (string_list1:string list), if string_eq (string1) (string1) then true else is_mem_ta1 (string_list1) (string1) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7.)


1st goal of : forall (string1:string) (string_list1:string list), if string_eq (string1) (string1) then true else is_mem_ta1 (string_list1) (string1) = true
string1 : string
---------------------------------------
forall (string_list1:string list), if string_eq (string1) (string1) then true else is_mem_ta1 (string_list1) (string1) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:7.)
=================================================
Progress: 208


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 209


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string1 = string2 -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), string1 = string2 -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 210


1st goal of : forall (string1:string) (string_list1:string list), if string_eq (string1) (string1) then true else is_mem_ta1 (string_list1) (string1) = true
string1 : string
---------------------------------------
forall (string_list1:string list), if string_eq (string1) (string1) then true else is_mem_ta1 (string_list1) (string1) = true

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 7.)


1st goal of : forall (string1:string) (string_list1:string list), if string_eq (string1) (string1) then true else is_mem_ta1 (string_list1) (string1) = true
string1 : string
---------------------------------------
forall (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8.)
=================================================
Progress: 211


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true
string1 : string
string2 : string
Cond1 : string_eq (string1) (string2) = true
---------------------------------------
forall (string_list1:string list), if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Cond1 at 0(rank:7.)
=================================================
Progress: 212


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), string1 = string2 -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true
string1 : string
string2 : string
Cond1 : string1 = string2
---------------------------------------
forall (string_list1:string list), if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
case string_eq (string2) (string1)(rank:8.)
rewrite Cond1 in goal at 0(rank:23.)
rewrite Cond1 in goal at 1(rank:23.)
rewrite Cond1 in goal at 2(rank:23.)
rewrite <- Cond1 in goal at 0(rank:23.)
=================================================
Progress: 213


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true
string1 : string
string2 : string
Cond1 : string_eq (string1) (string2) = true
---------------------------------------
forall (string_list1:string list), if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Cond1 at 0(rank : 7.)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = true -> if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true
string1 : string
string2 : string
Cond1 : string1 = string2
---------------------------------------
forall (string_list1:string list), if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
case string_eq (string2) (string1)(rank:8.)
rewrite Cond1 in goal at 0(rank:23.)
rewrite Cond1 in goal at 1(rank:23.)
rewrite Cond1 in goal at 2(rank:23.)
rewrite <- Cond1 in goal at 0(rank:23.)
=================================================
Progress: 214


1st goal of : forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true

---------------------------------------
forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true

0 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if true then true else is_mem_ta1 (string_list2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
original goal
forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lemma
forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true
tactics
assert forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true
reflexivity
Deduplication: 0
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 215


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string1 = string2
---------------------------------------
if true then true else is_mem_ta1 (string_list2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 17
Tactic List : 4
case string_eq (string2) (string1)(rank:8.)
rewrite IH1 in goal at 2(rank:23.)
rewrite IH1 in goal at 0(rank:23.)
rewrite IH1 in goal at 1(rank:23.)
=================================================
Progress: 216


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:8.)
=================================================
Progress: 217


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:8.)
rewrite IH1 in goal at 0(rank:16.)
=================================================
Progress: 218


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true
reflexivity
reflexivity
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: true = is_mem_ta1 (("mth"::(Nil))) ("khx")
Prop: true = is_mem_ta1 ((Nil)) ("eic")
Prop: true = is_mem_ta1 ((Nil)) ("kop")
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true
reflexivity
reflexivity
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
Prop: true = is_mem_ta1 ((Nil)) ("xzt")
Prop: true = is_mem_ta1 ((Nil)) ("fvm")
Prop: true = is_mem_ta1 ((Nil)) ("kgf")
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true
reflexivity
reflexivity
case string_eq (string2) (string1)
validate generalize_common_subterm_goal
Prop: true = is_mem_ta1 ((Nil)) ("evg")
Prop: true = is_mem_ta1 (("nyy"::("dhu"::("mqh"::(Nil))))) ("rdk")
Prop: true = is_mem_ta1 ((Nil)) ("sfl")
asdf
=================================================
Progress: 219


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 16.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:8.)
=================================================
Progress: 220


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string2) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true
reflexivity
reflexivity
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite IH1 in goal at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: true = varExists ("esl") (("bvf"::("ies"::("gvj"::("ozg"::("hdo"::("pkw"::(Nil))))))))
Prop: true = varExists ("lrq") ((Nil))
Prop: true = varExists ("nug") ((Nil))
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true
reflexivity
reflexivity
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: true = varExists ("ylk") ((Nil))
Prop: true = varExists ("mkl") ((Nil))
Prop: true = varExists ("gnb") ((Nil))
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true
reflexivity
reflexivity
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
Prop: true = is_mem_ta1 ((Nil)) ("osa")
Prop: true = is_mem_ta1 ((Nil)) ("bxc")
Prop: true = is_mem_ta1 ((Nil)) ("vqi")
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true
reflexivity
reflexivity
case string_eq (string2) (string1)
validate generalize_common_subterm_goal
Prop: true = is_mem_ta1 ((Nil)) ("lya")
Prop: true = is_mem_ta1 ((Nil)) ("tir")
Prop: true = is_mem_ta1 ((Nil)) ("kel")
asdf
=================================================
Progress: 221


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 23.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then true else varExists (string1) (string_list2) = varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string1)(rank:8.)
=================================================
Progress: 222


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then true else varExists (string1) (string_list2) = varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = true
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:8.)
=================================================
Progress: 223


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = true
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:8.)
rewrite <- IH1 in goal at 0(rank:24.)
=================================================
Progress: 224


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string2) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true
reflexivity
reflexivity
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: true = varExists ("goc") ((Nil))
Prop: true = varExists ("gdz") ((Nil))
Prop: true = varExists ("fpy") ((Nil))
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true
reflexivity
reflexivity
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
Prop: true = varExists ("mol") ((Nil))
Prop: true = varExists ("stq") ((Nil))
Prop: true = varExists ("ouz") (("uxm"::(Nil)))
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true
reflexivity
reflexivity
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
validate generalize_common_subterm_goal
Prop: true = varExists ("vyj") ((Nil))
Prop: true = varExists ("xbu") (("vcz"::(Nil)))
Prop: true = varExists ("vda") ((Nil))
asdf
=================================================
Progress: 225


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 1(rank : 23.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then true else varExists (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string1)(rank:8.)
=================================================
Progress: 226


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then true else varExists (string1) (string_list2) = is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:8.)
=================================================
Progress: 227


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:8.)
rewrite IH1 in goal at 0(rank:16.)
=================================================
Progress: 228


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true
reflexivity
reflexivity
rewrite IH1 in goal at 1
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: true = is_mem_ta1 ((Nil)) ("jwj")
Prop: true = is_mem_ta1 ((Nil)) ("bot")
Prop: true = is_mem_ta1 (("dam"::("csl"::(Nil)))) ("tta")
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true
reflexivity
reflexivity
rewrite IH1 in goal at 1
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
Prop: true = is_mem_ta1 ((Nil)) ("zuc")
Prop: true = is_mem_ta1 ((Nil)) ("qyt")
Prop: true = is_mem_ta1 (("iqu"::(Nil))) ("dft")
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true
reflexivity
reflexivity
rewrite IH1 in goal at 1
case string_eq (string2) (string1)
validate generalize_common_subterm_goal
Prop: true = is_mem_ta1 ((Nil)) ("gia")
Prop: true = is_mem_ta1 ((Nil)) ("igr")
Prop: true = is_mem_ta1 ((Nil)) ("ufg")
asdf
=================================================
Progress: 229


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 16.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:8.)
=================================================
Progress: 230


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string2) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true
reflexivity
reflexivity
rewrite IH1 in goal at 1
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite IH1 in goal at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: true = varExists ("nmu") (("upm"::(Nil)))
Prop: true = varExists ("sce") (("fzk"::("vnp"::(Nil))))
Prop: true = varExists ("klh") ((Nil))
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true
reflexivity
reflexivity
rewrite IH1 in goal at 1
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: true = varExists ("bwc") ((Nil))
Prop: true = varExists ("yyg") ((Nil))
Prop: true = varExists ("lwv") ((Nil))
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true
reflexivity
reflexivity
rewrite IH1 in goal at 1
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
Prop: true = is_mem_ta1 ((Nil)) ("efq")
Prop: true = is_mem_ta1 ((Nil)) ("igp")
Prop: true = is_mem_ta1 (("ovg"::(Nil))) ("shl")
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true
reflexivity
reflexivity
rewrite IH1 in goal at 1
case string_eq (string2) (string1)
validate generalize_common_subterm_goal
Prop: true = is_mem_ta1 ((Nil)) ("oke")
Prop: true = is_mem_ta1 ((Nil)) ("jyf")
Prop: true = is_mem_ta1 (("yjd"::(Nil))) ("cfd")
asdf
=================================================
Progress: 231


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 23.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string1)(rank:8.)
=================================================
Progress: 232


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = true
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:8.)
=================================================
Progress: 233


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string2) (string1) = true
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:8.)
rewrite <- IH1 in goal at 0(rank:24.)
=================================================
Progress: 234


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string2) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true
reflexivity
reflexivity
rewrite IH1 in goal at 2
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: true = varExists ("vex") ((Nil))
Prop: true = varExists ("tbz") ((Nil))
Prop: true = varExists ("txq") ((Nil))
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true
reflexivity
reflexivity
rewrite IH1 in goal at 2
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
Prop: true = varExists ("usv") (("gdg"::("fxu"::(Nil))))
Prop: true = varExists ("vuf") ((Nil))
Prop: true = varExists ("chq") (("tue"::(Nil)))
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true
reflexivity
reflexivity
rewrite IH1 in goal at 2
case string_eq (string2) (string1)
validate generalize_common_subterm_goal
Prop: true = varExists ("ppt") ((Nil))
Prop: true = varExists ("jaj") (("gnr"::("vxj"::(Nil))))
Prop: true = varExists ("ytl") ((Nil))
asdf
=================================================
Progress: 235


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 24.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
intro string1
intro string2
intro Cond1
rewrite string_refl in goal at 0
reflexivity
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: is_mem_ta1 ((Nil)) ("coh") = true
Prop: is_mem_ta1 ((Nil)) ("tlx") = true
Prop: is_mem_ta1 (("rwn"::("rek"::("jfd"::(Nil))))) ("vey") = true
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
intro string1
intro string2
intro Cond1
rewrite string_refl in goal at 0
reflexivity
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
Prop: is_mem_ta1 ((Nil)) ("pan") = true
Prop: is_mem_ta1 ((Nil)) ("ixy") = true
Prop: is_mem_ta1 ((Nil)) ("ctc") = true
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
intro string1
intro string2
intro Cond1
rewrite string_refl in goal at 0
reflexivity
rewrite string_refl in goal at 0
reflexivity
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
Prop: is_mem_ta1 (("lzd"::(Nil))) ("ahp") = true
Prop: is_mem_ta1 ((Nil)) ("lfh") = true
Prop: is_mem_ta1 ((Nil)) ("sap") = true
asdf
=================================================
Progress: 236


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 24.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string2) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: varExists ("wky") ((Nil)) = true
Prop: varExists ("luy") (("vko"::(Nil))) = true
Prop: varExists ("mgj") ((Nil)) = true
asdf
previous tactics
simpl in goal
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
Prop: varExists ("fwv") (("xzd"::(Nil))) = true
Prop: varExists ("ebg") (("kdi"::(Nil))) = true
Prop: varExists ("wwm") ((Nil)) = true
asdf
previous tactics
simpl in goal
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
Prop: varExists ("owa") ((Nil)) = true
Prop: varExists ("wmg") ((Nil)) = true
Prop: varExists ("zte") ((Nil)) = true
asdf
=================================================
Progress: 237


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 24.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:8.)
=================================================
Progress: 238


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- IH1 in goal at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: is_mem_ta1 (("crb"::("wed"::("roi"::(Nil))))) ("hvc") = true
Prop: is_mem_ta1 ((Nil)) ("zza") = true
Prop: is_mem_ta1 ((Nil)) ("ann") = true
asdf
previous tactics
simpl in goal
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: is_mem_ta1 (("wvb"::(Nil))) ("ipi") = true
Prop: is_mem_ta1 ((Nil)) ("xes") = true
Prop: is_mem_ta1 ((Nil)) ("bbw") = true
asdf
previous tactics
simpl in goal
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
Prop: varExists ("mdh") ((Nil)) = true
Prop: varExists ("cgz") ((Nil)) = true
Prop: varExists ("dtn") ((Nil)) = true
asdf
previous tactics
simpl in goal
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
Prop: varExists ("jui") ((Nil)) = true
Prop: varExists ("fjt") ((Nil)) = true
Prop: varExists ("oxz") ((Nil)) = true
asdf
=================================================
Progress: 239


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 24.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: is_mem_ta1 ((Nil)) ("zwq") = true
Prop: is_mem_ta1 (("sef"::(Nil))) ("nie") = true
Prop: is_mem_ta1 ((Nil)) ("ysn") = true
asdf
previous tactics
simpl in goal
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
Prop: is_mem_ta1 ((Nil)) ("jkh") = true
Prop: is_mem_ta1 (("zto"::("xsk"::(Nil)))) ("gnt") = true
Prop: is_mem_ta1 (("dux"::(Nil))) ("utl") = true
asdf
previous tactics
simpl in goal
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
Prop: is_mem_ta1 ((Nil)) ("uqa") = true
Prop: is_mem_ta1 (("rsz"::("glf"::("msj"::(Nil))))) ("ldq") = true
Prop: is_mem_ta1 (("qsa"::(Nil))) ("agk") = true
asdf
=================================================
Progress: 240


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 24.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:8.)
=================================================
Progress: 241


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite <- IH1 in goal at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: true = is_mem_ta1 (("imh"::(Nil))) ("kjf")
Prop: true = is_mem_ta1 ((Nil)) ("stz")
Prop: true = is_mem_ta1 ((Nil)) ("ver")
asdf
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: true = is_mem_ta1 ((Nil)) ("por")
Prop: true = is_mem_ta1 (("fln"::(Nil))) ("iar")
Prop: true = is_mem_ta1 ((Nil)) ("ooe")
asdf
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
Prop: true = varExists ("lql") ((Nil))
Prop: true = varExists ("fpt") ((Nil))
Prop: true = varExists ("mfe") ((Nil))
asdf
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
validate generalize_common_subterm_goal
Prop: true = varExists ("rdx") ((Nil))
Prop: true = varExists ("drj") ((Nil))
Prop: true = varExists ("dqn") ((Nil))
asdf
=================================================
Progress: 242


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 24.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)
reflexivity
reflexivity
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: is_mem_ta1 ((Nil)) ("uox") = true
Prop: is_mem_ta1 ((Nil)) ("aes") = true
Prop: is_mem_ta1 ((Nil)) ("uad") = true
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)
reflexivity
reflexivity
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
Prop: is_mem_ta1 (("hfn"::("bsq"::(Nil)))) ("gqv") = true
Prop: is_mem_ta1 ((Nil)) ("vrg") = true
Prop: is_mem_ta1 ((Nil)) ("zyj") = true
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)
reflexivity
reflexivity
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
Prop: is_mem_ta1 ((Nil)) ("ebf") = true
Prop: is_mem_ta1 (("maq"::(Nil))) ("dic") = true
Prop: is_mem_ta1 ((Nil)) ("ajb") = true
asdf
=================================================
Progress: 243


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 24.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)
reflexivity
reflexivity
rewrite <- IH1 in goal at 1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: is_mem_ta1 (("ofo"::("ynm"::(Nil)))) ("bkt") = true
Prop: is_mem_ta1 ((Nil)) ("gmk") = true
Prop: is_mem_ta1 ((Nil)) ("iia") = true
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)
reflexivity
reflexivity
rewrite <- IH1 in goal at 1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
Prop: is_mem_ta1 ((Nil)) ("aqt") = true
Prop: is_mem_ta1 ((Nil)) ("uuo") = true
Prop: is_mem_ta1 (("mng"::("qse"::(Nil)))) ("rdn") = true
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)
reflexivity
reflexivity
rewrite <- IH1 in goal at 1
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
Prop: is_mem_ta1 (("nlk"::("fzc"::("xqy"::("ral"::("ycl"::("ssp"::(Nil)))))))) ("fbp") = true
Prop: is_mem_ta1 ((Nil)) ("uxr") = true
Prop: is_mem_ta1 ((Nil)) ("fcf") = true
asdf
=================================================
Progress: 244


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 24.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string2) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)
reflexivity
reflexivity
rewrite <- IH1 in goal at 2
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: varExists ("thf") ((Nil)) = true
Prop: varExists ("kli") ((Nil)) = true
Prop: varExists ("yxt") (("wyk"::(Nil))) = true
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)
reflexivity
reflexivity
rewrite <- IH1 in goal at 2
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
Prop: varExists ("xch") ((Nil)) = true
Prop: varExists ("ywk") ((Nil)) = true
Prop: varExists ("fnl") (("qvb"::(Nil))) = true
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)
reflexivity
reflexivity
rewrite <- IH1 in goal at 2
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
Prop: varExists ("btl") ((Nil)) = true
Prop: varExists ("wry") ((Nil)) = true
Prop: varExists ("vnp") ((Nil)) = true
asdf
=================================================
Progress: 245


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 24.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:8.)
=================================================
Progress: 246


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)
reflexivity
reflexivity
rewrite <- IH1 in goal at 2
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- IH1 in goal at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: is_mem_ta1 ((Nil)) ("ncw") = true
Prop: is_mem_ta1 ((Nil)) ("loa") = true
Prop: is_mem_ta1 ((Nil)) ("wxc") = true
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)
reflexivity
reflexivity
rewrite <- IH1 in goal at 2
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: is_mem_ta1 ((Nil)) ("giu") = true
Prop: is_mem_ta1 (("wgd"::(Nil))) ("oxx") = true
Prop: is_mem_ta1 (("kis"::(Nil))) ("ejp") = true
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)
reflexivity
reflexivity
rewrite <- IH1 in goal at 2
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
Prop: varExists ("qoe") ((Nil)) = true
Prop: varExists ("fop") ((Nil)) = true
Prop: varExists ("lbi") ((Nil)) = true
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), true = if true then true else varExists (string1) (string_list1)
reflexivity
reflexivity
rewrite <- IH1 in goal at 2
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
Prop: varExists ("gof") (("btt"::(Nil))) = true
Prop: varExists ("tsm") ((Nil)) = true
Prop: varExists ("nta") ((Nil)) = true
asdf
=================================================
Progress: 247


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 24.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string2) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
intro string1
intro string2
intro Cond1
rewrite string_refl in goal at 0
reflexivity
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: varExists ("mhm") (("rma"::("gjt"::(Nil)))) = true
Prop: varExists ("noi") ((Nil)) = true
Prop: varExists ("dgb") ((Nil)) = true
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
intro string1
intro string2
intro Cond1
rewrite string_refl in goal at 0
reflexivity
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
Prop: varExists ("zes") ((Nil)) = true
Prop: varExists ("duf") ((Nil)) = true
Prop: varExists ("gqs") (("fnb"::(Nil))) = true
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
intro string1
intro string2
intro Cond1
rewrite string_refl in goal at 0
reflexivity
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
Prop: varExists ("zxf") (("jwh"::(Nil))) = true
Prop: varExists ("tjn") (("yid"::("cek"::(Nil)))) = true
Prop: varExists ("bne") ((Nil)) = true
asdf
=================================================
Progress: 248


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 24.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:8.)
=================================================
Progress: 249


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
intro string1
intro string2
intro Cond1
rewrite string_refl in goal at 0
reflexivity
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- IH1 in goal at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: is_mem_ta1 (("jyp"::(Nil))) ("qip") = true
Prop: is_mem_ta1 ((Nil)) ("fmd") = true
Prop: is_mem_ta1 (("idp"::(Nil))) ("quw") = true
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
intro string1
intro string2
intro Cond1
rewrite string_refl in goal at 0
reflexivity
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: is_mem_ta1 (("fzk"::(Nil))) ("qtg") = true
Prop: is_mem_ta1 ((Nil)) ("zlh") = true
Prop: is_mem_ta1 ((Nil)) ("cxd") = true
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
intro string1
intro string2
intro Cond1
rewrite string_refl in goal at 0
reflexivity
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
Prop: varExists ("cem") ((Nil)) = true
Prop: varExists ("dvz") ((Nil)) = true
Prop: varExists ("ikt") ((Nil)) = true
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
intro string1
intro string2
intro Cond1
rewrite string_refl in goal at 0
reflexivity
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
Prop: varExists ("kjz") (("pjx"::(Nil))) = true
Prop: varExists ("ggt") ((Nil)) = true
Prop: varExists ("vqg") ((Nil)) = true
asdf
=================================================
Progress: 250


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 24.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string2) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
intro string1
intro string2
intro Cond1
rewrite string_refl in goal at 0
reflexivity
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: varExists ("kdx") ((Nil)) = true
Prop: varExists ("mfr") (("cdm"::(Nil))) = true
Prop: varExists ("cml") ((Nil)) = true
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
intro string1
intro string2
intro Cond1
rewrite string_refl in goal at 0
reflexivity
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
Prop: varExists ("pfx") ((Nil)) = true
Prop: varExists ("nig") ((Nil)) = true
Prop: varExists ("vcm") (("gkn"::(Nil))) = true
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
intro string1
intro string2
intro Cond1
rewrite string_refl in goal at 0
reflexivity
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 1
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
Prop: varExists ("zob") ((Nil)) = true
Prop: varExists ("lhy") ((Nil)) = true
Prop: varExists ("gvr") ((Nil)) = true
asdf
=================================================
Progress: 251


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
varExists (string1) (string_list2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 24.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:8.)
=================================================
Progress: 252


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
intro string1
intro string2
intro Cond1
rewrite string_refl in goal at 0
reflexivity
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- IH1 in goal at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: is_mem_ta1 (("qsq"::("cji"::(Nil)))) ("crs") = true
Prop: is_mem_ta1 (("xmk"::(Nil))) ("mqe") = true
Prop: is_mem_ta1 ((Nil)) ("lgq") = true
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
intro string1
intro string2
intro Cond1
rewrite string_refl in goal at 0
reflexivity
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: is_mem_ta1 ((Nil)) ("abc") = true
Prop: is_mem_ta1 ((Nil)) ("ncw") = true
Prop: is_mem_ta1 ((Nil)) ("lhw") = true
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
intro string1
intro string2
intro Cond1
rewrite string_refl in goal at 0
reflexivity
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
Prop: varExists ("tpz") ((Nil)) = true
Prop: varExists ("aaz") ((Nil)) = true
Prop: varExists ("ysl") ((Nil)) = true
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
intro string1
intro string2
intro Cond1
rewrite string_refl in goal at 0
reflexivity
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 1
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
Prop: varExists ("ntn") ((Nil)) = true
Prop: varExists ("usp") ((Nil)) = true
Prop: varExists ("znj") ((Nil)) = true
asdf
=================================================
Progress: 253


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 24.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
intro string1
intro string2
intro Cond1
rewrite string_refl in goal at 0
reflexivity
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 2
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: is_mem_ta1 ((Nil)) ("auu") = true
Prop: is_mem_ta1 ((Nil)) ("ybf") = true
Prop: is_mem_ta1 ((Nil)) ("ril") = true
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
intro string1
intro string2
intro Cond1
rewrite string_refl in goal at 0
reflexivity
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 2
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
Prop: is_mem_ta1 (("vcy"::(Nil))) ("eyp") = true
Prop: is_mem_ta1 (("ehk"::(Nil))) ("ldr") = true
Prop: is_mem_ta1 ((Nil)) ("dud") = true
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string1)
intro string1
intro string2
intro Cond1
rewrite string_refl in goal at 0
reflexivity
rewrite string_refl in goal at 0
reflexivity
rewrite IH1 in goal at 2
case string_eq (string1) (string2)
validate generalize_common_subterm_goal
Prop: is_mem_ta1 (("hvc"::("bba"::(Nil)))) ("jat") = true
Prop: is_mem_ta1 (("gbg"::(Nil))) ("klx") = true
Prop: is_mem_ta1 (("qco"::(Nil))) ("bwa") = true
asdf
=================================================
Progress: 254


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 24.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:8.)
=================================================
Progress: 255


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true
reflexivity
reflexivity
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite <- IH1 in goal at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: true = is_mem_ta1 ((Nil)) ("ldk")
Prop: true = is_mem_ta1 ((Nil)) ("jaj")
Prop: true = is_mem_ta1 ((Nil)) ("efn")
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true
reflexivity
reflexivity
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: true = is_mem_ta1 ((Nil)) ("dmh")
Prop: true = is_mem_ta1 (("flz"::("fum"::(Nil)))) ("zlp")
Prop: true = is_mem_ta1 (("yil"::(Nil))) ("nxo")
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true
reflexivity
reflexivity
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
Prop: true = varExists ("qxq") (("nqc"::(Nil)))
Prop: true = varExists ("yur") ((Nil))
Prop: true = varExists ("fzk") (("mar"::(Nil)))
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true
reflexivity
reflexivity
case string_eq (string2) (string1)
validate generalize_common_subterm_goal
Prop: true = varExists ("mnh") ((Nil))
Prop: true = varExists ("lhu") (("how"::(Nil)))
Prop: true = varExists ("lxc") (("kkt"::(Nil)))
asdf
=================================================
Progress: 256


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 24.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:8.)
=================================================
Progress: 257


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true
reflexivity
reflexivity
rewrite <- IH1 in goal at 1
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite <- IH1 in goal at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: true = is_mem_ta1 ((Nil)) ("evo")
Prop: true = is_mem_ta1 ((Nil)) ("vqc")
Prop: true = is_mem_ta1 (("vzo"::(Nil))) ("xpb")
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true
reflexivity
reflexivity
rewrite <- IH1 in goal at 1
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: true = is_mem_ta1 (("uoj"::(Nil))) ("nbl")
Prop: true = is_mem_ta1 ((Nil)) ("txy")
Prop: true = is_mem_ta1 (("uwd"::("che"::("clk"::(Nil))))) ("xwy")
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true
reflexivity
reflexivity
rewrite <- IH1 in goal at 1
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
Prop: true = varExists ("bon") (("ntq"::("oeu"::(Nil))))
Prop: true = varExists ("eqn") ((Nil))
Prop: true = varExists ("cyk") (("skz"::(Nil)))
asdf
previous tactics
simpl in goal
rewrite IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else varExists (string1) (string_list1) = true
reflexivity
reflexivity
rewrite <- IH1 in goal at 1
case string_eq (string2) (string1)
validate generalize_common_subterm_goal
Prop: true = varExists ("vgi") ((Nil))
Prop: true = varExists ("nhj") ((Nil))
Prop: true = varExists ("uzp") ((Nil))
asdf
=================================================
Progress: 258


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 24.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:8.)
=================================================
Progress: 259


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true
reflexivity
reflexivity
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite <- IH1 in goal at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: true = is_mem_ta1 ((Nil)) ("eji")
Prop: true = is_mem_ta1 ((Nil)) ("qjy")
Prop: true = is_mem_ta1 ((Nil)) ("fzr")
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true
reflexivity
reflexivity
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: true = is_mem_ta1 (("gad"::(Nil))) ("yeg")
Prop: true = is_mem_ta1 ((Nil)) ("jrk")
Prop: true = is_mem_ta1 ((Nil)) ("mwq")
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true
reflexivity
reflexivity
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
Prop: true = varExists ("gmu") ((Nil))
Prop: true = varExists ("xwi") ((Nil))
Prop: true = varExists ("app") ((Nil))
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true
reflexivity
reflexivity
rewrite IH1 in goal at 0
case string_eq (string2) (string1)
validate generalize_common_subterm_goal
Prop: true = varExists ("yaa") (("xde"::(Nil)))
Prop: true = varExists ("efp") (("qyw"::("ycb"::(Nil))))
Prop: true = varExists ("lce") (("qfd"::(Nil)))
asdf
=================================================
Progress: 260


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = varExists (string1) (string_list2)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 24.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:8.)
=================================================
Progress: 261


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 8.)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = checkRec (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = varExists (string1) (string_list2)
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true
reflexivity
reflexivity
rewrite IH1 in goal at 2
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite <- IH1 in goal at 0
rewrite <- Case2 in goal at 0
validate generalize_common_subterm_goal
Prop: true = is_mem_ta1 ((Nil)) ("shq")
Prop: true = is_mem_ta1 ((Nil)) ("fcr")
Prop: true = is_mem_ta1 ((Nil)) ("xac")
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true
reflexivity
reflexivity
rewrite IH1 in goal at 2
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
rewrite <- IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: true = is_mem_ta1 ((Nil)) ("gqx")
Prop: true = is_mem_ta1 (("xtb"::(Nil))) ("ljt")
Prop: true = is_mem_ta1 (("xdj"::(Nil))) ("kcb")
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true
reflexivity
reflexivity
rewrite IH1 in goal at 2
case string_eq (string2) (string1)
rewrite string_eqb_eq in Case2 at 0
validate generalize_common_subterm_goal
Prop: true = varExists ("gzq") (("qrt"::(Nil)))
Prop: true = varExists ("dpg") ((Nil))
Prop: true = varExists ("acz") ((Nil))
asdf
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite string_refl in goal at 0
assert forall (string1:string) (string_list1:string list), if true then true else is_mem_ta1 (string_list1) (string1) = true
reflexivity
reflexivity
rewrite IH1 in goal at 2
case string_eq (string2) (string1)
validate generalize_common_subterm_goal
Prop: true = varExists ("ces") ((Nil))
Prop: true = varExists ("gjm") ((Nil))
Prop: true = varExists ("mbu") ((Nil))
asdf
Fatal error: exception Failure("worklist is empty")
Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
Called from Dilemma__Engine.proof_auto in file "lib/engine.ml", line 283, characters 8-69
Called from Dune__exe__Main.main in file "bin/main.ml", line 24, characters 12-79
