Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (l:lambda), check_ta1 (l) = check (l)(rank : 0)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:3)
=================================================
Progress: 2


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) ((Nil)) = check_ (lambda1) ((Nil)) ((Nil))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:5)
=================================================
Progress: 3


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) ((Nil)) = check_ (lambda1) ((Nil)) ((Nil))

0 goal(s) more...

0 conjecture(s) more...
>>> induction lambda1(rank : 5)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
sub_check_ta1 (V (string1)) ((Nil)) = check_ (V (string1)) ((Nil)) ((Nil))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:4)
=================================================
Progress: 4


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
sub_check_ta1 (V (string1)) ((Nil)) = check_ (V (string1)) ((Nil)) ((Nil))

2 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 4)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check_ (lambda2) ((Nil)) ((Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (P (string1) (lambda2)) ((Nil)) = check_ (P (string1) (lambda2)) ((Nil)) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:4)
=================================================
Progress: 5


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check_ (lambda2) ((Nil)) ((Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (P (string1) (lambda2)) ((Nil)) = check_ (P (string1) (lambda2)) ((Nil)) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 4)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check_ (lambda2) ((Nil)) ((Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = check_ (lambda2) ((string1::(Nil))) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
New Env

;;
Lemma List
forall (lambda3:lambda) (lst:string list) (string2:string), sub_check_ta1 (lambda3) ((string2::lst)) = check_ (lambda3) ((string2::lst)) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check_ (lambda2) ((Nil)) ((Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = check_ (lambda2) ((string1::(Nil))) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 6


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check_ (lambda2) ((Nil)) ((Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = check_ (lambda2) ((string1::(Nil))) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> assert forall (lambda3:lambda) (lst:string list) (string2:string), sub_check_ta1 (lambda3) ((string2::lst)) = check_ (lambda3) ((string2::lst)) ((Nil))(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:7)
=================================================
Progress: 7


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> induction lambda1(rank : 7)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string_list1:string list) (string1:string), sub_check_ta1 (V (string2)) ((string1::string_list1)) = check_ (V (string2)) ((string1::string_list1)) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7)
=================================================
Progress: 8


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string_list1:string list) (string1:string), sub_check_ta1 (V (string2)) ((string1::string_list1)) = check_ (V (string2)) ((string1::string_list1)) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string_list1:string list) (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = if if string_eq (string1) (string2) then true else mem (string2) (string_list1) then for_all (aux ((string1::string_list1))) ((Nil)) else false

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string1(rank:7)
=================================================
Progress: 9


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string_list1:string list) (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = if if string_eq (string1) (string2) then true else mem (string2) (string_list1) then for_all (aux ((string1::string_list1))) ((Nil)) else false

2 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 7)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
forall (string_list1:string list), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = if if string_eq (string1) (string2) then true else mem (string2) (string_list1) then for_all (aux ((string1::string_list1))) ((Nil)) else false

2 goal(s) more...

1 conjecture(s) more...
string1 string2 string1 string2 string2 string_list1 Tactic List : 1
induction string_list1(rank:8)
=================================================
Progress: 10


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
forall (string_list1:string list), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = if if string_eq (string1) (string2) then true else mem (string2) (string_list1) then for_all (aux ((string1::string_list1))) ((Nil)) else false

2 goal(s) more...

1 conjecture(s) more...
>>> induction string_list1(rank : 8)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
Base2 : string_list1 = (Nil)
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = if if string_eq (string1) (string2) then true else mem (string2) ((Nil)) then for_all (aux ((string1::(Nil)))) ((Nil)) else false

3 goal(s) more...

1 conjecture(s) more...
string1 string2 string1 string2 string2 asdf
Tactic List : 2
case if string_eq (string1) (string2) then true else mem (string2) ((Nil))(rank:9)
case string_eq (string1) (string2)(rank:9)
=================================================
Progress: 11


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
Base2 : string_list1 = (Nil)
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = if if string_eq (string1) (string2) then true else mem (string2) ((Nil)) then for_all (aux ((string1::(Nil)))) ((Nil)) else false

3 goal(s) more...

1 conjecture(s) more...
>>> case if string_eq (string1) (string2) then true else mem (string2) ((Nil))(rank : 9)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
Base2 : string_list1 = (Nil)
Case1 : if string_eq (string1) (string2) then true else mem (string2) ((Nil)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = true

4 goal(s) more...

1 conjecture(s) more...
string1 string2 asdf
Tactic List : 1
case string_eq (string1) (string2)(rank:10)
=================================================
Progress: 12


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
Base2 : string_list1 = (Nil)
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = if if string_eq (string1) (string2) then true else mem (string2) ((Nil)) then for_all (aux ((string1::(Nil)))) ((Nil)) else false

3 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 9)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
Base2 : string_list1 = (Nil)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8)
=================================================
Progress: 13


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
Base2 : string_list1 = (Nil)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

4 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 8)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
Base2 : string_list1 = (Nil)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = false

3 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 14


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
Base2 : string_list1 = (Nil)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
false = false

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if if string_eq (string1) (string2) then true else mem (string2) (string_list2) then for_all (aux ((string1::string_list2))) ((Nil)) else false
Inductive1 : string_list1 = (string3::string_list2)
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((string3::string_list2)) (string2) = if if string_eq (string1) (string2) then true else mem (string2) ((string3::string_list2)) then for_all (aux ((string1::(string3::string_list2)))) ((Nil)) else false

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 1
string1 string2 string1 string2 string2 string3 string_list2 asdf
Tactic List : 2
case if string_eq (string1) (string2) then true else mem (string2) ((string3::string_list2))(rank:8)
case string_eq (string1) (string2)(rank:8)
=================================================
Progress: 15


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if if string_eq (string1) (string2) then true else mem (string2) (string_list2) then for_all (aux ((string1::string_list2))) ((Nil)) else false
Inductive1 : string_list1 = (string3::string_list2)
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((string3::string_list2)) (string2) = if if string_eq (string1) (string2) then true else mem (string2) ((string3::string_list2)) then for_all (aux ((string1::(string3::string_list2)))) ((Nil)) else false

2 goal(s) more...

1 conjecture(s) more...
>>> case if string_eq (string1) (string2) then true else mem (string2) ((string3::string_list2))(rank : 8)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if if string_eq (string1) (string2) then true else mem (string2) (string_list2) then for_all (aux ((string1::string_list2))) ((Nil)) else false
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string1) (string2) then true else mem (string2) ((string3::string_list2)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((string3::string_list2)) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
string1 string2 asdf
Tactic List : 1
case string_eq (string1) (string2)(rank:9)
=================================================
Progress: 16


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if if string_eq (string1) (string2) then true else mem (string2) (string_list2) then for_all (aux ((string1::string_list2))) ((Nil)) else false
Inductive1 : string_list1 = (string3::string_list2)
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((string3::string_list2)) (string2) = if if string_eq (string1) (string2) then true else mem (string2) ((string3::string_list2)) then for_all (aux ((string1::(string3::string_list2)))) ((Nil)) else false

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 8)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : true = true
Inductive1 : string_list1 = (string3::string_list2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 17


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : true = true
Inductive1 : string_list1 = (string3::string_list2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string2) = if mem (string2) (string_list2) then for_all (aux ((string1::string_list2))) ((Nil)) else false
Inductive1 : string_list1 = (string3::string_list2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = if if string_eq (string3) (string2) then true else mem (string2) (string_list2) then for_all (aux ((string1::(string3::string_list2)))) ((Nil)) else false

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
string3 string2 string3 string2 string2 string_list2 asdf
Tactic List : 2
case if string_eq (string3) (string2) then true else mem (string2) (string_list2)(rank:8)
case string_eq (string3) (string2)(rank:8)
=================================================
Progress: 18


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string2) = if mem (string2) (string_list2) then for_all (aux ((string1::string_list2))) ((Nil)) else false
Inductive1 : string_list1 = (string3::string_list2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = if if string_eq (string3) (string2) then true else mem (string2) (string_list2) then for_all (aux ((string1::(string3::string_list2)))) ((Nil)) else false

2 goal(s) more...

1 conjecture(s) more...
>>> case if string_eq (string3) (string2) then true else mem (string2) (string_list2)(rank : 8)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string2) = if mem (string2) (string_list2) then for_all (aux ((string1::string_list2))) ((Nil)) else false
Inductive1 : string_list1 = (string3::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string3) (string2) then true else mem (string2) (string_list2) = true
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
string3 string2 asdf
Tactic List : 1
case string_eq (string3) (string2)(rank:9)
=================================================
Progress: 19


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string2) = if mem (string2) (string_list2) then for_all (aux ((string1::string_list2))) ((Nil)) else false
Inductive1 : string_list1 = (string3::string_list2)
Case1 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = if if string_eq (string3) (string2) then true else mem (string2) (string_list2) then for_all (aux ((string1::(string3::string_list2)))) ((Nil)) else false

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 8)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string2) = if mem (string2) (string_list2) then for_all (aux ((string1::string_list2))) ((Nil)) else false
Inductive1 : string_list1 = (string3::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string3) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 20


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string2) = if mem (string2) (string_list2) then for_all (aux ((string1::string_list2))) ((Nil)) else false
Inductive1 : string_list1 = (string3::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string3) (string2) = true
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string2) = if mem (string2) (string_list2) then for_all (aux ((string1::string_list2))) ((Nil)) else false
Inductive1 : string_list1 = (string3::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string3) (string2) = false
---------------------------------------
is_mem_ta1 (string_list2) (string2) = if mem (string2) (string_list2) then for_all (aux ((string1::(string3::string_list2)))) ((Nil)) else false

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
string2 string_list2 asdf
Tactic List : 1
case mem (string2) (string_list2)(rank:8)
=================================================
Progress: 21


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string2) = if mem (string2) (string_list2) then for_all (aux ((string1::string_list2))) ((Nil)) else false
Inductive1 : string_list1 = (string3::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string3) (string2) = false
---------------------------------------
is_mem_ta1 (string_list2) (string2) = if mem (string2) (string_list2) then for_all (aux ((string1::(string3::string_list2)))) ((Nil)) else false

2 goal(s) more...

1 conjecture(s) more...
>>> case mem (string2) (string_list2)(rank : 8)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string2) = true
Inductive1 : string_list1 = (string3::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string3) (string2) = false
Case3 : mem (string2) (string_list2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:16)
rewrite <- Case3 in goal at 0(rank:16)
rewrite <- IH1 in goal at 0(rank:16)
=================================================
Progress: 22


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if if string_eq (string1) (string2) then true else mem (string2) (string_list2) then for_all (aux ((string1::string_list2))) ((Nil)) else false
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string1) (string2) then true else mem (string2) ((string3::string_list2)) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((string3::string_list2)) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 9)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : true = true
Inductive1 : string_list1 = (string3::string_list2)
Case1 : true = true
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8)
=================================================
Progress: 23


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : true = true
Inductive1 : string_list1 = (string3::string_list2)
Case1 : true = true
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = true

4 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 8)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string2) = if mem (string2) (string_list2) then for_all (aux ((string1::string_list2))) ((Nil)) else false
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string2) then true else mem (string2) (string_list2) = true
Case2 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
string3 string2 asdf
Tactic List : 1
case string_eq (string3) (string2)(rank:9)
=================================================
Progress: 24


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string2) = if mem (string2) (string_list2) then for_all (aux ((string1::string_list2))) ((Nil)) else false
Inductive1 : string_list1 = (string3::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : if string_eq (string3) (string2) then true else mem (string2) (string_list2) = true
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 9)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string2) = if mem (string2) (string_list2) then for_all (aux ((string1::string_list2))) ((Nil)) else false
Inductive1 : string_list1 = (string3::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : true = true
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8)
=================================================
Progress: 25


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string2) = if mem (string2) (string_list2) then for_all (aux ((string1::string_list2))) ((Nil)) else false
Inductive1 : string_list1 = (string3::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : true = true
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

4 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 8)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string2) = if mem (string2) (string_list2) then for_all (aux ((string1::string_list2))) ((Nil)) else false
Inductive1 : string_list1 = (string3::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : mem (string2) (string_list2) = true
Case3 : string_eq (string3) (string2) = false
---------------------------------------
is_mem_ta1 (string_list2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:16)
rewrite IH1 in goal at 0(rank:24)
=================================================
Progress: 26


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string2) = if mem (string2) (string_list2) then for_all (aux ((string1::string_list2))) ((Nil)) else false
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string2) then true else mem (string2) (string_list2) = true
Case2 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 9)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string2) = if mem (string2) (string_list2) then for_all (aux ((string1::string_list2))) ((Nil)) else false
Inductive1 : string_list1 = (string3::string_list2)
Case1 : true = true
Case2 : string_eq (string1) (string2) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8)
=================================================
Progress: 27


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string2) = if mem (string2) (string_list2) then for_all (aux ((string1::string_list2))) ((Nil)) else false
Inductive1 : string_list1 = (string3::string_list2)
Case1 : true = true
Case2 : string_eq (string1) (string2) = false
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

4 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 8)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string2) = if mem (string2) (string_list2) then for_all (aux ((string1::string_list2))) ((Nil)) else false
Inductive1 : string_list1 = (string3::string_list2)
Case1 : mem (string2) (string_list2) = true
Case2 : string_eq (string1) (string2) = false
Case3 : string_eq (string3) (string2) = false
---------------------------------------
is_mem_ta1 (string_list2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:16)
rewrite IH1 in goal at 0(rank:24)
=================================================
Progress: 28


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string2) = true
Inductive1 : string_list1 = (string3::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string3) (string2) = false
Case3 : mem (string2) (string_list2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string2) = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 16)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string2) = true
Inductive1 : string_list1 = (string3::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string3) (string2) = false
Case3 : mem (string2) (string_list2) = true
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 29


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string2) = true
Inductive1 : string_list1 = (string3::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string3) (string2) = false
Case3 : mem (string2) (string_list2) = true
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string2) = false
Inductive1 : string_list1 = (string3::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string3) (string2) = false
Case3 : mem (string2) (string_list2) = false
---------------------------------------
is_mem_ta1 (string_list2) (string2) = false

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 2
Tactic List : 5
rewrite IH1 in goal at 0(rank:15)
rewrite <- Case2 in goal at 0(rank:15)
rewrite <- Case3 in goal at 0(rank:15)
rewrite <- IH1 in goal at 0(rank:15)
rewrite <- Case1 in goal at 0(rank:15)
=================================================
Progress: 30


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string2) = false
Inductive1 : string_list1 = (string3::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string3) (string2) = false
Case3 : mem (string2) (string_list2) = false
---------------------------------------
is_mem_ta1 (string_list2) (string2) = false

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 15)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string2) = false
Inductive1 : string_list1 = (string3::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string3) (string2) = false
Case3 : mem (string2) (string_list2) = false
---------------------------------------
false = false

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:6)
=================================================
Progress: 31


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string2) = false
Inductive1 : string_list1 = (string3::string_list2)
Case1 : string_eq (string1) (string2) = false
Case2 : string_eq (string3) (string2) = false
Case3 : mem (string2) (string_list2) = false
---------------------------------------
false = false

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 6)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) ((string1::string_list1)) = check_ (lambda2) ((string1::string_list1)) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string_list1:string list) (string1:string), sub_check_ta1 (P (string2) (lambda2)) ((string1::string_list1)) = check_ (P (string2) (lambda2)) ((string1::string_list1)) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 8
Tactic List : 1
simpl in goal(rank:6)
=================================================
Progress: 32


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) ((string1::string_list1)) = check_ (lambda2) ((string1::string_list1)) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string_list1:string list) (string1:string), sub_check_ta1 (P (string2) (lambda2)) ((string1::string_list1)) = check_ (P (string2) (lambda2)) ((string1::string_list1)) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) ((string1::string_list1)) = check_ (lambda2) ((string1::string_list1)) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = check_ (lambda2) ((string2::(string1::string_list1))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
intro string1(rank:6)
intro string_list1(rank:6)
rewrite IH1 in goal at 0(rank:14)
rewrite <- IH1 in goal at 0(rank:14)
=================================================
Progress: 33


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) ((string1::string_list1)) = check_ (lambda2) ((string1::string_list1)) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = check_ (lambda2) ((string2::(string1::string_list1))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 6)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) ((string1::string_list1)) = check_ (lambda2) ((string1::string_list1)) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = check_ (lambda2) ((string2::(string1::string_list1))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
intro string_list1(rank:6)
rewrite IH1 in goal at 0(rank:14)
rewrite <- IH1 in goal at 0(rank:14)
=================================================
Progress: 34


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) ((string1::string_list1)) = check_ (lambda2) ((string1::string_list1)) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = check_ (lambda2) ((string2::(string1::string_list1))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> intro string_list1(rank : 6)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) ((string1::string_list1)) = check_ (lambda2) ((string1::string_list1)) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
string_list1 : string list
---------------------------------------
forall (string1:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = check_ (lambda2) ((string2::(string1::string_list1))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:14)
rewrite <- IH1 in goal at 0(rank:14)
=================================================
Progress: 35


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) ((string1::string_list1)) = check_ (lambda2) ((string1::string_list1)) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = check_ (lambda2) ((string2::(string1::string_list1))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> intro string_list1(rank : 6)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) ((string1::string_list1)) = check_ (lambda2) ((string1::string_list1)) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
string_list1 : string list
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = check_ (lambda2) ((string2::(string1::string_list1))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:14)
rewrite <- IH1 in goal at 0(rank:14)
=================================================
Progress: 36


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) ((string1::string_list1)) = check_ (lambda2) ((string1::string_list1)) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = check_ (lambda2) ((string2::(string1::string_list1))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) ((string1::string_list1)) = check_ (lambda2) ((string1::string_list1)) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string_list1:string list) (string1:string), check_ (lambda2) ((string2::(string1::string_list1))) ((Nil)) = check_ (lambda2) ((string2::(string1::string_list1))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5)
=================================================
Progress: 37


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) ((string1::string_list1)) = check_ (lambda2) ((string1::string_list1)) ((Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string_list1:string list) (string1:string), check_ (lambda2) ((string2::(string1::string_list1))) ((Nil)) = check_ (lambda2) ((string2::(string1::string_list1))) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) ((string1::string_list1)) = check_ (lambda2) ((string1::string_list1)) ((Nil))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) ((string1::string_list1)) = check_ (lambda3) ((string1::string_list1)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string_list1:string list) (string1:string), sub_check_ta1 (C (lambda2) (lambda3)) ((string1::string_list1)) = check_ (C (lambda2) (lambda3)) ((string1::string_list1)) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 7
Tactic List : 1
simpl in goal(rank:5)
=================================================
Progress: 38


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) ((string1::string_list1)) = check_ (lambda2) ((string1::string_list1)) ((Nil))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) ((string1::string_list1)) = check_ (lambda3) ((string1::string_list1)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string_list1:string list) (string1:string), sub_check_ta1 (C (lambda2) (lambda3)) ((string1::string_list1)) = check_ (C (lambda2) (lambda3)) ((string1::string_list1)) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 5)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) ((string1::string_list1)) = check_ (lambda2) ((string1::string_list1)) ((Nil))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) ((string1::string_list1)) = check_ (lambda3) ((string1::string_list1)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string_list1:string list) (string1:string), if sub_check_ta1 (lambda2) ((string1::string_list1)) then sub_check_ta1 (lambda3) ((string1::string_list1)) else false = if check_ (lambda2) ((string1::string_list1)) ((Nil)) then check_ (lambda3) ((string1::string_list1)) ((Nil)) else false

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string1(rank:5)
=================================================
Progress: 39


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) ((string1::string_list1)) = check_ (lambda2) ((string1::string_list1)) ((Nil))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) ((string1::string_list1)) = check_ (lambda3) ((string1::string_list1)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string_list1:string list) (string1:string), if sub_check_ta1 (lambda2) ((string1::string_list1)) then sub_check_ta1 (lambda3) ((string1::string_list1)) else false = if check_ (lambda2) ((string1::string_list1)) ((Nil)) then check_ (lambda3) ((string1::string_list1)) ((Nil)) else false

0 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 5)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) ((string1::string_list1)) = check_ (lambda2) ((string1::string_list1)) ((Nil))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) ((string1::string_list1)) = check_ (lambda3) ((string1::string_list1)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string1 : string
---------------------------------------
forall (string_list1:string list), if sub_check_ta1 (lambda2) ((string1::string_list1)) then sub_check_ta1 (lambda3) ((string1::string_list1)) else false = if check_ (lambda2) ((string1::string_list1)) ((Nil)) then check_ (lambda3) ((string1::string_list1)) ((Nil)) else false

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:5)
=================================================
Progress: 40


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) ((string1::string_list1)) = check_ (lambda2) ((string1::string_list1)) ((Nil))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) ((string1::string_list1)) = check_ (lambda3) ((string1::string_list1)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string1 : string
---------------------------------------
forall (string_list1:string list), if sub_check_ta1 (lambda2) ((string1::string_list1)) then sub_check_ta1 (lambda3) ((string1::string_list1)) else false = if check_ (lambda2) ((string1::string_list1)) ((Nil)) then check_ (lambda3) ((string1::string_list1)) ((Nil)) else false

0 goal(s) more...

1 conjecture(s) more...
>>> intro string_list1(rank : 5)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) ((string1::string_list1)) = check_ (lambda2) ((string1::string_list1)) ((Nil))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) ((string1::string_list1)) = check_ (lambda3) ((string1::string_list1)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string1 : string
string_list1 : string list
---------------------------------------
if sub_check_ta1 (lambda2) ((string1::string_list1)) then sub_check_ta1 (lambda3) ((string1::string_list1)) else false = if check_ (lambda2) ((string1::string_list1)) ((Nil)) then check_ (lambda3) ((string1::string_list1)) ((Nil)) else false

0 goal(s) more...

1 conjecture(s) more...
lambda2 string1 string_list1 lambda2 string1 string_list1 asdf
Tactic List : 4
case check_ (lambda2) ((string1::string_list1)) ((Nil))(rank:6)
case sub_check_ta1 (lambda2) ((string1::string_list1))(rank:6)
rewrite IH1 in goal at 0(rank:13)
rewrite <- IH1 in goal at 0(rank:13)
=================================================
Progress: 41


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) ((string1::string_list1)) = check_ (lambda2) ((string1::string_list1)) ((Nil))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) ((string1::string_list1)) = check_ (lambda3) ((string1::string_list1)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string1 : string
string_list1 : string list
---------------------------------------
if sub_check_ta1 (lambda2) ((string1::string_list1)) then sub_check_ta1 (lambda3) ((string1::string_list1)) else false = if check_ (lambda2) ((string1::string_list1)) ((Nil)) then check_ (lambda3) ((string1::string_list1)) ((Nil)) else false

0 goal(s) more...

1 conjecture(s) more...
>>> case check_ (lambda2) ((string1::string_list1)) ((Nil))(rank : 6)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) ((string1::string_list1)) = check_ (lambda2) ((string1::string_list1)) ((Nil))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) ((string1::string_list1)) = check_ (lambda3) ((string1::string_list1)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string1 : string
string_list1 : string list
Case1 : check_ (lambda2) ((string1::string_list1)) ((Nil)) = true
---------------------------------------
if sub_check_ta1 (lambda2) ((string1::string_list1)) then sub_check_ta1 (lambda3) ((string1::string_list1)) else false = check_ (lambda3) ((string1::string_list1)) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
lambda2 string1 string_list1 asdf
Tactic List : 2
case sub_check_ta1 (lambda2) ((string1::string_list1))(rank:7)
rewrite IH1 in goal at 0(rank:22)
=================================================
Progress: 42


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) ((string1::string_list1)) = check_ (lambda2) ((string1::string_list1)) ((Nil))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) ((string1::string_list1)) = check_ (lambda3) ((string1::string_list1)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string1 : string
string_list1 : string list
---------------------------------------
if sub_check_ta1 (lambda2) ((string1::string_list1)) then sub_check_ta1 (lambda3) ((string1::string_list1)) else false = if check_ (lambda2) ((string1::string_list1)) ((Nil)) then check_ (lambda3) ((string1::string_list1)) ((Nil)) else false

0 goal(s) more...

1 conjecture(s) more...
>>> case sub_check_ta1 (lambda2) ((string1::string_list1))(rank : 6)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) ((string1::string_list1)) = check_ (lambda2) ((string1::string_list1)) ((Nil))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) ((string1::string_list1)) = check_ (lambda3) ((string1::string_list1)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string1 : string
string_list1 : string list
Case1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = true
---------------------------------------
sub_check_ta1 (lambda3) ((string1::string_list1)) = if check_ (lambda2) ((string1::string_list1)) ((Nil)) then check_ (lambda3) ((string1::string_list1)) ((Nil)) else false

1 goal(s) more...

1 conjecture(s) more...
lambda2 string1 string_list1 asdf
Tactic List : 2
case check_ (lambda2) ((string1::string_list1)) ((Nil))(rank:7)
rewrite <- IH1 in goal at 0(rank:14)
=================================================
Progress: 43


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) ((string1::string_list1)) = check_ (lambda2) ((string1::string_list1)) ((Nil))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) ((string1::string_list1)) = check_ (lambda3) ((string1::string_list1)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string1 : string
string_list1 : string list
Case1 : check_ (lambda2) ((string1::string_list1)) ((Nil)) = true
---------------------------------------
if sub_check_ta1 (lambda2) ((string1::string_list1)) then sub_check_ta1 (lambda3) ((string1::string_list1)) else false = check_ (lambda3) ((string1::string_list1)) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> case sub_check_ta1 (lambda2) ((string1::string_list1))(rank : 7)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) ((string1::string_list1)) = check_ (lambda2) ((string1::string_list1)) ((Nil))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) ((string1::string_list1)) = check_ (lambda3) ((string1::string_list1)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string1 : string
string_list1 : string list
Case1 : check_ (lambda2) ((string1::string_list1)) ((Nil)) = true
Case2 : sub_check_ta1 (lambda2) ((string1::string_list1)) = true
---------------------------------------
sub_check_ta1 (lambda3) ((string1::string_list1)) = check_ (lambda3) ((string1::string_list1)) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:15)
rewrite <- IH2 in goal at 0(rank:15)
=================================================
Progress: 44


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) ((string1::string_list1)) = check_ (lambda2) ((string1::string_list1)) ((Nil))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) ((string1::string_list1)) = check_ (lambda3) ((string1::string_list1)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string1 : string
string_list1 : string list
Case1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = true
---------------------------------------
sub_check_ta1 (lambda3) ((string1::string_list1)) = if check_ (lambda2) ((string1::string_list1)) ((Nil)) then check_ (lambda3) ((string1::string_list1)) ((Nil)) else false

1 goal(s) more...

1 conjecture(s) more...
>>> case check_ (lambda2) ((string1::string_list1)) ((Nil))(rank : 7)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) ((string1::string_list1)) = check_ (lambda2) ((string1::string_list1)) ((Nil))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) ((string1::string_list1)) = check_ (lambda3) ((string1::string_list1)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string1 : string
string_list1 : string list
Case1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = true
Case2 : check_ (lambda2) ((string1::string_list1)) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda3) ((string1::string_list1)) = check_ (lambda3) ((string1::string_list1)) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:15)
rewrite <- IH2 in goal at 0(rank:15)
=================================================
Progress: 45


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) ((string1::string_list1)) = check_ (lambda2) ((string1::string_list1)) ((Nil))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) ((string1::string_list1)) = check_ (lambda3) ((string1::string_list1)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string1 : string
string_list1 : string list
---------------------------------------
if sub_check_ta1 (lambda2) ((string1::string_list1)) then sub_check_ta1 (lambda3) ((string1::string_list1)) else false = if check_ (lambda2) ((string1::string_list1)) ((Nil)) then check_ (lambda3) ((string1::string_list1)) ((Nil)) else false

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) ((string1::string_list1)) = check_ (lambda2) ((string1::string_list1)) ((Nil))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) ((string1::string_list1)) = check_ (lambda3) ((string1::string_list1)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string1 : string
string_list1 : string list
---------------------------------------
if check_ (lambda2) ((string1::string_list1)) ((Nil)) then sub_check_ta1 (lambda3) ((string1::string_list1)) else false = if check_ (lambda2) ((string1::string_list1)) ((Nil)) then check_ (lambda3) ((string1::string_list1)) ((Nil)) else false

0 goal(s) more...

1 conjecture(s) more...
lambda2 string1 string_list1 lambda2 string1 string_list1 asdf
Tactic List : 1
case check_ (lambda2) ((string1::string_list1)) ((Nil))(rank:6)
=================================================
Progress: 46


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) ((string1::string_list1)) = check_ (lambda2) ((string1::string_list1)) ((Nil))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) ((string1::string_list1)) = check_ (lambda3) ((string1::string_list1)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string1 : string
string_list1 : string list
---------------------------------------
if check_ (lambda2) ((string1::string_list1)) ((Nil)) then sub_check_ta1 (lambda3) ((string1::string_list1)) else false = if check_ (lambda2) ((string1::string_list1)) ((Nil)) then check_ (lambda3) ((string1::string_list1)) ((Nil)) else false

0 goal(s) more...

1 conjecture(s) more...
>>> case check_ (lambda2) ((string1::string_list1)) ((Nil))(rank : 6)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) ((string1::string_list1)) = check_ (lambda2) ((string1::string_list1)) ((Nil))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) ((string1::string_list1)) = check_ (lambda3) ((string1::string_list1)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string1 : string
string_list1 : string list
Case1 : check_ (lambda2) ((string1::string_list1)) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda3) ((string1::string_list1)) = check_ (lambda3) ((string1::string_list1)) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:14)
rewrite <- IH2 in goal at 0(rank:14)
=================================================
Progress: 47


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) ((string1::string_list1)) = check_ (lambda2) ((string1::string_list1)) ((Nil))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) ((string1::string_list1)) = check_ (lambda3) ((string1::string_list1)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string1 : string
string_list1 : string list
---------------------------------------
if sub_check_ta1 (lambda2) ((string1::string_list1)) then sub_check_ta1 (lambda3) ((string1::string_list1)) else false = if check_ (lambda2) ((string1::string_list1)) ((Nil)) then check_ (lambda3) ((string1::string_list1)) ((Nil)) else false

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) ((string1::string_list1)) = check_ (lambda2) ((string1::string_list1)) ((Nil))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) ((string1::string_list1)) = check_ (lambda3) ((string1::string_list1)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string1 : string
string_list1 : string list
---------------------------------------
if sub_check_ta1 (lambda2) ((string1::string_list1)) then sub_check_ta1 (lambda3) ((string1::string_list1)) else false = if sub_check_ta1 (lambda2) ((string1::string_list1)) then check_ (lambda3) ((string1::string_list1)) ((Nil)) else false

0 goal(s) more...

1 conjecture(s) more...
lambda2 string1 string_list1 lambda2 string1 string_list1 asdf
Tactic List : 1
case sub_check_ta1 (lambda2) ((string1::string_list1))(rank:6)
=================================================
Progress: 48


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) ((string1::string_list1)) = check_ (lambda2) ((string1::string_list1)) ((Nil))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) ((string1::string_list1)) = check_ (lambda3) ((string1::string_list1)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string1 : string
string_list1 : string list
---------------------------------------
if sub_check_ta1 (lambda2) ((string1::string_list1)) then sub_check_ta1 (lambda3) ((string1::string_list1)) else false = if sub_check_ta1 (lambda2) ((string1::string_list1)) then check_ (lambda3) ((string1::string_list1)) ((Nil)) else false

0 goal(s) more...

1 conjecture(s) more...
>>> case sub_check_ta1 (lambda2) ((string1::string_list1))(rank : 6)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) ((string1::string_list1)) = check_ (lambda2) ((string1::string_list1)) ((Nil))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) ((string1::string_list1)) = check_ (lambda3) ((string1::string_list1)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string1 : string
string_list1 : string list
Case1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = true
---------------------------------------
sub_check_ta1 (lambda3) ((string1::string_list1)) = check_ (lambda3) ((string1::string_list1)) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:14)
rewrite <- IH2 in goal at 0(rank:14)
=================================================
Progress: 49


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) ((string1::string_list1)) = check_ (lambda2) ((string1::string_list1)) ((Nil))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) ((string1::string_list1)) = check_ (lambda3) ((string1::string_list1)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string1 : string
string_list1 : string list
Case1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = true
---------------------------------------
sub_check_ta1 (lambda3) ((string1::string_list1)) = if check_ (lambda2) ((string1::string_list1)) ((Nil)) then check_ (lambda3) ((string1::string_list1)) ((Nil)) else false

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) ((string1::string_list1)) = check_ (lambda2) ((string1::string_list1)) ((Nil))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) ((string1::string_list1)) = check_ (lambda3) ((string1::string_list1)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string1 : string
string_list1 : string list
Case1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = true
---------------------------------------
sub_check_ta1 (lambda3) ((string1::string_list1)) = if sub_check_ta1 (lambda2) ((string1::string_list1)) then check_ (lambda3) ((string1::string_list1)) ((Nil)) else false

1 goal(s) more...

1 conjecture(s) more...
lambda2 string1 string_list1 asdf
Tactic List : 3
rewrite Case1 in goal at 0(rank:14)
rewrite IH2 in goal at 0(rank:14)
rewrite <- IH2 in goal at 0(rank:14)
=================================================
Progress: 50


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) ((string1::string_list1)) = check_ (lambda2) ((string1::string_list1)) ((Nil))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) ((string1::string_list1)) = check_ (lambda3) ((string1::string_list1)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string1 : string
string_list1 : string list
Case1 : check_ (lambda2) ((string1::string_list1)) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda3) ((string1::string_list1)) = check_ (lambda3) ((string1::string_list1)) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) ((string1::string_list1)) = check_ (lambda2) ((string1::string_list1)) ((Nil))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) ((string1::string_list1)) = check_ (lambda3) ((string1::string_list1)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string1 : string
string_list1 : string list
Case1 : check_ (lambda2) ((string1::string_list1)) ((Nil)) = true
---------------------------------------
check_ (lambda3) ((string1::string_list1)) ((Nil)) = check_ (lambda3) ((string1::string_list1)) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5)
=================================================
Progress: 51


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) ((string1::string_list1)) = check_ (lambda2) ((string1::string_list1)) ((Nil))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) ((string1::string_list1)) = check_ (lambda3) ((string1::string_list1)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string1 : string
string_list1 : string list
Case1 : check_ (lambda2) ((string1::string_list1)) ((Nil)) = true
---------------------------------------
check_ (lambda3) ((string1::string_list1)) ((Nil)) = check_ (lambda3) ((string1::string_list1)) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) ((string1::string_list1)) = check_ (lambda2) ((string1::string_list1)) ((Nil))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) ((string1::string_list1)) = check_ (lambda3) ((string1::string_list1)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string1 : string
string_list1 : string list
Case1 : check_ (lambda2) ((string1::string_list1)) ((Nil)) = false
---------------------------------------
false = false

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 1
Tactic List : 1
reflexivity(rank:4)
=================================================
Progress: 52


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) ((string1::string_list1)) = check_ (lambda2) ((string1::string_list1)) ((Nil))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) ((string1::string_list1)) = check_ (lambda3) ((string1::string_list1)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string1 : string
string_list1 : string list
Case1 : check_ (lambda2) ((string1::string_list1)) ((Nil)) = false
---------------------------------------
false = false

0 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 4)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check_ (lambda2) ((Nil)) ((Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = check_ (lambda2) ((string1::(Nil))) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
Deduplication: 10
Tactic List : 2
rewrite lemma3 in goal at 0(rank:12)
rewrite <- lemma3 in goal at 0(rank:12)
=================================================
Progress: 53


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check_ (lambda2) ((Nil)) ((Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = check_ (lambda2) ((string1::(Nil))) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check_ (lambda2) ((Nil)) ((Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
check_ (lambda2) ((string1::(Nil))) ((Nil)) = check_ (lambda2) ((string1::(Nil))) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3)
=================================================
Progress: 54


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check_ (lambda2) ((Nil)) ((Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
check_ (lambda2) ((string1::(Nil))) ((Nil)) = check_ (lambda2) ((string1::(Nil))) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check_ (lambda2) ((Nil)) ((Nil))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = check_ (lambda3) ((Nil)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
sub_check_ta1 (C (lambda2) (lambda3)) ((Nil)) = check_ (C (lambda2) (lambda3)) ((Nil)) ((Nil))

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 1
Tactic List : 1
simpl in goal(rank:3)
=================================================
Progress: 55


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check_ (lambda2) ((Nil)) ((Nil))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = check_ (lambda3) ((Nil)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
sub_check_ta1 (C (lambda2) (lambda3)) ((Nil)) = check_ (C (lambda2) (lambda3)) ((Nil)) ((Nil))

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check_ (lambda2) ((Nil)) ((Nil))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = check_ (lambda3) ((Nil)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((Nil)) then sub_check_ta1 (lambda3) ((Nil)) else false = if check_ (lambda2) ((Nil)) ((Nil)) then check_ (lambda3) ((Nil)) ((Nil)) else false

0 goal(s) more...

0 conjecture(s) more...
lambda2 lambda2 asdf
Tactic List : 4
case check_ (lambda2) ((Nil)) ((Nil))(rank:4)
case sub_check_ta1 (lambda2) ((Nil))(rank:4)
rewrite IH1 in goal at 0(rank:11)
rewrite <- IH1 in goal at 0(rank:11)
=================================================
Progress: 56


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check_ (lambda2) ((Nil)) ((Nil))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = check_ (lambda3) ((Nil)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((Nil)) then sub_check_ta1 (lambda3) ((Nil)) else false = if check_ (lambda2) ((Nil)) ((Nil)) then check_ (lambda3) ((Nil)) ((Nil)) else false

0 goal(s) more...

0 conjecture(s) more...
>>> case check_ (lambda2) ((Nil)) ((Nil))(rank : 4)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = true
IH2 : sub_check_ta1 (lambda3) ((Nil)) = check_ (lambda3) ((Nil)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : check_ (lambda2) ((Nil)) ((Nil)) = true
---------------------------------------
if sub_check_ta1 (lambda2) ((Nil)) then sub_check_ta1 (lambda3) ((Nil)) else false = check_ (lambda3) ((Nil)) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
lambda2 asdf
Tactic List : 3
rewrite IH1 in goal at 0(rank:12)
rewrite IH2 in goal at 0(rank:20)
rewrite <- IH2 in goal at 0(rank:20)
=================================================
Progress: 57


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check_ (lambda2) ((Nil)) ((Nil))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = check_ (lambda3) ((Nil)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((Nil)) then sub_check_ta1 (lambda3) ((Nil)) else false = if check_ (lambda2) ((Nil)) ((Nil)) then check_ (lambda3) ((Nil)) ((Nil)) else false

0 goal(s) more...

0 conjecture(s) more...
>>> case sub_check_ta1 (lambda2) ((Nil))(rank : 4)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : true = check_ (lambda2) ((Nil)) ((Nil))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = check_ (lambda3) ((Nil)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check_ta1 (lambda2) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda3) ((Nil)) = if check_ (lambda2) ((Nil)) ((Nil)) then check_ (lambda3) ((Nil)) ((Nil)) else false

1 goal(s) more...

0 conjecture(s) more...
lambda2 asdf
Tactic List : 2
case check_ (lambda2) ((Nil)) ((Nil))(rank:5)
rewrite <- IH1 in goal at 0(rank:12)
=================================================
Progress: 58


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : true = check_ (lambda2) ((Nil)) ((Nil))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = check_ (lambda3) ((Nil)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check_ta1 (lambda2) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda3) ((Nil)) = if check_ (lambda2) ((Nil)) ((Nil)) then check_ (lambda3) ((Nil)) ((Nil)) else false

1 goal(s) more...

0 conjecture(s) more...
>>> case check_ (lambda2) ((Nil)) ((Nil))(rank : 5)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : true = true
IH2 : sub_check_ta1 (lambda3) ((Nil)) = check_ (lambda3) ((Nil)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check_ta1 (lambda2) ((Nil)) = true
Case2 : check_ (lambda2) ((Nil)) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda3) ((Nil)) = check_ (lambda3) ((Nil)) ((Nil))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:13)
rewrite <- IH2 in goal at 0(rank:13)
=================================================
Progress: 59


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check_ (lambda2) ((Nil)) ((Nil))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = check_ (lambda3) ((Nil)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((Nil)) then sub_check_ta1 (lambda3) ((Nil)) else false = if check_ (lambda2) ((Nil)) ((Nil)) then check_ (lambda3) ((Nil)) ((Nil)) else false

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 11)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check_ (lambda2) ((Nil)) ((Nil))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = check_ (lambda3) ((Nil)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if check_ (lambda2) ((Nil)) ((Nil)) then sub_check_ta1 (lambda3) ((Nil)) else false = if check_ (lambda2) ((Nil)) ((Nil)) then check_ (lambda3) ((Nil)) ((Nil)) else false

0 goal(s) more...

0 conjecture(s) more...
lambda2 lambda2 asdf
Tactic List : 1
case check_ (lambda2) ((Nil)) ((Nil))(rank:4)
=================================================
Progress: 60


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check_ (lambda2) ((Nil)) ((Nil))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = check_ (lambda3) ((Nil)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if check_ (lambda2) ((Nil)) ((Nil)) then sub_check_ta1 (lambda3) ((Nil)) else false = if check_ (lambda2) ((Nil)) ((Nil)) then check_ (lambda3) ((Nil)) ((Nil)) else false

0 goal(s) more...

0 conjecture(s) more...
>>> case check_ (lambda2) ((Nil)) ((Nil))(rank : 4)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = true
IH2 : sub_check_ta1 (lambda3) ((Nil)) = check_ (lambda3) ((Nil)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : check_ (lambda2) ((Nil)) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda3) ((Nil)) = check_ (lambda3) ((Nil)) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:12)
rewrite <- IH2 in goal at 0(rank:12)
=================================================
Progress: 61


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check_ (lambda2) ((Nil)) ((Nil))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = check_ (lambda3) ((Nil)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((Nil)) then sub_check_ta1 (lambda3) ((Nil)) else false = if check_ (lambda2) ((Nil)) ((Nil)) then check_ (lambda3) ((Nil)) ((Nil)) else false

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 11)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check_ (lambda2) ((Nil)) ((Nil))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = check_ (lambda3) ((Nil)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((Nil)) then sub_check_ta1 (lambda3) ((Nil)) else false = if sub_check_ta1 (lambda2) ((Nil)) then check_ (lambda3) ((Nil)) ((Nil)) else false

0 goal(s) more...

0 conjecture(s) more...
lambda2 lambda2 asdf
Tactic List : 1
case sub_check_ta1 (lambda2) ((Nil))(rank:4)
=================================================
Progress: 62


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check_ (lambda2) ((Nil)) ((Nil))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = check_ (lambda3) ((Nil)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((Nil)) then sub_check_ta1 (lambda3) ((Nil)) else false = if sub_check_ta1 (lambda2) ((Nil)) then check_ (lambda3) ((Nil)) ((Nil)) else false

0 goal(s) more...

0 conjecture(s) more...
>>> case sub_check_ta1 (lambda2) ((Nil))(rank : 4)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : true = check_ (lambda2) ((Nil)) ((Nil))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = check_ (lambda3) ((Nil)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check_ta1 (lambda2) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda3) ((Nil)) = check_ (lambda3) ((Nil)) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:12)
rewrite <- IH2 in goal at 0(rank:12)
=================================================
Progress: 63


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = true
IH2 : sub_check_ta1 (lambda3) ((Nil)) = check_ (lambda3) ((Nil)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : check_ (lambda2) ((Nil)) ((Nil)) = true
---------------------------------------
if sub_check_ta1 (lambda2) ((Nil)) then sub_check_ta1 (lambda3) ((Nil)) else false = check_ (lambda3) ((Nil)) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = true
IH2 : sub_check_ta1 (lambda3) ((Nil)) = check_ (lambda3) ((Nil)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : check_ (lambda2) ((Nil)) ((Nil)) = true
---------------------------------------
if true then sub_check_ta1 (lambda3) ((Nil)) else false = check_ (lambda3) ((Nil)) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:4)
=================================================
Progress: 64


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = true
IH2 : sub_check_ta1 (lambda3) ((Nil)) = check_ (lambda3) ((Nil)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : check_ (lambda2) ((Nil)) ((Nil)) = true
---------------------------------------
if true then sub_check_ta1 (lambda3) ((Nil)) else false = check_ (lambda3) ((Nil)) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 4)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = true
IH2 : sub_check_ta1 (lambda3) ((Nil)) = check_ (lambda3) ((Nil)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : check_ (lambda2) ((Nil)) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda3) ((Nil)) = check_ (lambda3) ((Nil)) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:12)
rewrite <- IH2 in goal at 0(rank:12)
=================================================
Progress: 65


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : true = check_ (lambda2) ((Nil)) ((Nil))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = check_ (lambda3) ((Nil)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check_ta1 (lambda2) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda3) ((Nil)) = if check_ (lambda2) ((Nil)) ((Nil)) then check_ (lambda3) ((Nil)) ((Nil)) else false

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : true = check_ (lambda2) ((Nil)) ((Nil))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = check_ (lambda3) ((Nil)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check_ta1 (lambda2) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda3) ((Nil)) = if true then check_ (lambda3) ((Nil)) ((Nil)) else false

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:4)
=================================================
Progress: 66


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : true = check_ (lambda2) ((Nil)) ((Nil))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = check_ (lambda3) ((Nil)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check_ta1 (lambda2) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda3) ((Nil)) = if true then check_ (lambda3) ((Nil)) ((Nil)) else false

1 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 4)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : true = check_ (lambda2) ((Nil)) ((Nil))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = check_ (lambda3) ((Nil)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check_ta1 (lambda2) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda3) ((Nil)) = check_ (lambda3) ((Nil)) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:12)
rewrite <- IH2 in goal at 0(rank:12)
=================================================
Progress: 67


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = true
IH2 : sub_check_ta1 (lambda3) ((Nil)) = check_ (lambda3) ((Nil)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : check_ (lambda2) ((Nil)) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda3) ((Nil)) = check_ (lambda3) ((Nil)) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = true
IH2 : sub_check_ta1 (lambda3) ((Nil)) = check_ (lambda3) ((Nil)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : check_ (lambda2) ((Nil)) ((Nil)) = true
---------------------------------------
check_ (lambda3) ((Nil)) ((Nil)) = check_ (lambda3) ((Nil)) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3)
=================================================
Progress: 68


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = true
IH2 : sub_check_ta1 (lambda3) ((Nil)) = check_ (lambda3) ((Nil)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : check_ (lambda2) ((Nil)) ((Nil)) = true
---------------------------------------
check_ (lambda3) ((Nil)) ((Nil)) = check_ (lambda3) ((Nil)) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = false
IH2 : sub_check_ta1 (lambda3) ((Nil)) = check_ (lambda3) ((Nil)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : check_ (lambda2) ((Nil)) ((Nil)) = false
---------------------------------------
false = false

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 1
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 69


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = false
IH2 : sub_check_ta1 (lambda3) ((Nil)) = check_ (lambda3) ((Nil)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : check_ (lambda2) ((Nil)) ((Nil)) = false
---------------------------------------
false = false

0 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


No conjecture
Proof Success
Proof
assert forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
simpl in goal
induction lambda1
reflexivity
simpl in goal
assert forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = check_ (lambda1) ((string1::string_list1)) ((Nil))
induction lambda1
simpl in goal
intro string1
induction string_list1
case string_eq (string1) (string2)
reflexivity
reflexivity
case string_eq (string1) (string2)
reflexivity
case string_eq (string3) (string2)
reflexivity
case mem (string2) (string_list2)
rewrite IH1 in goal at 0
reflexivity
rewrite IH1 in goal at 0
reflexivity
simpl in goal
rewrite IH1 in goal at 0
reflexivity
simpl in goal
intro string1
intro string_list1
rewrite IH1 in goal at 0
case check_ (lambda2) ((string1::string_list1)) ((Nil))
rewrite IH2 in goal at 0
reflexivity
reflexivity
rewrite lemma3 in goal at 0
reflexivity
simpl in goal
rewrite IH1 in goal at 0
case check_ (lambda2) ((Nil)) ((Nil))
rewrite IH2 in goal at 0
reflexivity
reflexivity
Qed
