Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (l:lambda), check_ta1 (l) = check (l)(rank : 0)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:3)
=================================================
Progress: 2


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) ((Nil)) = check_ (lambda1) ((Nil)) ((Nil))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:5)
=================================================
Progress: 3


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) ((Nil)) = check_ (lambda1) ((Nil)) ((Nil))

0 goal(s) more...

0 conjecture(s) more...
>>> induction lambda1(rank : 5)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
sub_check_ta1 (V (string1)) ((Nil)) = check_ (V (string1)) ((Nil)) ((Nil))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:4)
=================================================
Progress: 4


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
sub_check_ta1 (V (string1)) ((Nil)) = check_ (V (string1)) ((Nil)) ((Nil))

2 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 4)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check_ (lambda2) ((Nil)) ((Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (P (string1) (lambda2)) ((Nil)) = check_ (P (string1) (lambda2)) ((Nil)) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:4)
=================================================
Progress: 5


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check_ (lambda2) ((Nil)) ((Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (P (string1) (lambda2)) ((Nil)) = check_ (P (string1) (lambda2)) ((Nil)) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 4)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check_ (lambda2) ((Nil)) ((Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = check_ (lambda2) ((string1::(Nil))) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
advanced_generalize done
Lemma : forall (lambda2:lambda) (lst:string list), sub_check_ta1 (lambda2) (lst) = check_ (lambda2) (lst) ((Nil))
Model : lambda2: V ("dru"), lst: (Nil)
Model : lambda2: V ("eba"), lst: (Nil)
Model : lambda2: P ("rjm") (C (V ("lep")) (V ("rfm"))), lst: (Nil)
Substituting variables...
Simplifying conditions and property...
let rec check_ m al nl =
match (m) with
| V n -> for_all (aux (al)) ((n::nl))
| P n m_ -> check_ (m_) ((n::al)) (nl)
| C m_1 m_2 -> && (check_ (m_1) (al) (nl)) (check_ (m_2) (al) (nl))
let check m =
check_ (m) ((Nil)) ((Nil))
prop list:
sub_check_ta1 (V ("dru")) ((Nil)) = check_ (V ("dru")) ((Nil)) ((Nil))
sub_check_ta1 (V ("eba")) ((Nil)) = check_ (V ("eba")) ((Nil)) ((Nil))
sub_check_ta1 (P ("rjm") (C (V ("lep")) (V ("rfm")))) ((Nil)) = check_ (P ("rjm") (C (V ("lep")) (V ("rfm")))) ((Nil)) ((Nil))
Simplifying took 0.003665 seconds
Result : true
New Env

;;
Lemma List
forall (lambda2:lambda) (lst:string list), sub_check_ta1 (lambda2) (lst) = check_ (lambda2) (lst) ((Nil))
End of Lemma List


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check_ (lambda2) ((Nil)) ((Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = check_ (lambda2) ((string1::(Nil))) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 6


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check_ (lambda2) ((Nil)) ((Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = check_ (lambda2) ((string1::(Nil))) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> assert forall (lambda2:lambda) (lst:string list), sub_check_ta1 (lambda2) (lst) = check_ (lambda2) (lst) ((Nil))(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:7)
=================================================
Progress: 7


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))

---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> induction lambda1(rank : 7)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (V (string1)) (string_list1) = check_ (V (string1)) (string_list1) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7)
=================================================
Progress: 8


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (V (string1)) (string_list1) = check_ (V (string1)) (string_list1) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
forall (string_list1:string list), is_mem_ta1 (string_list1) (string1) = if mem (string1) (string_list1) then for_all (aux (string_list1)) ((Nil)) else false

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction string_list1(rank:8)
=================================================
Progress: 9


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
forall (string_list1:string list), is_mem_ta1 (string_list1) (string1) = if mem (string1) (string_list1) then for_all (aux (string_list1)) ((Nil)) else false

2 goal(s) more...

1 conjecture(s) more...
>>> induction string_list1(rank : 8)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
Base2 : string_list1 = (Nil)
---------------------------------------
is_mem_ta1 ((Nil)) (string1) = if mem (string1) ((Nil)) then for_all (aux ((Nil))) ((Nil)) else false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 10


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
Base2 : string_list1 = (Nil)
---------------------------------------
is_mem_ta1 ((Nil)) (string1) = if mem (string1) ((Nil)) then for_all (aux ((Nil))) ((Nil)) else false

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = if mem (string1) (string_list2) then for_all (aux (string_list2)) ((Nil)) else false
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
is_mem_ta1 ((string2::string_list2)) (string1) = if mem (string1) ((string2::string_list2)) then for_all (aux ((string2::string_list2))) ((Nil)) else false

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:7)
=================================================
Progress: 11


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = if mem (string1) (string_list2) then for_all (aux (string_list2)) ((Nil)) else false
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
is_mem_ta1 ((string2::string_list2)) (string1) = if mem (string1) ((string2::string_list2)) then for_all (aux ((string2::string_list2))) ((Nil)) else false

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = if mem (string1) (string_list2) then for_all (aux (string_list2)) ((Nil)) else false
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = if if string_eq (string2) (string1) then true else mem (string1) (string_list2) then for_all (aux ((string2::string_list2))) ((Nil)) else false

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
case if string_eq (string2) (string1) then true else mem (string1) (string_list2)(rank:8)
rewrite IH1 in goal at 0(rank:15)
case string_eq (string2) (string1)(rank:8)
=================================================
Progress: 12


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = if mem (string1) (string_list2) then for_all (aux (string_list2)) ((Nil)) else false
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = if if string_eq (string2) (string1) then true else mem (string1) (string_list2) then for_all (aux ((string2::string_list2))) ((Nil)) else false

2 goal(s) more...

1 conjecture(s) more...
>>> case if string_eq (string2) (string1) then true else mem (string1) (string_list2)(rank : 8)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = if mem (string1) (string_list2) then for_all (aux (string_list2)) ((Nil)) else false
Inductive1 : string_list1 = (string2::string_list2)
Case1 : if string_eq (string2) (string1) then true else mem (string1) (string_list2) = true
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case string_eq (string2) (string1)(rank:9)
rewrite IH1 in goal at 0(rank:24)
=================================================
Progress: 13


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = if mem (string1) (string_list2) then for_all (aux (string_list2)) ((Nil)) else false
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = if if string_eq (string2) (string1) then true else mem (string1) (string_list2) then for_all (aux ((string2::string_list2))) ((Nil)) else false

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 8)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = if mem (string1) (string_list2) then for_all (aux (string_list2)) ((Nil)) else false
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = true
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 14


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = if mem (string1) (string_list2) then for_all (aux (string_list2)) ((Nil)) else false
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = true
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = if mem (string1) (string_list2) then for_all (aux (string_list2)) ((Nil)) else false
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if mem (string1) (string_list2) then for_all (aux ((string2::string_list2))) ((Nil)) else false

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 3
case mem (string1) (string_list2)(rank:8)
rewrite IH1 in goal at 0(rank:15)
rewrite <- Case1 in goal at 0(rank:23)
=================================================
Progress: 15


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = if mem (string1) (string_list2) then for_all (aux (string_list2)) ((Nil)) else false
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if mem (string1) (string_list2) then for_all (aux ((string2::string_list2))) ((Nil)) else false

2 goal(s) more...

1 conjecture(s) more...
>>> case mem (string1) (string_list2)(rank : 8)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = true
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : mem (string1) (string_list2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:16)
rewrite <- Case2 in goal at 0(rank:16)
rewrite <- IH1 in goal at 0(rank:16)
=================================================
Progress: 16


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = if mem (string1) (string_list2) then for_all (aux (string_list2)) ((Nil)) else false
Inductive1 : string_list1 = (string2::string_list2)
Case1 : if string_eq (string2) (string1) then true else mem (string1) (string_list2) = true
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 9)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = if mem (string1) (string_list2) then for_all (aux (string_list2)) ((Nil)) else false
Inductive1 : string_list1 = (string2::string_list2)
Case1 : true = true
Case2 : string_eq (string2) (string1) = true
---------------------------------------
true = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8)
=================================================
Progress: 17


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = if mem (string1) (string_list2) then for_all (aux (string_list2)) ((Nil)) else false
Inductive1 : string_list1 = (string2::string_list2)
Case1 : true = true
Case2 : string_eq (string2) (string1) = true
---------------------------------------
true = true

4 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 8)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = if mem (string1) (string_list2) then for_all (aux (string_list2)) ((Nil)) else false
Inductive1 : string_list1 = (string2::string_list2)
Case1 : mem (string1) (string_list2) = true
Case2 : string_eq (string2) (string1) = false
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

3 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:16)
rewrite IH1 in goal at 0(rank:24)
=================================================
Progress: 18


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = if mem (string1) (string_list2) then for_all (aux (string_list2)) ((Nil)) else false
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = if if string_eq (string2) (string1) then true else mem (string1) (string_list2) then for_all (aux ((string2::string_list2))) ((Nil)) else false

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 15)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = if mem (string1) (string_list2) then for_all (aux (string_list2)) ((Nil)) else false
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else if mem (string1) (string_list2) then for_all (aux (string_list2)) ((Nil)) else false = if if string_eq (string2) (string1) then true else mem (string1) (string_list2) then for_all (aux ((string2::string_list2))) ((Nil)) else false

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case if string_eq (string2) (string1) then true else mem (string1) (string_list2)(rank:8)
case string_eq (string2) (string1)(rank:8)
=================================================
Progress: 19


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = if mem (string1) (string_list2) then for_all (aux (string_list2)) ((Nil)) else false
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else if mem (string1) (string_list2) then for_all (aux (string_list2)) ((Nil)) else false = if if string_eq (string2) (string1) then true else mem (string1) (string_list2) then for_all (aux ((string2::string_list2))) ((Nil)) else false

2 goal(s) more...

1 conjecture(s) more...
>>> case if string_eq (string2) (string1) then true else mem (string1) (string_list2)(rank : 8)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = if mem (string1) (string_list2) then for_all (aux (string_list2)) ((Nil)) else false
Inductive1 : string_list1 = (string2::string_list2)
Case1 : if string_eq (string2) (string1) then true else mem (string1) (string_list2) = true
---------------------------------------
if string_eq (string2) (string1) then true else if mem (string1) (string_list2) then for_all (aux (string_list2)) ((Nil)) else false = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case string_eq (string2) (string1)(rank:9)
rewrite <- IH1 in goal at 0(rank:16)
=================================================
Progress: 20


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = if mem (string1) (string_list2) then for_all (aux (string_list2)) ((Nil)) else false
Inductive1 : string_list1 = (string2::string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else if mem (string1) (string_list2) then for_all (aux (string_list2)) ((Nil)) else false = if if string_eq (string2) (string1) then true else mem (string1) (string_list2) then for_all (aux ((string2::string_list2))) ((Nil)) else false

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 8)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = if mem (string1) (string_list2) then for_all (aux (string_list2)) ((Nil)) else false
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = true
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case1 at 0(rank:8)
=================================================
Progress: 21


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = if mem (string1) (string_list2) then for_all (aux (string_list2)) ((Nil)) else false
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = true
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 8)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = if mem (string1) (string_list2) then for_all (aux (string_list2)) ((Nil)) else false
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string2 = string1
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
advanced_generalize done
=================================================
Progress: 22


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = if mem (string1) (string_list2) then for_all (aux (string_list2)) ((Nil)) else false
Inductive1 : string_list1 = (string2::string_list2)
Case1 : if string_eq (string2) (string1) then true else mem (string1) (string_list2) = true
---------------------------------------
if string_eq (string2) (string1) then true else if mem (string1) (string_list2) then for_all (aux (string_list2)) ((Nil)) else false = true

3 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string1)(rank : 9)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = if mem (string1) (string_list2) then for_all (aux (string_list2)) ((Nil)) else false
Inductive1 : string_list1 = (string2::string_list2)
Case1 : true = true
Case2 : string_eq (string2) (string1) = true
---------------------------------------
true = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8)
=================================================
Progress: 23


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = if mem (string1) (string_list2) then for_all (aux (string_list2)) ((Nil)) else false
Inductive1 : string_list1 = (string2::string_list2)
Case1 : true = true
Case2 : string_eq (string2) (string1) = true
---------------------------------------
true = true

4 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 8)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = if mem (string1) (string_list2) then for_all (aux (string_list2)) ((Nil)) else false
Inductive1 : string_list1 = (string2::string_list2)
Case1 : mem (string1) (string_list2) = true
Case2 : string_eq (string2) (string1) = false
---------------------------------------
if mem (string1) (string_list2) then for_all (aux (string_list2)) ((Nil)) else false = true

3 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 4
rewrite Case1 in goal at 0(rank:16)
rewrite <- Case1 in goal at 0(rank:16)
rewrite <- IH1 in goal at 0(rank:16)
rewrite <- Case2 in goal at 0(rank:24)
=================================================
Progress: 24


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = if mem (string1) (string_list2) then for_all (aux (string_list2)) ((Nil)) else false
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if mem (string1) (string_list2) then for_all (aux ((string2::string_list2))) ((Nil)) else false

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 15)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = if mem (string1) (string_list2) then for_all (aux (string_list2)) ((Nil)) else false
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
if mem (string1) (string_list2) then for_all (aux (string_list2)) ((Nil)) else false = if mem (string1) (string_list2) then for_all (aux ((string2::string_list2))) ((Nil)) else false

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case mem (string1) (string_list2)(rank:8)
=================================================
Progress: 25


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = if mem (string1) (string_list2) then for_all (aux (string_list2)) ((Nil)) else false
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
---------------------------------------
if mem (string1) (string_list2) then for_all (aux (string_list2)) ((Nil)) else false = if mem (string1) (string_list2) then for_all (aux ((string2::string_list2))) ((Nil)) else false

2 goal(s) more...

1 conjecture(s) more...
>>> case mem (string1) (string_list2)(rank : 8)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = true
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : mem (string1) (string_list2) = true
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 26


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = true
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : mem (string1) (string_list2) = true
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = false
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : mem (string1) (string_list2) = false
---------------------------------------
false = false

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
reflexivity(rank:6)
=================================================
Progress: 27


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = false
Inductive1 : string_list1 = (string2::string_list2)
Case1 : string_eq (string2) (string1) = false
Case2 : mem (string1) (string_list2) = false
---------------------------------------
false = false

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 6)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = check_ (lambda2) (string_list1) ((Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (P (string1) (lambda2)) (string_list1) = check_ (P (string1) (lambda2)) (string_list1) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 12
Tactic List : 1
simpl in goal(rank:6)
=================================================
Progress: 28


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = check_ (lambda2) (string_list1) ((Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (P (string1) (lambda2)) (string_list1) = check_ (P (string1) (lambda2)) (string_list1) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = check_ (lambda2) (string_list1) ((Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (lambda2) ((string1::string_list1)) = check_ (lambda2) ((string1::string_list1)) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
intro string_list1(rank:6)
rewrite IH1 in goal at 0(rank:14)
rewrite <- IH1 in goal at 0(rank:14)
=================================================
Progress: 29


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = check_ (lambda2) (string_list1) ((Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (lambda2) ((string1::string_list1)) = check_ (lambda2) ((string1::string_list1)) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> intro string_list1(rank : 6)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = check_ (lambda2) (string_list1) ((Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
---------------------------------------
sub_check_ta1 (lambda2) ((string1::string_list1)) = check_ (lambda2) ((string1::string_list1)) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:14)
rewrite <- IH1 in goal at 0(rank:14)
=================================================
Progress: 30


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = check_ (lambda2) (string_list1) ((Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (lambda2) ((string1::string_list1)) = check_ (lambda2) ((string1::string_list1)) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = check_ (lambda2) (string_list1) ((Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
forall (string_list1:string list), check_ (lambda2) ((string1::string_list1)) ((Nil)) = check_ (lambda2) ((string1::string_list1)) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5)
=================================================
Progress: 31


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = check_ (lambda2) (string_list1) ((Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
forall (string_list1:string list), check_ (lambda2) ((string1::string_list1)) ((Nil)) = check_ (lambda2) ((string1::string_list1)) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = check_ (lambda2) (string_list1) ((Nil))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = check_ (lambda3) (string_list1) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (C (lambda2) (lambda3)) (string_list1) = check_ (C (lambda2) (lambda3)) (string_list1) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 3
Tactic List : 1
simpl in goal(rank:5)
=================================================
Progress: 32


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = check_ (lambda2) (string_list1) ((Nil))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = check_ (lambda3) (string_list1) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (C (lambda2) (lambda3)) (string_list1) = check_ (C (lambda2) (lambda3)) (string_list1) ((Nil))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 5)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = check_ (lambda2) (string_list1) ((Nil))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = check_ (lambda3) (string_list1) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string_list1:string list), if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false = if check_ (lambda2) (string_list1) ((Nil)) then check_ (lambda3) (string_list1) ((Nil)) else false

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:5)
=================================================
Progress: 33


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = check_ (lambda2) (string_list1) ((Nil))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = check_ (lambda3) (string_list1) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string_list1:string list), if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false = if check_ (lambda2) (string_list1) ((Nil)) then check_ (lambda3) (string_list1) ((Nil)) else false

0 goal(s) more...

1 conjecture(s) more...
>>> intro string_list1(rank : 5)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = check_ (lambda2) (string_list1) ((Nil))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = check_ (lambda3) (string_list1) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
---------------------------------------
if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false = if check_ (lambda2) (string_list1) ((Nil)) then check_ (lambda3) (string_list1) ((Nil)) else false

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
case check_ (lambda2) (string_list1) ((Nil))(rank:6)
rewrite IH1 in goal at 0(rank:13)
rewrite IH2 in goal at 0(rank:13)
rewrite <- IH1 in goal at 0(rank:13)
rewrite <- IH2 in goal at 0(rank:13)
case sub_check_ta1 (lambda2) (string_list1)(rank:6)
=================================================
Progress: 34


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = check_ (lambda2) (string_list1) ((Nil))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = check_ (lambda3) (string_list1) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
---------------------------------------
if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false = if check_ (lambda2) (string_list1) ((Nil)) then check_ (lambda3) (string_list1) ((Nil)) else false

0 goal(s) more...

1 conjecture(s) more...
>>> case check_ (lambda2) (string_list1) ((Nil))(rank : 6)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = check_ (lambda2) (string_list1) ((Nil))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = check_ (lambda3) (string_list1) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Case1 : check_ (lambda2) (string_list1) ((Nil)) = true
---------------------------------------
if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false = check_ (lambda3) (string_list1) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
case sub_check_ta1 (lambda2) (string_list1)(rank:7)
rewrite <- IH2 in goal at 0(rank:14)
rewrite IH1 in goal at 0(rank:14)
rewrite IH2 in goal at 0(rank:14)
=================================================
Progress: 35


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = check_ (lambda2) (string_list1) ((Nil))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = check_ (lambda3) (string_list1) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
---------------------------------------
if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false = if check_ (lambda2) (string_list1) ((Nil)) then check_ (lambda3) (string_list1) ((Nil)) else false

0 goal(s) more...

1 conjecture(s) more...
>>> case sub_check_ta1 (lambda2) (string_list1)(rank : 6)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = check_ (lambda2) (string_list1) ((Nil))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = check_ (lambda3) (string_list1) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Case1 : sub_check_ta1 (lambda2) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda3) (string_list1) = if check_ (lambda2) (string_list1) ((Nil)) then check_ (lambda3) (string_list1) ((Nil)) else false

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
case check_ (lambda2) (string_list1) ((Nil))(rank:7)
rewrite <- IH2 in goal at 0(rank:14)
rewrite IH2 in goal at 0(rank:14)
rewrite <- IH1 in goal at 0(rank:14)
=================================================
Progress: 36


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = check_ (lambda2) (string_list1) ((Nil))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = check_ (lambda3) (string_list1) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Case1 : check_ (lambda2) (string_list1) ((Nil)) = true
---------------------------------------
if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false = check_ (lambda3) (string_list1) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> case sub_check_ta1 (lambda2) (string_list1)(rank : 7)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = check_ (lambda2) (string_list1) ((Nil))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = check_ (lambda3) (string_list1) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Case1 : check_ (lambda2) (string_list1) ((Nil)) = true
Case2 : sub_check_ta1 (lambda2) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda3) (string_list1) = check_ (lambda3) (string_list1) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:15)
rewrite <- IH2 in goal at 0(rank:15)
=================================================
Progress: 37


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = check_ (lambda2) (string_list1) ((Nil))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = check_ (lambda3) (string_list1) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Case1 : sub_check_ta1 (lambda2) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda3) (string_list1) = if check_ (lambda2) (string_list1) ((Nil)) then check_ (lambda3) (string_list1) ((Nil)) else false

1 goal(s) more...

1 conjecture(s) more...
>>> case check_ (lambda2) (string_list1) ((Nil))(rank : 7)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = check_ (lambda2) (string_list1) ((Nil))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = check_ (lambda3) (string_list1) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Case1 : sub_check_ta1 (lambda2) (string_list1) = true
Case2 : check_ (lambda2) (string_list1) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda3) (string_list1) = check_ (lambda3) (string_list1) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:15)
rewrite <- IH2 in goal at 0(rank:15)
=================================================
Progress: 38


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = check_ (lambda2) (string_list1) ((Nil))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = check_ (lambda3) (string_list1) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
---------------------------------------
if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false = if check_ (lambda2) (string_list1) ((Nil)) then check_ (lambda3) (string_list1) ((Nil)) else false

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = check_ (lambda2) (string_list1) ((Nil))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = check_ (lambda3) (string_list1) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
---------------------------------------
if check_ (lambda2) (string_list1) ((Nil)) then sub_check_ta1 (lambda3) (string_list1) else false = if check_ (lambda2) (string_list1) ((Nil)) then check_ (lambda3) (string_list1) ((Nil)) else false

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case check_ (lambda2) (string_list1) ((Nil))(rank:6)
=================================================
Progress: 39


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = check_ (lambda2) (string_list1) ((Nil))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = check_ (lambda3) (string_list1) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
---------------------------------------
if check_ (lambda2) (string_list1) ((Nil)) then sub_check_ta1 (lambda3) (string_list1) else false = if check_ (lambda2) (string_list1) ((Nil)) then check_ (lambda3) (string_list1) ((Nil)) else false

0 goal(s) more...

1 conjecture(s) more...
>>> case check_ (lambda2) (string_list1) ((Nil))(rank : 6)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = check_ (lambda2) (string_list1) ((Nil))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = check_ (lambda3) (string_list1) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Case1 : check_ (lambda2) (string_list1) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda3) (string_list1) = check_ (lambda3) (string_list1) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:14)
rewrite <- IH2 in goal at 0(rank:14)
=================================================
Progress: 40


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = check_ (lambda2) (string_list1) ((Nil))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = check_ (lambda3) (string_list1) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
---------------------------------------
if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false = if check_ (lambda2) (string_list1) ((Nil)) then check_ (lambda3) (string_list1) ((Nil)) else false

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = check_ (lambda2) (string_list1) ((Nil))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = check_ (lambda3) (string_list1) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
---------------------------------------
if sub_check_ta1 (lambda2) (string_list1) then check_ (lambda3) (string_list1) ((Nil)) else false = if check_ (lambda2) (string_list1) ((Nil)) then check_ (lambda3) (string_list1) ((Nil)) else false

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case check_ (lambda2) (string_list1) ((Nil))(rank:6)
rewrite <- IH1 in goal at 0(rank:13)
=================================================
Progress: 41


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = check_ (lambda2) (string_list1) ((Nil))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = check_ (lambda3) (string_list1) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
---------------------------------------
if sub_check_ta1 (lambda2) (string_list1) then check_ (lambda3) (string_list1) ((Nil)) else false = if check_ (lambda2) (string_list1) ((Nil)) then check_ (lambda3) (string_list1) ((Nil)) else false

0 goal(s) more...

1 conjecture(s) more...
>>> case check_ (lambda2) (string_list1) ((Nil))(rank : 6)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = check_ (lambda2) (string_list1) ((Nil))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = check_ (lambda3) (string_list1) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Case1 : check_ (lambda2) (string_list1) ((Nil)) = true
---------------------------------------
if sub_check_ta1 (lambda2) (string_list1) then check_ (lambda3) (string_list1) ((Nil)) else false = check_ (lambda3) (string_list1) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case sub_check_ta1 (lambda2) (string_list1)(rank:7)
rewrite IH1 in goal at 0(rank:22)
rewrite <- IH2 in goal at 0(rank:22)
rewrite <- IH2 in goal at 1(rank:22)
rewrite <- IH2 in goal at 2(rank:22)
=================================================
Progress: 42


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = check_ (lambda2) (string_list1) ((Nil))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = check_ (lambda3) (string_list1) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Case1 : check_ (lambda2) (string_list1) ((Nil)) = true
---------------------------------------
if sub_check_ta1 (lambda2) (string_list1) then check_ (lambda3) (string_list1) ((Nil)) else false = check_ (lambda3) (string_list1) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> case sub_check_ta1 (lambda2) (string_list1)(rank : 7)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = check_ (lambda2) (string_list1) ((Nil))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = check_ (lambda3) (string_list1) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Case1 : check_ (lambda2) (string_list1) ((Nil)) = true
Case2 : sub_check_ta1 (lambda2) (string_list1) = true
---------------------------------------
check_ (lambda3) (string_list1) ((Nil)) = check_ (lambda3) (string_list1) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:6)
=================================================
Progress: 43


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = check_ (lambda2) (string_list1) ((Nil))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = check_ (lambda3) (string_list1) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Case1 : check_ (lambda2) (string_list1) ((Nil)) = true
Case2 : sub_check_ta1 (lambda2) (string_list1) = true
---------------------------------------
check_ (lambda3) (string_list1) ((Nil)) = check_ (lambda3) (string_list1) ((Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 6)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = check_ (lambda2) (string_list1) ((Nil))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = check_ (lambda3) (string_list1) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Case1 : check_ (lambda2) (string_list1) ((Nil)) = true
Case2 : sub_check_ta1 (lambda2) (string_list1) = false
---------------------------------------
false = check_ (lambda3) (string_list1) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:14)
rewrite <- IH2 in goal at 0(rank:14)
=================================================
Progress: 44


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = check_ (lambda2) (string_list1) ((Nil))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = check_ (lambda3) (string_list1) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
---------------------------------------
if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false = if check_ (lambda2) (string_list1) ((Nil)) then check_ (lambda3) (string_list1) ((Nil)) else false

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = check_ (lambda2) (string_list1) ((Nil))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = check_ (lambda3) (string_list1) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
---------------------------------------
if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false = if sub_check_ta1 (lambda2) (string_list1) then check_ (lambda3) (string_list1) ((Nil)) else false

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case sub_check_ta1 (lambda2) (string_list1)(rank:6)
=================================================
Progress: 45


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = check_ (lambda2) (string_list1) ((Nil))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = check_ (lambda3) (string_list1) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
---------------------------------------
if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false = if sub_check_ta1 (lambda2) (string_list1) then check_ (lambda3) (string_list1) ((Nil)) else false

0 goal(s) more...

1 conjecture(s) more...
>>> case sub_check_ta1 (lambda2) (string_list1)(rank : 6)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = check_ (lambda2) (string_list1) ((Nil))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = check_ (lambda3) (string_list1) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Case1 : sub_check_ta1 (lambda2) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda3) (string_list1) = check_ (lambda3) (string_list1) ((Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:14)
rewrite <- IH2 in goal at 0(rank:14)
=================================================
Progress: 46


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = check_ (lambda2) (string_list1) ((Nil))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = check_ (lambda3) (string_list1) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
---------------------------------------
if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false = if check_ (lambda2) (string_list1) ((Nil)) then check_ (lambda3) (string_list1) ((Nil)) else false

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = check_ (lambda2) (string_list1) ((Nil))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = check_ (lambda3) (string_list1) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
---------------------------------------
if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false = if check_ (lambda2) (string_list1) ((Nil)) then sub_check_ta1 (lambda3) (string_list1) else false

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case sub_check_ta1 (lambda2) (string_list1)(rank:6)
=================================================
Progress: 47


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = check_ (lambda2) (string_list1) ((Nil))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = check_ (lambda3) (string_list1) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
---------------------------------------
if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false = if check_ (lambda2) (string_list1) ((Nil)) then sub_check_ta1 (lambda3) (string_list1) else false

0 goal(s) more...

1 conjecture(s) more...
>>> case sub_check_ta1 (lambda2) (string_list1)(rank : 6)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = check_ (lambda2) (string_list1) ((Nil))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = check_ (lambda3) (string_list1) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Case1 : sub_check_ta1 (lambda2) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda3) (string_list1) = if check_ (lambda2) (string_list1) ((Nil)) then sub_check_ta1 (lambda3) (string_list1) else false

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case check_ (lambda2) (string_list1) ((Nil))(rank:7)
rewrite <- IH1 in goal at 0(rank:14)
rewrite IH2 in goal at 2(rank:22)
rewrite IH2 in goal at 0(rank:22)
rewrite IH2 in goal at 1(rank:22)
=================================================
Progress: 48


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = check_ (lambda2) (string_list1) ((Nil))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = check_ (lambda3) (string_list1) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Case1 : sub_check_ta1 (lambda2) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda3) (string_list1) = if check_ (lambda2) (string_list1) ((Nil)) then sub_check_ta1 (lambda3) (string_list1) else false

1 goal(s) more...

1 conjecture(s) more...
>>> case check_ (lambda2) (string_list1) ((Nil))(rank : 7)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = check_ (lambda2) (string_list1) ((Nil))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = check_ (lambda3) (string_list1) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Case1 : sub_check_ta1 (lambda2) (string_list1) = true
Case2 : check_ (lambda2) (string_list1) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda3) (string_list1) = sub_check_ta1 (lambda3) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:6)
=================================================
Progress: 49


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = check_ (lambda2) (string_list1) ((Nil))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = check_ (lambda3) (string_list1) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Case1 : sub_check_ta1 (lambda2) (string_list1) = true
Case2 : check_ (lambda2) (string_list1) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda3) (string_list1) = sub_check_ta1 (lambda3) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 6)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = check_ (lambda2) (string_list1) ((Nil))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = check_ (lambda3) (string_list1) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
Case1 : sub_check_ta1 (lambda2) (string_list1) = true
Case2 : check_ (lambda2) (string_list1) ((Nil)) = false
---------------------------------------
sub_check_ta1 (lambda3) (string_list1) = false

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:14)
rewrite IH2 in goal at 0(rank:22)
=================================================
Progress: 50


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = check_ (lambda2) (string_list1) ((Nil))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = check_ (lambda3) (string_list1) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
---------------------------------------
if sub_check_ta1 (lambda2) (string_list1) then check_ (lambda3) (string_list1) ((Nil)) else false = if check_ (lambda2) (string_list1) ((Nil)) then check_ (lambda3) (string_list1) ((Nil)) else false

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = check_ (lambda2) (string_list1) ((Nil))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = check_ (lambda3) (string_list1) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
---------------------------------------
if sub_check_ta1 (lambda2) (string_list1) then check_ (lambda3) (string_list1) ((Nil)) else false = if sub_check_ta1 (lambda2) (string_list1) then check_ (lambda3) (string_list1) ((Nil)) else false

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:4)
=================================================
Progress: 51


1st goal of : forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = check_ (lambda2) (string_list1) ((Nil))
IH2 : forall (string_list1:string list), sub_check_ta1 (lambda3) (string_list1) = check_ (lambda3) (string_list1) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string_list1 : string list
---------------------------------------
if sub_check_ta1 (lambda2) (string_list1) then check_ (lambda3) (string_list1) ((Nil)) else false = if sub_check_ta1 (lambda2) (string_list1) then check_ (lambda3) (string_list1) ((Nil)) else false

0 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 4)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check_ (lambda2) ((Nil)) ((Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = check_ (lambda2) ((string1::(Nil))) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
Deduplication: 26
Tactic List : 2
rewrite lemma3 in goal at 0(rank:12)
rewrite <- lemma3 in goal at 0(rank:12)
=================================================
Progress: 52


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check_ (lambda2) ((Nil)) ((Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) ((string1::(Nil))) = check_ (lambda2) ((string1::(Nil))) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check_ (lambda2) ((Nil)) ((Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
check_ (lambda2) ((string1::(Nil))) ((Nil)) = check_ (lambda2) ((string1::(Nil))) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3)
=================================================
Progress: 53


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check_ (lambda2) ((Nil)) ((Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
check_ (lambda2) ((string1::(Nil))) ((Nil)) = check_ (lambda2) ((string1::(Nil))) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check_ (lambda2) ((Nil)) ((Nil))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = check_ (lambda3) ((Nil)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
sub_check_ta1 (C (lambda2) (lambda3)) ((Nil)) = check_ (C (lambda2) (lambda3)) ((Nil)) ((Nil))

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 1
Tactic List : 1
simpl in goal(rank:3)
=================================================
Progress: 54


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check_ (lambda2) ((Nil)) ((Nil))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = check_ (lambda3) ((Nil)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
sub_check_ta1 (C (lambda2) (lambda3)) ((Nil)) = check_ (C (lambda2) (lambda3)) ((Nil)) ((Nil))

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check_ (lambda2) ((Nil)) ((Nil))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = check_ (lambda3) ((Nil)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((Nil)) then sub_check_ta1 (lambda3) ((Nil)) else false = if check_ (lambda2) ((Nil)) ((Nil)) then check_ (lambda3) ((Nil)) ((Nil)) else false

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
case check_ (lambda2) ((Nil)) ((Nil))(rank:4)
rewrite IH1 in goal at 0(rank:11)
rewrite lemma3 in goal at 0(rank:11)
rewrite <- IH1 in goal at 0(rank:11)
rewrite <- IH2 in goal at 0(rank:11)
rewrite <- lemma3 in goal at 0(rank:11)
rewrite IH2 in goal at 0(rank:11)
case sub_check_ta1 (lambda2) ((Nil))(rank:4)
=================================================
Progress: 55


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check_ (lambda2) ((Nil)) ((Nil))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = check_ (lambda3) ((Nil)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((Nil)) then sub_check_ta1 (lambda3) ((Nil)) else false = if check_ (lambda2) ((Nil)) ((Nil)) then check_ (lambda3) ((Nil)) ((Nil)) else false

0 goal(s) more...

0 conjecture(s) more...
>>> case check_ (lambda2) ((Nil)) ((Nil))(rank : 4)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = true
IH2 : sub_check_ta1 (lambda3) ((Nil)) = check_ (lambda3) ((Nil)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : check_ (lambda2) ((Nil)) ((Nil)) = true
---------------------------------------
if sub_check_ta1 (lambda2) ((Nil)) then sub_check_ta1 (lambda3) ((Nil)) else false = check_ (lambda3) ((Nil)) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
rewrite IH1 in goal at 0(rank:12)
rewrite lemma3 in goal at 0(rank:20)
rewrite lemma3 in goal at 1(rank:20)
rewrite <- IH2 in goal at 0(rank:20)
rewrite IH2 in goal at 0(rank:20)
=================================================
Progress: 56


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check_ (lambda2) ((Nil)) ((Nil))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = check_ (lambda3) ((Nil)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((Nil)) then sub_check_ta1 (lambda3) ((Nil)) else false = if check_ (lambda2) ((Nil)) ((Nil)) then check_ (lambda3) ((Nil)) ((Nil)) else false

0 goal(s) more...

0 conjecture(s) more...
>>> case sub_check_ta1 (lambda2) ((Nil))(rank : 4)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : true = check_ (lambda2) ((Nil)) ((Nil))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = check_ (lambda3) ((Nil)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check_ta1 (lambda2) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda3) ((Nil)) = if check_ (lambda2) ((Nil)) ((Nil)) then check_ (lambda3) ((Nil)) ((Nil)) else false

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
case check_ (lambda2) ((Nil)) ((Nil))(rank:5)
rewrite IH2 in goal at 0(rank:12)
rewrite <- IH1 in goal at 0(rank:12)
rewrite <- IH2 in goal at 0(rank:12)
rewrite <- lemma3 in goal at 0(rank:12)
rewrite <- lemma3 in goal at 1(rank:12)
=================================================
Progress: 57


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : true = check_ (lambda2) ((Nil)) ((Nil))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = check_ (lambda3) ((Nil)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check_ta1 (lambda2) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda3) ((Nil)) = if check_ (lambda2) ((Nil)) ((Nil)) then check_ (lambda3) ((Nil)) ((Nil)) else false

1 goal(s) more...

0 conjecture(s) more...
>>> case check_ (lambda2) ((Nil)) ((Nil))(rank : 5)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : true = true
IH2 : sub_check_ta1 (lambda3) ((Nil)) = check_ (lambda3) ((Nil)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check_ta1 (lambda2) ((Nil)) = true
Case2 : check_ (lambda2) ((Nil)) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda3) ((Nil)) = check_ (lambda3) ((Nil)) ((Nil))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:13)
rewrite <- IH2 in goal at 0(rank:13)
=================================================
Progress: 58


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check_ (lambda2) ((Nil)) ((Nil))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = check_ (lambda3) ((Nil)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((Nil)) then sub_check_ta1 (lambda3) ((Nil)) else false = if check_ (lambda2) ((Nil)) ((Nil)) then check_ (lambda3) ((Nil)) ((Nil)) else false

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 11)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check_ (lambda2) ((Nil)) ((Nil))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = check_ (lambda3) ((Nil)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if check_ (lambda2) ((Nil)) ((Nil)) then sub_check_ta1 (lambda3) ((Nil)) else false = if check_ (lambda2) ((Nil)) ((Nil)) then check_ (lambda3) ((Nil)) ((Nil)) else false

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case check_ (lambda2) ((Nil)) ((Nil))(rank:4)
=================================================
Progress: 59


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check_ (lambda2) ((Nil)) ((Nil))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = check_ (lambda3) ((Nil)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if check_ (lambda2) ((Nil)) ((Nil)) then sub_check_ta1 (lambda3) ((Nil)) else false = if check_ (lambda2) ((Nil)) ((Nil)) then check_ (lambda3) ((Nil)) ((Nil)) else false

0 goal(s) more...

0 conjecture(s) more...
>>> case check_ (lambda2) ((Nil)) ((Nil))(rank : 4)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = true
IH2 : sub_check_ta1 (lambda3) ((Nil)) = check_ (lambda3) ((Nil)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : check_ (lambda2) ((Nil)) ((Nil)) = true
---------------------------------------
sub_check_ta1 (lambda3) ((Nil)) = check_ (lambda3) ((Nil)) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:12)
rewrite <- IH2 in goal at 0(rank:12)
=================================================
Progress: 60


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check_ (lambda2) ((Nil)) ((Nil))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = check_ (lambda3) ((Nil)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((Nil)) then sub_check_ta1 (lambda3) ((Nil)) else false = if check_ (lambda2) ((Nil)) ((Nil)) then check_ (lambda3) ((Nil)) ((Nil)) else false

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 11)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check_ (lambda2) ((Nil)) ((Nil))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = check_ (lambda3) ((Nil)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((Nil)) then check_ (lambda3) ((Nil)) ((Nil)) else false = if check_ (lambda2) ((Nil)) ((Nil)) then check_ (lambda3) ((Nil)) ((Nil)) else false

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case check_ (lambda2) ((Nil)) ((Nil))(rank:4)
rewrite <- IH1 in goal at 0(rank:11)
=================================================
Progress: 61


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check_ (lambda2) ((Nil)) ((Nil))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = check_ (lambda3) ((Nil)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((Nil)) then check_ (lambda3) ((Nil)) ((Nil)) else false = if check_ (lambda2) ((Nil)) ((Nil)) then check_ (lambda3) ((Nil)) ((Nil)) else false

0 goal(s) more...

0 conjecture(s) more...
>>> case check_ (lambda2) ((Nil)) ((Nil))(rank : 4)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = true
IH2 : sub_check_ta1 (lambda3) ((Nil)) = check_ (lambda3) ((Nil)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : check_ (lambda2) ((Nil)) ((Nil)) = true
---------------------------------------
if sub_check_ta1 (lambda2) ((Nil)) then check_ (lambda3) ((Nil)) ((Nil)) else false = check_ (lambda3) ((Nil)) ((Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
rewrite IH1 in goal at 0(rank:12)
rewrite <- IH2 in goal at 0(rank:20)
rewrite <- IH2 in goal at 1(rank:20)
rewrite <- IH2 in goal at 2(rank:20)
rewrite lemma3 in goal at 0(rank:20)
=================================================
Progress: 62


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check_ (lambda2) ((Nil)) ((Nil))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = check_ (lambda3) ((Nil)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((Nil)) then sub_check_ta1 (lambda3) ((Nil)) else false = if check_ (lambda2) ((Nil)) ((Nil)) then check_ (lambda3) ((Nil)) ((Nil)) else false

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 11)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check_ (lambda2) ((Nil)) ((Nil))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = check_ (lambda3) ((Nil)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if check_ (lambda2) ((Nil)) ((Nil)) then check_ (lambda3) ((Nil)) ((Nil)) else false = if check_ (lambda2) ((Nil)) ((Nil)) then check_ (lambda3) ((Nil)) ((Nil)) else false

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 63


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((Nil)) = check_ (lambda2) ((Nil)) ((Nil))
IH2 : sub_check_ta1 (lambda3) ((Nil)) = check_ (lambda3) ((Nil)) ((Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if check_ (lambda2) ((Nil)) ((Nil)) then check_ (lambda3) ((Nil)) ((Nil)) else false = if check_ (lambda2) ((Nil)) ((Nil)) then check_ (lambda3) ((Nil)) ((Nil)) else false

0 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


No conjecture
Proof Success
Proof
assert forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
simpl in goal
induction lambda1
reflexivity
simpl in goal
assert forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (string_list1) = check_ (lambda1) (string_list1) ((Nil))
induction lambda1
simpl in goal
induction string_list1
reflexivity
simpl in goal
case string_eq (string2) (string1)
reflexivity
rewrite IH1 in goal at 0
case mem (string1) (string_list2)
reflexivity
reflexivity
simpl in goal
rewrite IH1 in goal at 0
reflexivity
simpl in goal
intro string_list1
rewrite IH2 in goal at 0
rewrite <- IH1 in goal at 0
reflexivity
rewrite lemma3 in goal at 0
reflexivity
simpl in goal
rewrite lemma3 in goal at 0
reflexivity
Qed
