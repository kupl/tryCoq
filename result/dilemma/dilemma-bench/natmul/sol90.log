Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (a:nat) (b:nat), natmul_ta1 (a) (b) = natmul (a) (b)(rank : 0)


1st goal of : forall (nat1:nat) (nat2:nat), natmul_ta1 (nat1) (nat2) = natmul (nat1) (nat2)

---------------------------------------
forall (nat1:nat) (nat2:nat), natmul_ta1 (nat1) (nat2) = natmul (nat1) (nat2)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:3)
=================================================
Progress: 2


1st goal of : forall (nat1:nat) (nat2:nat), natmul_ta1 (nat1) (nat2) = natmul (nat1) (nat2)

---------------------------------------
forall (nat1:nat) (nat2:nat), natmul_ta1 (nat1) (nat2) = natmul (nat1) (nat2)

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3)


1st goal of : forall (nat1:nat) (nat2:nat), natmul_ta1 (nat1) (nat2) = natmul (nat1) (nat2)

---------------------------------------
forall (nat1:nat) (nat2:nat), natmul_ta1 (nat1) (nat2) = if if nat_eq (nat1) (ZERO) then true else nat_eq (nat2) (ZERO) then ZERO else innerLoop (nat1) (nat2) (nat2)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
intro nat2(rank:3)
=================================================
Progress: 3


1st goal of : forall (nat1:nat) (nat2:nat), natmul_ta1 (nat1) (nat2) = natmul (nat1) (nat2)

---------------------------------------
forall (nat1:nat) (nat2:nat), natmul_ta1 (nat1) (nat2) = if if nat_eq (nat1) (ZERO) then true else nat_eq (nat2) (ZERO) then ZERO else innerLoop (nat1) (nat2) (nat2)

0 goal(s) more...

0 conjecture(s) more...
>>> intro nat2(rank : 3)


1st goal of : forall (nat1:nat) (nat2:nat), natmul_ta1 (nat1) (nat2) = natmul (nat1) (nat2)
nat2 : nat
---------------------------------------
forall (nat1:nat), natmul_ta1 (nat1) (nat2) = if if nat_eq (nat1) (ZERO) then true else nat_eq (nat2) (ZERO) then ZERO else innerLoop (nat1) (nat2) (nat2)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction nat1(rank:4)
=================================================
Progress: 4


1st goal of : forall (nat1:nat) (nat2:nat), natmul_ta1 (nat1) (nat2) = natmul (nat1) (nat2)
nat2 : nat
---------------------------------------
forall (nat1:nat), natmul_ta1 (nat1) (nat2) = if if nat_eq (nat1) (ZERO) then true else nat_eq (nat2) (ZERO) then ZERO else innerLoop (nat1) (nat2) (nat2)

0 goal(s) more...

0 conjecture(s) more...
>>> induction nat1(rank : 4)


1st goal of : forall (nat1:nat) (nat2:nat), natmul_ta1 (nat1) (nat2) = natmul (nat1) (nat2)
nat2 : nat
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
natmul_ta1 (ZERO) (nat2) = if if nat_eq (ZERO) (ZERO) then true else nat_eq (nat2) (ZERO) then ZERO else innerLoop (ZERO) (nat2) (nat2)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:4)
=================================================
Progress: 5


1st goal of : forall (nat1:nat) (nat2:nat), natmul_ta1 (nat1) (nat2) = natmul (nat1) (nat2)
nat2 : nat
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
natmul_ta1 (ZERO) (nat2) = if if nat_eq (ZERO) (ZERO) then true else nat_eq (nat2) (ZERO) then ZERO else innerLoop (ZERO) (nat2) (nat2)

1 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 4)


1st goal of : forall (nat1:nat) (nat2:nat), natmul_ta1 (nat1) (nat2) = natmul (nat1) (nat2)
nat2 : nat
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
ZERO = if if nat_eq (ZERO) (ZERO) then true else nat_eq (nat2) (ZERO) then ZERO else innerLoop (ZERO) (nat2) (nat2)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
Lemma : forall (nat2:nat), ZERO = if if nat_eq (ZERO) (ZERO) then true else nat_eq (nat2) (ZERO) then ZERO else innerLoop (ZERO) (nat2) (nat2)
Model : nat2: ZERO
Model : nat2: ZERO
Model : nat2: ZERO
Substituting variables...
Simplifying conditions and property...
let rec innerLoop n1 n2 maintain =
match (n1) with
| SUCC ZERO  -> n2
| SUCC sub_count -> innerLoop (sub_count) (natadd (maintain) (n2)) (maintain)
let rec natmul n1 n2 =
if || (nat_eq (n1) (ZERO)) (nat_eq (n2) (ZERO)) then ZERO else innerLoop (n1) (n2) (n2)
prop list:
ZERO = if if nat_eq (ZERO) (ZERO) then true else nat_eq (ZERO) (ZERO) then ZERO else innerLoop (ZERO) (ZERO) (ZERO)
ZERO = if if nat_eq (ZERO) (ZERO) then true else nat_eq (ZERO) (ZERO) then ZERO else innerLoop (ZERO) (ZERO) (ZERO)
ZERO = if if nat_eq (ZERO) (ZERO) then true else nat_eq (ZERO) (ZERO) then ZERO else innerLoop (ZERO) (ZERO) (ZERO)
Simplifying took 0.000018 seconds
Result : false
Lemma : forall (nat2:nat), ZERO = if if nat_eq (ZERO) (ZERO) then true else nat_eq (nat2) (ZERO) then ZERO else innerLoop (ZERO) (nat2) (nat2)
Model : nat2: ZERO
Model : nat2: ZERO
Model : nat2: ZERO
Substituting variables...
Simplifying conditions and property...
let rec innerLoop n1 n2 maintain =
match (n1) with
| SUCC ZERO  -> n2
| SUCC sub_count -> innerLoop (sub_count) (natadd (maintain) (n2)) (maintain)
let rec natmul n1 n2 =
if || (nat_eq (n1) (ZERO)) (nat_eq (n2) (ZERO)) then ZERO else innerLoop (n1) (n2) (n2)
prop list:
ZERO = if if nat_eq (ZERO) (ZERO) then true else nat_eq (ZERO) (ZERO) then ZERO else innerLoop (ZERO) (ZERO) (ZERO)
ZERO = if if nat_eq (ZERO) (ZERO) then true else nat_eq (ZERO) (ZERO) then ZERO else innerLoop (ZERO) (ZERO) (ZERO)
ZERO = if if nat_eq (ZERO) (ZERO) then true else nat_eq (ZERO) (ZERO) then ZERO else innerLoop (ZERO) (ZERO) (ZERO)
Simplifying took 0.000014 seconds
Result : false
Lemma : forall (nat2:nat), ZERO = if if nat_eq (ZERO) (ZERO) then true else nat_eq (nat2) (ZERO) then ZERO else innerLoop (ZERO) (nat2) (nat2)
Model : nat2: ZERO
Model : nat2: SUCC (ZERO)
Model : nat2: ZERO
Substituting variables...
Simplifying conditions and property...
let rec innerLoop n1 n2 maintain =
match (n1) with
| SUCC ZERO  -> n2
| SUCC sub_count -> innerLoop (sub_count) (natadd (maintain) (n2)) (maintain)
let rec natmul n1 n2 =
if || (nat_eq (n1) (ZERO)) (nat_eq (n2) (ZERO)) then ZERO else innerLoop (n1) (n2) (n2)
prop list:
ZERO = if if nat_eq (ZERO) (ZERO) then true else nat_eq (ZERO) (ZERO) then ZERO else innerLoop (ZERO) (ZERO) (ZERO)
ZERO = if if nat_eq (ZERO) (ZERO) then true else nat_eq (SUCC (ZERO)) (ZERO) then ZERO else innerLoop (ZERO) (SUCC (ZERO)) (SUCC (ZERO))
ZERO = if if nat_eq (ZERO) (ZERO) then true else nat_eq (ZERO) (ZERO) then ZERO else innerLoop (ZERO) (ZERO) (ZERO)
Simplifying took 0.000014 seconds
Result : false
advanced_generalize done
File "_none_", lines 14-16, characters 2-73:
Warning 8 [partial-match]: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
ZERO
Fatal error: exception Failure("worklist is empty")
Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
Called from Dilemma__Engine.proof_auto in file "lib/engine.ml", line 291, characters 8-69
Called from Dune__exe__Main.main in file "bin/main.ml", line 24, characters 12-79
