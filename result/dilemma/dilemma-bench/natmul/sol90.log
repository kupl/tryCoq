Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (a:nat) (b:nat), natmul_ta1 (a) (b) = natmul (a) (b)(rank : 0)


1st goal of : forall (nat1:nat) (nat2:nat), natmul_ta1 (nat1) (nat2) = natmul (nat1) (nat2)

---------------------------------------
forall (nat1:nat) (nat2:nat), natmul_ta1 (nat1) (nat2) = natmul (nat1) (nat2)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:3)
=================================================
Progress: 2


1st goal of : forall (nat1:nat) (nat2:nat), natmul_ta1 (nat1) (nat2) = natmul (nat1) (nat2)

---------------------------------------
forall (nat1:nat) (nat2:nat), natmul_ta1 (nat1) (nat2) = natmul (nat1) (nat2)

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3)


1st goal of : forall (nat1:nat) (nat2:nat), natmul_ta1 (nat1) (nat2) = natmul (nat1) (nat2)

---------------------------------------
forall (nat1:nat) (nat2:nat), natmul_ta1 (nat1) (nat2) = if if nat_eq (nat1) (ZERO) then true else nat_eq (nat2) (ZERO) then ZERO else innerLoop (nat1) (nat2) (nat2)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
intro nat2(rank:3)
=================================================
Progress: 3


1st goal of : forall (nat1:nat) (nat2:nat), natmul_ta1 (nat1) (nat2) = natmul (nat1) (nat2)

---------------------------------------
forall (nat1:nat) (nat2:nat), natmul_ta1 (nat1) (nat2) = if if nat_eq (nat1) (ZERO) then true else nat_eq (nat2) (ZERO) then ZERO else innerLoop (nat1) (nat2) (nat2)

0 goal(s) more...

0 conjecture(s) more...
>>> intro nat2(rank : 3)


1st goal of : forall (nat1:nat) (nat2:nat), natmul_ta1 (nat1) (nat2) = natmul (nat1) (nat2)
nat2 : nat
---------------------------------------
forall (nat1:nat), natmul_ta1 (nat1) (nat2) = if if nat_eq (nat1) (ZERO) then true else nat_eq (nat2) (ZERO) then ZERO else innerLoop (nat1) (nat2) (nat2)

0 goal(s) more...

0 conjecture(s) more...
nat1 nat2 Tactic List : 1
induction nat1(rank:4)
=================================================
Progress: 4


1st goal of : forall (nat1:nat) (nat2:nat), natmul_ta1 (nat1) (nat2) = natmul (nat1) (nat2)
nat2 : nat
---------------------------------------
forall (nat1:nat), natmul_ta1 (nat1) (nat2) = if if nat_eq (nat1) (ZERO) then true else nat_eq (nat2) (ZERO) then ZERO else innerLoop (nat1) (nat2) (nat2)

0 goal(s) more...

0 conjecture(s) more...
>>> induction nat1(rank : 4)


1st goal of : forall (nat1:nat) (nat2:nat), natmul_ta1 (nat1) (nat2) = natmul (nat1) (nat2)
nat2 : nat
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
natmul_ta1 (ZERO) (nat2) = if if nat_eq (ZERO) (ZERO) then true else nat_eq (nat2) (ZERO) then ZERO else innerLoop (ZERO) (nat2) (nat2)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:4)
=================================================
Progress: 5


1st goal of : forall (nat1:nat) (nat2:nat), natmul_ta1 (nat1) (nat2) = natmul (nat1) (nat2)
nat2 : nat
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
natmul_ta1 (ZERO) (nat2) = if if nat_eq (ZERO) (ZERO) then true else nat_eq (nat2) (ZERO) then ZERO else innerLoop (ZERO) (nat2) (nat2)

1 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 4)


1st goal of : forall (nat1:nat) (nat2:nat), natmul_ta1 (nat1) (nat2) = natmul (nat1) (nat2)
nat2 : nat
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
ZERO = if if nat_eq (ZERO) (ZERO) then true else nat_eq (nat2) (ZERO) then ZERO else innerLoop (ZERO) (nat2) (nat2)

1 goal(s) more...

0 conjecture(s) more...
nat2 asdf
Tactic List : 0
previous tactics
simpl in goal
New Env

;;
Lemma List
forall (nat2:nat), ZERO = if if nat_eq (ZERO) (ZERO) then true else nat_eq (nat2) (ZERO) then ZERO else innerLoop (ZERO) (nat2) (nat2)
End of Lemma List


1st goal of : forall (nat1:nat) (nat2:nat), natmul_ta1 (nat1) (nat2) = natmul (nat1) (nat2)
nat2 : nat
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
ZERO = if if nat_eq (ZERO) (ZERO) then true else nat_eq (nat2) (ZERO) then ZERO else innerLoop (ZERO) (nat2) (nat2)

1 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 6


1st goal of : forall (nat1:nat) (nat2:nat), natmul_ta1 (nat1) (nat2) = natmul (nat1) (nat2)
nat2 : nat
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
ZERO = if if nat_eq (ZERO) (ZERO) then true else nat_eq (nat2) (ZERO) then ZERO else innerLoop (ZERO) (nat2) (nat2)

1 goal(s) more...

0 conjecture(s) more...
>>> assert forall (nat2:nat), ZERO = if if nat_eq (ZERO) (ZERO) then true else nat_eq (nat2) (ZERO) then ZERO else innerLoop (ZERO) (nat2) (nat2)(rank : 0)


1st goal of : forall (nat1:nat), ZERO = if if nat_eq (ZERO) (ZERO) then true else nat_eq (nat1) (ZERO) then ZERO else innerLoop (ZERO) (nat1) (nat1)

---------------------------------------
forall (nat1:nat), ZERO = if if nat_eq (ZERO) (ZERO) then true else nat_eq (nat1) (ZERO) then ZERO else innerLoop (ZERO) (nat1) (nat1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro nat1(rank:5)
=================================================
Progress: 7


1st goal of : forall (nat1:nat), ZERO = if if nat_eq (ZERO) (ZERO) then true else nat_eq (nat1) (ZERO) then ZERO else innerLoop (ZERO) (nat1) (nat1)

---------------------------------------
forall (nat1:nat), ZERO = if if nat_eq (ZERO) (ZERO) then true else nat_eq (nat1) (ZERO) then ZERO else innerLoop (ZERO) (nat1) (nat1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro nat1(rank : 5)


1st goal of : forall (nat1:nat), ZERO = if if nat_eq (ZERO) (ZERO) then true else nat_eq (nat1) (ZERO) then ZERO else innerLoop (ZERO) (nat1) (nat1)
nat1 : nat
---------------------------------------
ZERO = if if nat_eq (ZERO) (ZERO) then true else nat_eq (nat1) (ZERO) then ZERO else innerLoop (ZERO) (nat1) (nat1)

0 goal(s) more...

1 conjecture(s) more...
nat1 asdf
Tactic List : 1
case if nat_eq (ZERO) (ZERO) then true else nat_eq (nat1) (ZERO)(rank:6)
=================================================
Progress: 8


1st goal of : forall (nat1:nat), ZERO = if if nat_eq (ZERO) (ZERO) then true else nat_eq (nat1) (ZERO) then ZERO else innerLoop (ZERO) (nat1) (nat1)
nat1 : nat
---------------------------------------
ZERO = if if nat_eq (ZERO) (ZERO) then true else nat_eq (nat1) (ZERO) then ZERO else innerLoop (ZERO) (nat1) (nat1)

0 goal(s) more...

1 conjecture(s) more...
>>> case if nat_eq (ZERO) (ZERO) then true else nat_eq (nat1) (ZERO)(rank : 6)


1st goal of : forall (nat1:nat), ZERO = if if nat_eq (ZERO) (ZERO) then true else nat_eq (nat1) (ZERO) then ZERO else innerLoop (ZERO) (nat1) (nat1)
nat1 : nat
Case1 : if nat_eq (ZERO) (ZERO) then true else nat_eq (nat1) (ZERO) = true
---------------------------------------
ZERO = ZERO

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5)
=================================================
Progress: 9


1st goal of : forall (nat1:nat), ZERO = if if nat_eq (ZERO) (ZERO) then true else nat_eq (nat1) (ZERO) then ZERO else innerLoop (ZERO) (nat1) (nat1)
nat1 : nat
Case1 : if nat_eq (ZERO) (ZERO) then true else nat_eq (nat1) (ZERO) = true
---------------------------------------
ZERO = ZERO

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5)


1st goal of : forall (nat1:nat), ZERO = if if nat_eq (ZERO) (ZERO) then true else nat_eq (nat1) (ZERO) then ZERO else innerLoop (ZERO) (nat1) (nat1)
nat1 : nat
Case1 : if nat_eq (ZERO) (ZERO) then true else nat_eq (nat1) (ZERO) = false
---------------------------------------
ZERO = innerLoop (ZERO) (nat1) (nat1)

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 0
New Env

;;
Lemma List
forall (nat1:nat), if nat_eq (ZERO) (ZERO) then true else nat_eq (nat1) (ZERO) = false -> ZERO = innerLoop (ZERO) (nat1) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat), ZERO = if if nat_eq (ZERO) (ZERO) then true else nat_eq (nat1) (ZERO) then ZERO else innerLoop (ZERO) (nat1) (nat1)
nat1 : nat
Case1 : if nat_eq (ZERO) (ZERO) then true else nat_eq (nat1) (ZERO) = false
---------------------------------------
ZERO = innerLoop (ZERO) (nat1) (nat1)

0 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 10


1st goal of : forall (nat1:nat), ZERO = if if nat_eq (ZERO) (ZERO) then true else nat_eq (nat1) (ZERO) then ZERO else innerLoop (ZERO) (nat1) (nat1)
nat1 : nat
Case1 : if nat_eq (ZERO) (ZERO) then true else nat_eq (nat1) (ZERO) = false
---------------------------------------
ZERO = innerLoop (ZERO) (nat1) (nat1)

0 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat), if nat_eq (ZERO) (ZERO) then true else nat_eq (nat1) (ZERO) = false -> ZERO = innerLoop (ZERO) (nat1) (nat1)(rank : 0)


1st goal of : forall (nat1:nat), if nat_eq (ZERO) (ZERO) then true else nat_eq (nat1) (ZERO) = false -> ZERO = innerLoop (ZERO) (nat1) (nat1)

---------------------------------------
forall (nat1:nat), if nat_eq (ZERO) (ZERO) then true else nat_eq (nat1) (ZERO) = false -> ZERO = innerLoop (ZERO) (nat1) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat1(rank:7)
=================================================
Progress: 11


1st goal of : forall (nat1:nat), if nat_eq (ZERO) (ZERO) then true else nat_eq (nat1) (ZERO) = false -> ZERO = innerLoop (ZERO) (nat1) (nat1)

---------------------------------------
forall (nat1:nat), if nat_eq (ZERO) (ZERO) then true else nat_eq (nat1) (ZERO) = false -> ZERO = innerLoop (ZERO) (nat1) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat1(rank : 7)


1st goal of : forall (nat1:nat), if nat_eq (ZERO) (ZERO) then true else nat_eq (nat1) (ZERO) = false -> ZERO = innerLoop (ZERO) (nat1) (nat1)
nat1 : nat
---------------------------------------
if nat_eq (ZERO) (ZERO) then true else nat_eq (nat1) (ZERO) = false -> ZERO = innerLoop (ZERO) (nat1) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7)
=================================================
Progress: 12


1st goal of : forall (nat1:nat), if nat_eq (ZERO) (ZERO) then true else nat_eq (nat1) (ZERO) = false -> ZERO = innerLoop (ZERO) (nat1) (nat1)
nat1 : nat
---------------------------------------
if nat_eq (ZERO) (ZERO) then true else nat_eq (nat1) (ZERO) = false -> ZERO = innerLoop (ZERO) (nat1) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7)


1st goal of : forall (nat1:nat), if nat_eq (ZERO) (ZERO) then true else nat_eq (nat1) (ZERO) = false -> ZERO = innerLoop (ZERO) (nat1) (nat1)
nat1 : nat
Cond1 : if nat_eq (ZERO) (ZERO) then true else nat_eq (nat1) (ZERO) = false
---------------------------------------
ZERO = innerLoop (ZERO) (nat1) (nat1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
New Env

;;
Lemma List
forall (nat1:nat), if nat_eq (ZERO) (ZERO) then true else nat_eq (nat1) (ZERO) = false -> ZERO = innerLoop (ZERO) (nat1) (nat1)
End of Lemma List


1st goal of : forall (nat1:nat), if nat_eq (ZERO) (ZERO) then true else nat_eq (nat1) (ZERO) = false -> ZERO = innerLoop (ZERO) (nat1) (nat1)
nat1 : nat
Cond1 : if nat_eq (ZERO) (ZERO) then true else nat_eq (nat1) (ZERO) = false
---------------------------------------
ZERO = innerLoop (ZERO) (nat1) (nat1)

0 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 13


1st goal of : forall (nat1:nat), if nat_eq (ZERO) (ZERO) then true else nat_eq (nat1) (ZERO) = false -> ZERO = innerLoop (ZERO) (nat1) (nat1)
nat1 : nat
Cond1 : if nat_eq (ZERO) (ZERO) then true else nat_eq (nat1) (ZERO) = false
---------------------------------------
ZERO = innerLoop (ZERO) (nat1) (nat1)

0 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat), if nat_eq (ZERO) (ZERO) then true else nat_eq (nat1) (ZERO) = false -> ZERO = innerLoop (ZERO) (nat1) (nat1)(rank : 0)


1st goal of : forall (nat1:nat), if nat_eq (ZERO) (ZERO) then true else nat_eq (nat1) (ZERO) = false -> ZERO = innerLoop (ZERO) (nat1) (nat1)

---------------------------------------
forall (nat1:nat), if nat_eq (ZERO) (ZERO) then true else nat_eq (nat1) (ZERO) = false -> ZERO = innerLoop (ZERO) (nat1) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9)
=================================================
Progress: 14


1st goal of : forall (nat1:nat), if nat_eq (ZERO) (ZERO) then true else nat_eq (nat1) (ZERO) = false -> ZERO = innerLoop (ZERO) (nat1) (nat1)

---------------------------------------
forall (nat1:nat), if nat_eq (ZERO) (ZERO) then true else nat_eq (nat1) (ZERO) = false -> ZERO = innerLoop (ZERO) (nat1) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9)


1st goal of : forall (nat1:nat), if nat_eq (ZERO) (ZERO) then true else nat_eq (nat1) (ZERO) = false -> ZERO = innerLoop (ZERO) (nat1) (nat1)
nat1 : nat
---------------------------------------
if nat_eq (ZERO) (ZERO) then true else nat_eq (nat1) (ZERO) = false -> ZERO = innerLoop (ZERO) (nat1) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9)
=================================================
Progress: 15


1st goal of : forall (nat1:nat), if nat_eq (ZERO) (ZERO) then true else nat_eq (nat1) (ZERO) = false -> ZERO = innerLoop (ZERO) (nat1) (nat1)
nat1 : nat
---------------------------------------
if nat_eq (ZERO) (ZERO) then true else nat_eq (nat1) (ZERO) = false -> ZERO = innerLoop (ZERO) (nat1) (nat1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9)


1st goal of : forall (nat1:nat), if nat_eq (ZERO) (ZERO) then true else nat_eq (nat1) (ZERO) = false -> ZERO = innerLoop (ZERO) (nat1) (nat1)
nat1 : nat
Cond1 : if nat_eq (ZERO) (ZERO) then true else nat_eq (nat1) (ZERO) = false
---------------------------------------
ZERO = innerLoop (ZERO) (nat1) (nat1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
File "_none_", lines 14-16, characters 2-73:
Warning 8 [partial-match]: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
ZERO
Fatal error: exception Failure("worklist is empty")
Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
Called from Dilemma__Engine.proof_auto in file "lib/engine.ml", line 211, characters 8-69
Called from Dune__exe__Main.main in file "bin/main.ml", line 26, characters 12-79
