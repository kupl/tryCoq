Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (f:int -> int) (a:int) (b:int), sigma_ta1 (f) (a) (b) = sigma (f) (a) (b)(rank : 0)


1st goal of : forall (int2int1:int -> int) (int1:int) (int2:int), sigma_ta1 (int2int1) (int1) (int2) = sigma (int2int1) (int1) (int2)

---------------------------------------
forall (int2int1:int -> int) (int1:int) (int2:int), sigma_ta1 (int2int1) (int1) (int2) = sigma (int2int1) (int1) (int2)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:3)
=================================================
Progress: 2


1st goal of : forall (int2int1:int -> int) (int1:int) (int2:int), sigma_ta1 (int2int1) (int1) (int2) = sigma (int2int1) (int1) (int2)

---------------------------------------
forall (int2int1:int -> int) (int1:int) (int2:int), sigma_ta1 (int2int1) (int1) (int2) = sigma (int2int1) (int1) (int2)

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3)


1st goal of : forall (int2int1:int -> int) (int1:int) (int2:int), sigma_ta1 (int2int1) (int1) (int2) = sigma (int2int1) (int1) (int2)

---------------------------------------
forall (int2int1:int -> int) (int1:int) (int2:int), if match (int2, int1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then 0 else if int_eq (int1) (int2) then int2int1 (int1) else + (int2int1 (int1)) (sigma_ta1 (int2int1) (+ (int1) (0)) (int2)) = fold (adder) (map (int2int1) (if match (int2, int1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (Nil) else aux (int1) (int2) (- (int2) (0)) ((int2::(Nil))))) (0)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
intro int1(rank:3)
=================================================
Progress: 3


1st goal of : forall (int2int1:int -> int) (int1:int) (int2:int), sigma_ta1 (int2int1) (int1) (int2) = sigma (int2int1) (int1) (int2)

---------------------------------------
forall (int2int1:int -> int) (int1:int) (int2:int), if match (int2, int1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then 0 else if int_eq (int1) (int2) then int2int1 (int1) else + (int2int1 (int1)) (sigma_ta1 (int2int1) (+ (int1) (0)) (int2)) = fold (adder) (map (int2int1) (if match (int2, int1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (Nil) else aux (int1) (int2) (- (int2) (0)) ((int2::(Nil))))) (0)

0 goal(s) more...

0 conjecture(s) more...
>>> intro int1(rank : 3)


1st goal of : forall (int2int1:int -> int) (int1:int) (int2:int), sigma_ta1 (int2int1) (int1) (int2) = sigma (int2int1) (int1) (int2)
int1 : int
---------------------------------------
forall (int2int1:int -> int) (int2:int), if match (int2, int1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then 0 else if int_eq (int1) (int2) then int2int1 (int1) else + (int2int1 (int1)) (sigma_ta1 (int2int1) (+ (int1) (0)) (int2)) = fold (adder) (map (int2int1) (if match (int2, int1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (Nil) else aux (int1) (int2) (- (int2) (0)) ((int2::(Nil))))) (0)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
intro int2(rank:3)
=================================================
Progress: 4


1st goal of : forall (int2int1:int -> int) (int1:int) (int2:int), sigma_ta1 (int2int1) (int1) (int2) = sigma (int2int1) (int1) (int2)
int1 : int
---------------------------------------
forall (int2int1:int -> int) (int2:int), if match (int2, int1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then 0 else if int_eq (int1) (int2) then int2int1 (int1) else + (int2int1 (int1)) (sigma_ta1 (int2int1) (+ (int1) (0)) (int2)) = fold (adder) (map (int2int1) (if match (int2, int1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (Nil) else aux (int1) (int2) (- (int2) (0)) ((int2::(Nil))))) (0)

0 goal(s) more...

0 conjecture(s) more...
>>> intro int2(rank : 3)


1st goal of : forall (int2int1:int -> int) (int1:int) (int2:int), sigma_ta1 (int2int1) (int1) (int2) = sigma (int2int1) (int1) (int2)
int1 : int
int2 : int
---------------------------------------
forall (int2int1:int -> int), if match (int2, int1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then 0 else if int_eq (int1) (int2) then int2int1 (int1) else + (int2int1 (int1)) (sigma_ta1 (int2int1) (+ (int1) (0)) (int2)) = fold (adder) (map (int2int1) (if match (int2, int1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (Nil) else aux (int1) (int2) (- (int2) (0)) ((int2::(Nil))))) (0)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
intro int2int1(rank:3)
=================================================
Progress: 5


1st goal of : forall (int2int1:int -> int) (int1:int) (int2:int), sigma_ta1 (int2int1) (int1) (int2) = sigma (int2int1) (int1) (int2)
int1 : int
int2 : int
---------------------------------------
forall (int2int1:int -> int), if match (int2, int1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then 0 else if int_eq (int1) (int2) then int2int1 (int1) else + (int2int1 (int1)) (sigma_ta1 (int2int1) (+ (int1) (0)) (int2)) = fold (adder) (map (int2int1) (if match (int2, int1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (Nil) else aux (int1) (int2) (- (int2) (0)) ((int2::(Nil))))) (0)

0 goal(s) more...

0 conjecture(s) more...
>>> intro int2int1(rank : 3)


1st goal of : forall (int2int1:int -> int) (int1:int) (int2:int), sigma_ta1 (int2int1) (int1) (int2) = sigma (int2int1) (int1) (int2)
int1 : int
int2 : int
int2int1 : int -> int
---------------------------------------
if match (int2, int1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then 0 else if int_eq (int1) (int2) then int2int1 (int1) else + (int2int1 (int1)) (sigma_ta1 (int2int1) (+ (int1) (0)) (int2)) = fold (adder) (map (int2int1) (if match (int2, int1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (Nil) else aux (int1) (int2) (- (int2) (0)) ((int2::(Nil))))) (0)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case match (int2, int1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:4)
=================================================
Progress: 6


1st goal of : forall (int2int1:int -> int) (int1:int) (int2:int), sigma_ta1 (int2int1) (int1) (int2) = sigma (int2int1) (int1) (int2)
int1 : int
int2 : int
int2int1 : int -> int
---------------------------------------
if match (int2, int1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then 0 else if int_eq (int1) (int2) then int2int1 (int1) else + (int2int1 (int1)) (sigma_ta1 (int2int1) (+ (int1) (0)) (int2)) = fold (adder) (map (int2int1) (if match (int2, int1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (Nil) else aux (int1) (int2) (- (int2) (0)) ((int2::(Nil))))) (0)

0 goal(s) more...

0 conjecture(s) more...
>>> case match (int2, int1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 4)


1st goal of : forall (int2int1:int -> int) (int1:int) (int2:int), sigma_ta1 (int2int1) (int1) (int2) = sigma (int2int1) (int1) (int2)
int1 : int
int2 : int
int2int1 : int -> int
Case1 : match (int2, int1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
0 = 0

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3)
=================================================
Progress: 7


1st goal of : forall (int2int1:int -> int) (int1:int) (int2:int), sigma_ta1 (int2int1) (int1) (int2) = sigma (int2int1) (int1) (int2)
int1 : int
int2 : int
int2int1 : int -> int
Case1 : match (int2, int1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
0 = 0

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3)


1st goal of : forall (int2int1:int -> int) (int1:int) (int2:int), sigma_ta1 (int2int1) (int1) (int2) = sigma (int2int1) (int1) (int2)
int1 : int
int2 : int
int2int1 : int -> int
Case1 : match (int2, int1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
if match (int1, int2) with
| (Zero , Zero ) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero , Pos Z ) -> true
| (Zero , Neg Z ) -> true
| (Pos Z , Zero ) -> true
| (Neg Z , Zero ) -> true
| (_, _) -> false then int2int1 (int1) else + (int2int1 (int1)) (sigma_ta1 (int2int1) (+ (int1) (0)) (int2)) = fold (adder) (map (int2int1) (if match (match (int2, 0) with
| (Zero , _) -> 0
| (_, Zero ) -> int2
| (Pos n1', Pos n2') -> if less_than (n1') (n2') then -natural_sub (n2') (n1') else natural_sub (n1') (n2')
| (Neg n1', Neg n2') -> if less_than (n1') (n2') then natural_sub (n2') (n1') else -natural_sub (n1') (n2')
| (Pos n1', Neg n2') -> natural_add (n1') (n2')
| (Neg n1', Pos n2') -> -natural_add (n1') (n2'), int1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(Nil)) else aux (int1) (int2) (- (match (int2, 0) with
| (Zero , _) -> 0
| (_, Zero ) -> int2
| (Pos n1', Pos n2') -> if less_than (n1') (n2') then -natural_sub (n2') (n1') else natural_sub (n1') (n2')
| (Neg n1', Neg n2') -> if less_than (n1') (n2') then natural_sub (n2') (n1') else -natural_sub (n1') (n2')
| (Pos n1', Neg n2') -> natural_add (n1') (n2')
| (Neg n1', Pos n2') -> -natural_add (n1') (n2')) (0)) ((match (int2, 0) with
| (Zero , _) -> 0
| (_, Zero ) -> int2
| (Pos n1', Pos n2') -> if less_than (n1') (n2') then -natural_sub (n2') (n1') else natural_sub (n1') (n2')
| (Neg n1', Neg n2') -> if less_than (n1') (n2') then natural_sub (n2') (n1') else -natural_sub (n1') (n2')
| (Pos n1', Neg n2') -> natural_add (n1') (n2')
| (Neg n1', Pos n2') -> -natural_add (n1') (n2')::(int2::(Nil)))))) (0)

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 2
case match (match (int2, 0) with
| (Zero , _) -> 0
| (_, Zero ) -> int2
| (Pos n1', Pos n2') -> if less_than (n1') (n2') then -natural_sub (n2') (n1') else natural_sub (n1') (n2')
| (Neg n1', Neg n2') -> if less_than (n1') (n2') then natural_sub (n2') (n1') else -natural_sub (n1') (n2')
| (Pos n1', Neg n2') -> natural_add (n1') (n2')
| (Neg n1', Pos n2') -> -natural_add (n1') (n2'), int1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:4)
case match (int1, int2) with
| (Zero , Zero ) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero , Pos Z ) -> true
| (Zero , Neg Z ) -> true
| (Pos Z , Zero ) -> true
| (Neg Z , Zero ) -> true
| (_, _) -> false(rank:4)
=================================================
Progress: 8


1st goal of : forall (int2int1:int -> int) (int1:int) (int2:int), sigma_ta1 (int2int1) (int1) (int2) = sigma (int2int1) (int1) (int2)
int1 : int
int2 : int
int2int1 : int -> int
Case1 : match (int2, int1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
if match (int1, int2) with
| (Zero , Zero ) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero , Pos Z ) -> true
| (Zero , Neg Z ) -> true
| (Pos Z , Zero ) -> true
| (Neg Z , Zero ) -> true
| (_, _) -> false then int2int1 (int1) else + (int2int1 (int1)) (sigma_ta1 (int2int1) (+ (int1) (0)) (int2)) = fold (adder) (map (int2int1) (if match (match (int2, 0) with
| (Zero , _) -> 0
| (_, Zero ) -> int2
| (Pos n1', Pos n2') -> if less_than (n1') (n2') then -natural_sub (n2') (n1') else natural_sub (n1') (n2')
| (Neg n1', Neg n2') -> if less_than (n1') (n2') then natural_sub (n2') (n1') else -natural_sub (n1') (n2')
| (Pos n1', Neg n2') -> natural_add (n1') (n2')
| (Neg n1', Pos n2') -> -natural_add (n1') (n2'), int1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(Nil)) else aux (int1) (int2) (- (match (int2, 0) with
| (Zero , _) -> 0
| (_, Zero ) -> int2
| (Pos n1', Pos n2') -> if less_than (n1') (n2') then -natural_sub (n2') (n1') else natural_sub (n1') (n2')
| (Neg n1', Neg n2') -> if less_than (n1') (n2') then natural_sub (n2') (n1') else -natural_sub (n1') (n2')
| (Pos n1', Neg n2') -> natural_add (n1') (n2')
| (Neg n1', Pos n2') -> -natural_add (n1') (n2')) (0)) ((match (int2, 0) with
| (Zero , _) -> 0
| (_, Zero ) -> int2
| (Pos n1', Pos n2') -> if less_than (n1') (n2') then -natural_sub (n2') (n1') else natural_sub (n1') (n2')
| (Neg n1', Neg n2') -> if less_than (n1') (n2') then natural_sub (n2') (n1') else -natural_sub (n1') (n2')
| (Pos n1', Neg n2') -> natural_add (n1') (n2')
| (Neg n1', Pos n2') -> -natural_add (n1') (n2')::(int2::(Nil)))))) (0)

0 goal(s) more...

0 conjecture(s) more...
>>> case match (match (int2, 0) with
| (Zero , _) -> 0
| (_, Zero ) -> int2
| (Pos n1', Pos n2') -> if less_than (n1') (n2') then -natural_sub (n2') (n1') else natural_sub (n1') (n2')
| (Neg n1', Neg n2') -> if less_than (n1') (n2') then natural_sub (n2') (n1') else -natural_sub (n1') (n2')
| (Pos n1', Neg n2') -> natural_add (n1') (n2')
| (Neg n1', Pos n2') -> -natural_add (n1') (n2'), int1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank : 4)


1st goal of : forall (int2int1:int -> int) (int1:int) (int2:int), sigma_ta1 (int2int1) (int1) (int2) = sigma (int2int1) (int1) (int2)
int1 : int
int2 : int
int2int1 : int -> int
Case1 : match (int2, int1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (match (int2, 0) with
| (Zero , _) -> 0
| (_, Zero ) -> int2
| (Pos n1', Pos n2') -> if less_than (n1') (n2') then -natural_sub (n2') (n1') else natural_sub (n1') (n2')
| (Neg n1', Neg n2') -> if less_than (n1') (n2') then natural_sub (n2') (n1') else -natural_sub (n1') (n2')
| (Pos n1', Neg n2') -> natural_add (n1') (n2')
| (Neg n1', Pos n2') -> -natural_add (n1') (n2'), int1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int1, int2) with
| (Zero , Zero ) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero , Pos Z ) -> true
| (Zero , Neg Z ) -> true
| (Pos Z , Zero ) -> true
| (Neg Z , Zero ) -> true
| (_, _) -> false then int2int1 (int1) else + (int2int1 (int1)) (sigma_ta1 (int2int1) (+ (int1) (0)) (int2)) = match (int2int1 (int2), 0) with
| (Zero , _) -> 0
| (_, Zero ) -> int2int1 (int2)
| (Pos n1', Pos n2') -> natural_add (n1') (n2')
| (Neg n1', Neg n2') -> -natural_add (n1') (n2')
| (Pos n1', Neg n2') -> if less_than (n1') (n2') then -natural_sub (n2') (n1') else natural_sub (n1') (n2')
| (Neg n1', Pos n2') -> if less_than (n1') (n2') then natural_sub (n2') (n1') else -natural_sub (n1') (n2')

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case match (int1, int2) with
| (Zero , Zero ) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero , Pos Z ) -> true
| (Zero , Neg Z ) -> true
| (Pos Z , Zero ) -> true
| (Neg Z , Zero ) -> true
| (_, _) -> false(rank:5)
=================================================
Progress: 9


1st goal of : forall (int2int1:int -> int) (int1:int) (int2:int), sigma_ta1 (int2int1) (int1) (int2) = sigma (int2int1) (int1) (int2)
int1 : int
int2 : int
int2int1 : int -> int
Case1 : match (int2, int1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
---------------------------------------
if match (int1, int2) with
| (Zero , Zero ) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero , Pos Z ) -> true
| (Zero , Neg Z ) -> true
| (Pos Z , Zero ) -> true
| (Neg Z , Zero ) -> true
| (_, _) -> false then int2int1 (int1) else + (int2int1 (int1)) (sigma_ta1 (int2int1) (+ (int1) (0)) (int2)) = fold (adder) (map (int2int1) (if match (match (int2, 0) with
| (Zero , _) -> 0
| (_, Zero ) -> int2
| (Pos n1', Pos n2') -> if less_than (n1') (n2') then -natural_sub (n2') (n1') else natural_sub (n1') (n2')
| (Neg n1', Neg n2') -> if less_than (n1') (n2') then natural_sub (n2') (n1') else -natural_sub (n1') (n2')
| (Pos n1', Neg n2') -> natural_add (n1') (n2')
| (Neg n1', Pos n2') -> -natural_add (n1') (n2'), int1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(Nil)) else aux (int1) (int2) (- (match (int2, 0) with
| (Zero , _) -> 0
| (_, Zero ) -> int2
| (Pos n1', Pos n2') -> if less_than (n1') (n2') then -natural_sub (n2') (n1') else natural_sub (n1') (n2')
| (Neg n1', Neg n2') -> if less_than (n1') (n2') then natural_sub (n2') (n1') else -natural_sub (n1') (n2')
| (Pos n1', Neg n2') -> natural_add (n1') (n2')
| (Neg n1', Pos n2') -> -natural_add (n1') (n2')) (0)) ((match (int2, 0) with
| (Zero , _) -> 0
| (_, Zero ) -> int2
| (Pos n1', Pos n2') -> if less_than (n1') (n2') then -natural_sub (n2') (n1') else natural_sub (n1') (n2')
| (Neg n1', Neg n2') -> if less_than (n1') (n2') then natural_sub (n2') (n1') else -natural_sub (n1') (n2')
| (Pos n1', Neg n2') -> natural_add (n1') (n2')
| (Neg n1', Pos n2') -> -natural_add (n1') (n2')::(int2::(Nil)))))) (0)

0 goal(s) more...

0 conjecture(s) more...
>>> case match (int1, int2) with
| (Zero , Zero ) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero , Pos Z ) -> true
| (Zero , Neg Z ) -> true
| (Pos Z , Zero ) -> true
| (Neg Z , Zero ) -> true
| (_, _) -> false(rank : 4)


1st goal of : forall (int2int1:int -> int) (int1:int) (int2:int), sigma_ta1 (int2int1) (int1) (int2) = sigma (int2int1) (int1) (int2)
int1 : int
int2 : int
int2int1 : int -> int
Case1 : match (int2, int1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (int1, int2) with
| (Zero , Zero ) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero , Pos Z ) -> true
| (Zero , Neg Z ) -> true
| (Pos Z , Zero ) -> true
| (Neg Z , Zero ) -> true
| (_, _) -> false = true
---------------------------------------
int2int1 (int1) = fold (adder) (map (int2int1) (if match (match (int2, 0) with
| (Zero , _) -> 0
| (_, Zero ) -> int2
| (Pos n1', Pos n2') -> if less_than (n1') (n2') then -natural_sub (n2') (n1') else natural_sub (n1') (n2')
| (Neg n1', Neg n2') -> if less_than (n1') (n2') then natural_sub (n2') (n1') else -natural_sub (n1') (n2')
| (Pos n1', Neg n2') -> natural_add (n1') (n2')
| (Neg n1', Pos n2') -> -natural_add (n1') (n2'), int1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true then (int2::(Nil)) else aux (int1) (int2) (- (match (int2, 0) with
| (Zero , _) -> 0
| (_, Zero ) -> int2
| (Pos n1', Pos n2') -> if less_than (n1') (n2') then -natural_sub (n2') (n1') else natural_sub (n1') (n2')
| (Neg n1', Neg n2') -> if less_than (n1') (n2') then natural_sub (n2') (n1') else -natural_sub (n1') (n2')
| (Pos n1', Neg n2') -> natural_add (n1') (n2')
| (Neg n1', Pos n2') -> -natural_add (n1') (n2')) (0)) ((match (int2, 0) with
| (Zero , _) -> 0
| (_, Zero ) -> int2
| (Pos n1', Pos n2') -> if less_than (n1') (n2') then -natural_sub (n2') (n1') else natural_sub (n1') (n2')
| (Neg n1', Neg n2') -> if less_than (n1') (n2') then natural_sub (n2') (n1') else -natural_sub (n1') (n2')
| (Pos n1', Neg n2') -> natural_add (n1') (n2')
| (Neg n1', Pos n2') -> -natural_add (n1') (n2')::(int2::(Nil)))))) (0)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case match (match (int2, 0) with
| (Zero , _) -> 0
| (_, Zero ) -> int2
| (Pos n1', Pos n2') -> if less_than (n1') (n2') then -natural_sub (n2') (n1') else natural_sub (n1') (n2')
| (Neg n1', Neg n2') -> if less_than (n1') (n2') then natural_sub (n2') (n1') else -natural_sub (n1') (n2')
| (Pos n1', Neg n2') -> natural_add (n1') (n2')
| (Neg n1', Pos n2') -> -natural_add (n1') (n2'), int1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true(rank:5)
=================================================
Progress: 10


1st goal of : forall (int2int1:int -> int) (int1:int) (int2:int), sigma_ta1 (int2int1) (int1) (int2) = sigma (int2int1) (int1) (int2)
int1 : int
int2 : int
int2int1 : int -> int
Case1 : match (int2, int1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (match (int2, 0) with
| (Zero , _) -> 0
| (_, Zero ) -> int2
| (Pos n1', Pos n2') -> if less_than (n1') (n2') then -natural_sub (n2') (n1') else natural_sub (n1') (n2')
| (Neg n1', Neg n2') -> if less_than (n1') (n2') then natural_sub (n2') (n1') else -natural_sub (n1') (n2')
| (Pos n1', Neg n2') -> natural_add (n1') (n2')
| (Neg n1', Pos n2') -> -natural_add (n1') (n2'), int1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
---------------------------------------
if match (int1, int2) with
| (Zero , Zero ) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero , Pos Z ) -> true
| (Zero , Neg Z ) -> true
| (Pos Z , Zero ) -> true
| (Neg Z , Zero ) -> true
| (_, _) -> false then int2int1 (int1) else + (int2int1 (int1)) (sigma_ta1 (int2int1) (+ (int1) (0)) (int2)) = match (int2int1 (int2), 0) with
| (Zero , _) -> 0
| (_, Zero ) -> int2int1 (int2)
| (Pos n1', Pos n2') -> natural_add (n1') (n2')
| (Neg n1', Neg n2') -> -natural_add (n1') (n2')
| (Pos n1', Neg n2') -> if less_than (n1') (n2') then -natural_sub (n2') (n1') else natural_sub (n1') (n2')
| (Neg n1', Pos n2') -> if less_than (n1') (n2') then natural_sub (n2') (n1') else -natural_sub (n1') (n2')

1 goal(s) more...

0 conjecture(s) more...
>>> case match (int1, int2) with
| (Zero , Zero ) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero , Pos Z ) -> true
| (Zero , Neg Z ) -> true
| (Pos Z , Zero ) -> true
| (Neg Z , Zero ) -> true
| (_, _) -> false(rank : 5)


1st goal of : forall (int2int1:int -> int) (int1:int) (int2:int), sigma_ta1 (int2int1) (int1) (int2) = sigma (int2int1) (int1) (int2)
int1 : int
int2 : int
int2int1 : int -> int
Case1 : match (int2, int1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false
Case2 : match (match (int2, 0) with
| (Zero , _) -> 0
| (_, Zero ) -> int2
| (Pos n1', Pos n2') -> if less_than (n1') (n2') then -natural_sub (n2') (n1') else natural_sub (n1') (n2')
| (Neg n1', Neg n2') -> if less_than (n1') (n2') then natural_sub (n2') (n1') else -natural_sub (n1') (n2')
| (Pos n1', Neg n2') -> natural_add (n1') (n2')
| (Neg n1', Pos n2') -> -natural_add (n1') (n2'), int1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true
Case3 : match (int1, int2) with
| (Zero , Zero ) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero , Pos Z ) -> true
| (Zero , Neg Z ) -> true
| (Pos Z , Zero ) -> true
| (Neg Z , Zero ) -> true
| (_, _) -> false = true
---------------------------------------
int2int1 (int1) = match (int2int1 (int2), 0) with
| (Zero , _) -> 0
| (_, Zero ) -> int2int1 (int2)
| (Pos n1', Pos n2') -> natural_add (n1') (n2')
| (Neg n1', Neg n2') -> -natural_add (n1') (n2')
| (Pos n1', Neg n2') -> if less_than (n1') (n2') then -natural_sub (n2') (n1') else natural_sub (n1') (n2')
| (Neg n1', Pos n2') -> if less_than (n1') (n2') then natural_sub (n2') (n1') else -natural_sub (n1') (n2')

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
Lemma : forall (int1:int) (int2:int), match (int2, int1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false->match (match (int2, 0) with
| (Zero , _) -> 0
| (_, Zero ) -> int2
| (Pos n1', Pos n2') -> if less_than (n1') (n2') then -natural_sub (n2') (n1') else natural_sub (n1') (n2')
| (Neg n1', Neg n2') -> if less_than (n1') (n2') then natural_sub (n2') (n1') else -natural_sub (n1') (n2')
| (Pos n1', Neg n2') -> natural_add (n1') (n2')
| (Neg n1', Pos n2') -> -natural_add (n1') (n2'), int1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true->match (int1, int2) with
| (Zero , Zero ) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero , Pos Z ) -> true
| (Zero , Neg Z ) -> true
| (Pos Z , Zero ) -> true
| (Neg Z , Zero ) -> true
| (_, _) -> false = true -> int2int1 (int1) = match (int2int1 (int2), 0) with
| (Zero , _) -> 0
| (_, Zero ) -> int2int1 (int2)
| (Pos n1', Pos n2') -> natural_add (n1') (n2')
| (Neg n1', Neg n2') -> -natural_add (n1') (n2')
| (Pos n1', Neg n2') -> if less_than (n1') (n2') then -natural_sub (n2') (n1') else natural_sub (n1') (n2')
| (Neg n1', Pos n2') -> if less_than (n1') (n2') then natural_sub (n2') (n1') else -natural_sub (n1') (n2')
Model : int1: 0, int2: -0
Model : int1: 0, int2: 0
Model : int1: 0, int2: -0
Substituting variables...
Simplifying conditions and property...
let adder a b =
+ (a) (b)
let sigma f a b =
fold (adder) (map (f) (helper (a) (b))) (0)
prop list:
int2int1 (0) = match (int2int1 (-0), 0) with
| (Zero , _) -> 0
| (_, Zero ) -> int2int1 (-0)
| (Pos n1', Pos n2') -> natural_add (n1') (n2')
| (Neg n1', Neg n2') -> -natural_add (n1') (n2')
| (Pos n1', Neg n2') -> if less_than (n1') (n2') then -natural_sub (n2') (n1') else natural_sub (n1') (n2')
| (Neg n1', Pos n2') -> if less_than (n1') (n2') then natural_sub (n2') (n1') else -natural_sub (n1') (n2')
int2int1 (0) = match (int2int1 (0), 0) with
| (Zero , _) -> 0
| (_, Zero ) -> int2int1 (0)
| (Pos n1', Pos n2') -> natural_add (n1') (n2')
| (Neg n1', Neg n2') -> -natural_add (n1') (n2')
| (Pos n1', Neg n2') -> if less_than (n1') (n2') then -natural_sub (n2') (n1') else natural_sub (n1') (n2')
| (Neg n1', Pos n2') -> if less_than (n1') (n2') then natural_sub (n2') (n1') else -natural_sub (n1') (n2')
int2int1 (0) = match (int2int1 (-0), 0) with
| (Zero , _) -> 0
| (_, Zero ) -> int2int1 (-0)
| (Pos n1', Pos n2') -> natural_add (n1') (n2')
| (Neg n1', Neg n2') -> -natural_add (n1') (n2')
| (Pos n1', Neg n2') -> if less_than (n1') (n2') then -natural_sub (n2') (n1') else natural_sub (n1') (n2')
| (Neg n1', Pos n2') -> if less_than (n1') (n2') then natural_sub (n2') (n1') else -natural_sub (n1') (n2')
Simplifying took 0.000079 seconds
Result : false
Lemma : forall (int1:int) (int2:int), match (int2, int1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = false->match (match (int2, 0) with
| (Zero , _) -> 0
| (_, Zero ) -> int2
| (Pos n1', Pos n2') -> if less_than (n1') (n2') then -natural_sub (n2') (n1') else natural_sub (n1') (n2')
| (Neg n1', Neg n2') -> if less_than (n1') (n2') then natural_sub (n2') (n1') else -natural_sub (n1') (n2')
| (Pos n1', Neg n2') -> natural_add (n1') (n2')
| (Neg n1', Pos n2') -> -natural_add (n1') (n2'), int1) with
| (Zero , Pos _) -> true
| (Zero , _) -> false
| (Neg _, Zero ) -> true
| (_, Zero ) -> false
| (Pos n1', Pos n2') -> less_than (n1') (n2')
| (Neg n1', Neg n2') -> less_than (n2') (n1')
| (Pos n1', Neg n2') -> false
| (Neg n1', Pos n2') -> true = true->match (int1, int2) with
| (Zero , Zero ) -> true
| (Pos n1', Pos n2') -> natural_eq (n1') (n2')
| (Neg n1', Neg n2') -> natural_eq (n1') (n2')
| (Zero , Pos Z ) -> true
| (Zero , Neg Z ) -> true
| (Pos Z , Zero ) -> true
| (Neg Z , Zero ) -> true
| (_, _) -> false = true -> int2int1 (int1) = match (int2int1 (int2), 0) with
| (Zero , _) -> 0
| (_, Zero ) -> int2int1 (int2)
| (Pos n1', Pos n2') -> natural_add (n1') (n2')
| (Neg n1', Neg n2') -> -natural_add (n1') (n2')
| (Pos n1', Neg n2') -> if less_than (n1') (n2') then -natural_sub (n2') (n1') else natural_sub (n1') (n2')
| (Neg n1', Pos n2') -> if less_than (n1') (n2') then natural_sub (n2') (n1') else -natural_sub (n1') (n2')
Fatal error: exception Invalid_argument("Random.int")
Raised at Stdlib.invalid_arg in file "stdlib.ml", line 30, characters 20-45
Called from Dilemma__Validate.generator in file "lib/validate.ml", line 46, characters 19-56
Called from Dilemma__Validate.validate.(fun) in file "lib/validate.ml", line 94, characters 34-52
Called from Stdlib__List.map in file "list.ml", line 86, characters 15-19
Called from Dilemma__Validate.validate.(fun) in file "lib/validate.ml", lines 91-96, characters 8-14
Called from Stdlib__List.init in file "list.ml", line 66, characters 13-16
Called from Dilemma__Validate.validate in file "lib/validate.ml", lines 89-100, characters 4-11
Called from Stdlib__List.for_all in file "list.ml", line 172, characters 12-15
Called from Dilemma__Finder.naive_generalize in file "lib/finder.ml", line 1242, characters 13-74
Called from Dilemma__Finder.advanced_generalize in file "lib/finder.ml", line 1308, characters 50-72
Called from Dilemma__Finder.find_lemma in file "lib/finder.ml", line 1328, characters 22-43
Called from Stdlib__List.map in file "list.ml", line 83, characters 15-19
Called from Dilemma__Engine.progress in file "lib/engine.ml", line 197, characters 12-77
Called from Dilemma__Engine.proof_auto in file "lib/engine.ml", line 291, characters 8-69
Called from Dune__exe__Main.main in file "bin/main.ml", line 24, characters 12-79
